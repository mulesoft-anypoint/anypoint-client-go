/*
Exchange Client Apps

Description of the Exchange Client Applications API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package exchange_client_apps

import (
	"encoding/json"
)

// checks if the ClientAppClientProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientAppClientProvider{}

// ClientAppClientProvider struct for ClientAppClientProvider
type ClientAppClientProvider struct {
	ProviderId NullableString `json:"providerId,omitempty"`
	Name *string `json:"name,omitempty"`
	Type NullableString `json:"type,omitempty"`
}

// NewClientAppClientProvider instantiates a new ClientAppClientProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientAppClientProvider() *ClientAppClientProvider {
	this := ClientAppClientProvider{}
	return &this
}

// NewClientAppClientProviderWithDefaults instantiates a new ClientAppClientProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientAppClientProviderWithDefaults() *ClientAppClientProvider {
	this := ClientAppClientProvider{}
	return &this
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientAppClientProvider) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId.Get()) {
		var ret string
		return ret
	}
	return *o.ProviderId.Get()
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientAppClientProvider) GetProviderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProviderId.Get(), o.ProviderId.IsSet()
}

// HasProviderId returns a boolean if a field has been set.
func (o *ClientAppClientProvider) HasProviderId() bool {
	if o != nil && o.ProviderId.IsSet() {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given NullableString and assigns it to the ProviderId field.
func (o *ClientAppClientProvider) SetProviderId(v string) {
	o.ProviderId.Set(&v)
}
// SetProviderIdNil sets the value for ProviderId to be an explicit nil
func (o *ClientAppClientProvider) SetProviderIdNil() {
	o.ProviderId.Set(nil)
}

// UnsetProviderId ensures that no value is present for ProviderId, not even an explicit nil
func (o *ClientAppClientProvider) UnsetProviderId() {
	o.ProviderId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClientAppClientProvider) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClientAppClientProvider) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClientAppClientProvider) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClientAppClientProvider) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientAppClientProvider) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientAppClientProvider) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ClientAppClientProvider) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *ClientAppClientProvider) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ClientAppClientProvider) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ClientAppClientProvider) UnsetType() {
	o.Type.Unset()
}

func (o ClientAppClientProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientAppClientProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProviderId.IsSet() {
		toSerialize["providerId"] = o.ProviderId.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableClientAppClientProvider struct {
	value *ClientAppClientProvider
	isSet bool
}

func (v NullableClientAppClientProvider) Get() *ClientAppClientProvider {
	return v.value
}

func (v *NullableClientAppClientProvider) Set(val *ClientAppClientProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableClientAppClientProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableClientAppClientProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientAppClientProvider(val *ClientAppClientProvider) *NullableClientAppClientProvider {
	return &NullableClientAppClientProvider{value: val, isSet: true}
}

func (v NullableClientAppClientProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientAppClientProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


