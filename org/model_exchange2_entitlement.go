/*
Organization API

Description of the Organization API

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the Exchange2Entitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Exchange2Entitlement{}

// Exchange2Entitlement Exchange 2 entitlements
type Exchange2Entitlement struct {
	// Exchange 2 enabled
	Enabled *bool `json:"enabled,omitempty"`
	AssetUsageAndEngagement *Exchange2EntitlementAssetUsageAndEngagement `json:"assetUsageAndEngagement,omitempty"`
}

// NewExchange2Entitlement instantiates a new Exchange2Entitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchange2Entitlement() *Exchange2Entitlement {
	this := Exchange2Entitlement{}
	return &this
}

// NewExchange2EntitlementWithDefaults instantiates a new Exchange2Entitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchange2EntitlementWithDefaults() *Exchange2Entitlement {
	this := Exchange2Entitlement{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Exchange2Entitlement) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange2Entitlement) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Exchange2Entitlement) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Exchange2Entitlement) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetAssetUsageAndEngagement returns the AssetUsageAndEngagement field value if set, zero value otherwise.
func (o *Exchange2Entitlement) GetAssetUsageAndEngagement() Exchange2EntitlementAssetUsageAndEngagement {
	if o == nil || IsNil(o.AssetUsageAndEngagement) {
		var ret Exchange2EntitlementAssetUsageAndEngagement
		return ret
	}
	return *o.AssetUsageAndEngagement
}

// GetAssetUsageAndEngagementOk returns a tuple with the AssetUsageAndEngagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Exchange2Entitlement) GetAssetUsageAndEngagementOk() (*Exchange2EntitlementAssetUsageAndEngagement, bool) {
	if o == nil || IsNil(o.AssetUsageAndEngagement) {
		return nil, false
	}
	return o.AssetUsageAndEngagement, true
}

// HasAssetUsageAndEngagement returns a boolean if a field has been set.
func (o *Exchange2Entitlement) HasAssetUsageAndEngagement() bool {
	if o != nil && !IsNil(o.AssetUsageAndEngagement) {
		return true
	}

	return false
}

// SetAssetUsageAndEngagement gets a reference to the given Exchange2EntitlementAssetUsageAndEngagement and assigns it to the AssetUsageAndEngagement field.
func (o *Exchange2Entitlement) SetAssetUsageAndEngagement(v Exchange2EntitlementAssetUsageAndEngagement) {
	o.AssetUsageAndEngagement = &v
}

func (o Exchange2Entitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Exchange2Entitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.AssetUsageAndEngagement) {
		toSerialize["assetUsageAndEngagement"] = o.AssetUsageAndEngagement
	}
	return toSerialize, nil
}

type NullableExchange2Entitlement struct {
	value *Exchange2Entitlement
	isSet bool
}

func (v NullableExchange2Entitlement) Get() *Exchange2Entitlement {
	return v.value
}

func (v *NullableExchange2Entitlement) Set(val *Exchange2Entitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableExchange2Entitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableExchange2Entitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchange2Entitlement(val *Exchange2Entitlement) *NullableExchange2Entitlement {
	return &NullableExchange2Entitlement{value: val, isSet: true}
}

func (v NullableExchange2Entitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchange2Entitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


