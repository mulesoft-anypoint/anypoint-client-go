/*
Organization API

Description of the Organization API

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the ApiManagerEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiManagerEntitlement{}

// ApiManagerEntitlement struct for ApiManagerEntitlement
type ApiManagerEntitlement struct {
	Governance *Governance `json:"governance,omitempty"`
	UsageBasedPricing *UsageBasedPricing `json:"usageBasedPricing,omitempty"`
}

// NewApiManagerEntitlement instantiates a new ApiManagerEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiManagerEntitlement() *ApiManagerEntitlement {
	this := ApiManagerEntitlement{}
	return &this
}

// NewApiManagerEntitlementWithDefaults instantiates a new ApiManagerEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiManagerEntitlementWithDefaults() *ApiManagerEntitlement {
	this := ApiManagerEntitlement{}
	return &this
}

// GetGovernance returns the Governance field value if set, zero value otherwise.
func (o *ApiManagerEntitlement) GetGovernance() Governance {
	if o == nil || IsNil(o.Governance) {
		var ret Governance
		return ret
	}
	return *o.Governance
}

// GetGovernanceOk returns a tuple with the Governance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiManagerEntitlement) GetGovernanceOk() (*Governance, bool) {
	if o == nil || IsNil(o.Governance) {
		return nil, false
	}
	return o.Governance, true
}

// HasGovernance returns a boolean if a field has been set.
func (o *ApiManagerEntitlement) HasGovernance() bool {
	if o != nil && !IsNil(o.Governance) {
		return true
	}

	return false
}

// SetGovernance gets a reference to the given Governance and assigns it to the Governance field.
func (o *ApiManagerEntitlement) SetGovernance(v Governance) {
	o.Governance = &v
}

// GetUsageBasedPricing returns the UsageBasedPricing field value if set, zero value otherwise.
func (o *ApiManagerEntitlement) GetUsageBasedPricing() UsageBasedPricing {
	if o == nil || IsNil(o.UsageBasedPricing) {
		var ret UsageBasedPricing
		return ret
	}
	return *o.UsageBasedPricing
}

// GetUsageBasedPricingOk returns a tuple with the UsageBasedPricing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiManagerEntitlement) GetUsageBasedPricingOk() (*UsageBasedPricing, bool) {
	if o == nil || IsNil(o.UsageBasedPricing) {
		return nil, false
	}
	return o.UsageBasedPricing, true
}

// HasUsageBasedPricing returns a boolean if a field has been set.
func (o *ApiManagerEntitlement) HasUsageBasedPricing() bool {
	if o != nil && !IsNil(o.UsageBasedPricing) {
		return true
	}

	return false
}

// SetUsageBasedPricing gets a reference to the given UsageBasedPricing and assigns it to the UsageBasedPricing field.
func (o *ApiManagerEntitlement) SetUsageBasedPricing(v UsageBasedPricing) {
	o.UsageBasedPricing = &v
}

func (o ApiManagerEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiManagerEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Governance) {
		toSerialize["governance"] = o.Governance
	}
	if !IsNil(o.UsageBasedPricing) {
		toSerialize["usageBasedPricing"] = o.UsageBasedPricing
	}
	return toSerialize, nil
}

type NullableApiManagerEntitlement struct {
	value *ApiManagerEntitlement
	isSet bool
}

func (v NullableApiManagerEntitlement) Get() *ApiManagerEntitlement {
	return v.value
}

func (v *NullableApiManagerEntitlement) Set(val *ApiManagerEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableApiManagerEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableApiManagerEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiManagerEntitlement(val *ApiManagerEntitlement) *NullableApiManagerEntitlement {
	return &NullableApiManagerEntitlement{value: val, isSet: true}
}

func (v NullableApiManagerEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiManagerEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


