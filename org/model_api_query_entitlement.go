/*
Organization API

Description of the Organization API

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the ApiQueryEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApiQueryEntitlement{}

// ApiQueryEntitlement API Query entitlements
type ApiQueryEntitlement struct {
	// API Query enabled
	Enabled *bool `json:"enabled,omitempty"`
	// Product SKU
	ProductSKU *int32 `json:"productSKU,omitempty"`
	// Product SKU
	Sandbox *int32 `json:"sandbox,omitempty"`
	// Product SKU
	Production *int32 `json:"production,omitempty"`
}

// NewApiQueryEntitlement instantiates a new ApiQueryEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiQueryEntitlement() *ApiQueryEntitlement {
	this := ApiQueryEntitlement{}
	var enabled bool = false
	this.Enabled = &enabled
	var productSKU int32 = 0
	this.ProductSKU = &productSKU
	return &this
}

// NewApiQueryEntitlementWithDefaults instantiates a new ApiQueryEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiQueryEntitlementWithDefaults() *ApiQueryEntitlement {
	this := ApiQueryEntitlement{}
	var enabled bool = false
	this.Enabled = &enabled
	var productSKU int32 = 0
	this.ProductSKU = &productSKU
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ApiQueryEntitlement) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiQueryEntitlement) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ApiQueryEntitlement) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ApiQueryEntitlement) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetProductSKU returns the ProductSKU field value if set, zero value otherwise.
func (o *ApiQueryEntitlement) GetProductSKU() int32 {
	if o == nil || IsNil(o.ProductSKU) {
		var ret int32
		return ret
	}
	return *o.ProductSKU
}

// GetProductSKUOk returns a tuple with the ProductSKU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiQueryEntitlement) GetProductSKUOk() (*int32, bool) {
	if o == nil || IsNil(o.ProductSKU) {
		return nil, false
	}
	return o.ProductSKU, true
}

// HasProductSKU returns a boolean if a field has been set.
func (o *ApiQueryEntitlement) HasProductSKU() bool {
	if o != nil && !IsNil(o.ProductSKU) {
		return true
	}

	return false
}

// SetProductSKU gets a reference to the given int32 and assigns it to the ProductSKU field.
func (o *ApiQueryEntitlement) SetProductSKU(v int32) {
	o.ProductSKU = &v
}

// GetSandbox returns the Sandbox field value if set, zero value otherwise.
func (o *ApiQueryEntitlement) GetSandbox() int32 {
	if o == nil || IsNil(o.Sandbox) {
		var ret int32
		return ret
	}
	return *o.Sandbox
}

// GetSandboxOk returns a tuple with the Sandbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiQueryEntitlement) GetSandboxOk() (*int32, bool) {
	if o == nil || IsNil(o.Sandbox) {
		return nil, false
	}
	return o.Sandbox, true
}

// HasSandbox returns a boolean if a field has been set.
func (o *ApiQueryEntitlement) HasSandbox() bool {
	if o != nil && !IsNil(o.Sandbox) {
		return true
	}

	return false
}

// SetSandbox gets a reference to the given int32 and assigns it to the Sandbox field.
func (o *ApiQueryEntitlement) SetSandbox(v int32) {
	o.Sandbox = &v
}

// GetProduction returns the Production field value if set, zero value otherwise.
func (o *ApiQueryEntitlement) GetProduction() int32 {
	if o == nil || IsNil(o.Production) {
		var ret int32
		return ret
	}
	return *o.Production
}

// GetProductionOk returns a tuple with the Production field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApiQueryEntitlement) GetProductionOk() (*int32, bool) {
	if o == nil || IsNil(o.Production) {
		return nil, false
	}
	return o.Production, true
}

// HasProduction returns a boolean if a field has been set.
func (o *ApiQueryEntitlement) HasProduction() bool {
	if o != nil && !IsNil(o.Production) {
		return true
	}

	return false
}

// SetProduction gets a reference to the given int32 and assigns it to the Production field.
func (o *ApiQueryEntitlement) SetProduction(v int32) {
	o.Production = &v
}

func (o ApiQueryEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApiQueryEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.ProductSKU) {
		toSerialize["productSKU"] = o.ProductSKU
	}
	if !IsNil(o.Sandbox) {
		toSerialize["sandbox"] = o.Sandbox
	}
	if !IsNil(o.Production) {
		toSerialize["production"] = o.Production
	}
	return toSerialize, nil
}

type NullableApiQueryEntitlement struct {
	value *ApiQueryEntitlement
	isSet bool
}

func (v NullableApiQueryEntitlement) Get() *ApiQueryEntitlement {
	return v.value
}

func (v *NullableApiQueryEntitlement) Set(val *ApiQueryEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableApiQueryEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableApiQueryEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiQueryEntitlement(val *ApiQueryEntitlement) *NullableApiQueryEntitlement {
	return &NullableApiQueryEntitlement{value: val, isSet: true}
}

func (v NullableApiQueryEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiQueryEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


