/*
Organization API

Description of the Organization API

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the LoadBalancerEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadBalancerEntitlement{}

// LoadBalancerEntitlement struct for LoadBalancerEntitlement
type LoadBalancerEntitlement struct {
	// Load Balancers assigned
	Assigned *int32 `json:"assigned,omitempty"`
	// Load Balancers reassigned
	Reassigned *int32 `json:"reassigned,omitempty"`
}

// NewLoadBalancerEntitlement instantiates a new LoadBalancerEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadBalancerEntitlement() *LoadBalancerEntitlement {
	this := LoadBalancerEntitlement{}
	var assigned int32 = 0
	this.Assigned = &assigned
	var reassigned int32 = 0
	this.Reassigned = &reassigned
	return &this
}

// NewLoadBalancerEntitlementWithDefaults instantiates a new LoadBalancerEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadBalancerEntitlementWithDefaults() *LoadBalancerEntitlement {
	this := LoadBalancerEntitlement{}
	var assigned int32 = 0
	this.Assigned = &assigned
	var reassigned int32 = 0
	this.Reassigned = &reassigned
	return &this
}

// GetAssigned returns the Assigned field value if set, zero value otherwise.
func (o *LoadBalancerEntitlement) GetAssigned() int32 {
	if o == nil || IsNil(o.Assigned) {
		var ret int32
		return ret
	}
	return *o.Assigned
}

// GetAssignedOk returns a tuple with the Assigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerEntitlement) GetAssignedOk() (*int32, bool) {
	if o == nil || IsNil(o.Assigned) {
		return nil, false
	}
	return o.Assigned, true
}

// HasAssigned returns a boolean if a field has been set.
func (o *LoadBalancerEntitlement) HasAssigned() bool {
	if o != nil && !IsNil(o.Assigned) {
		return true
	}

	return false
}

// SetAssigned gets a reference to the given int32 and assigns it to the Assigned field.
func (o *LoadBalancerEntitlement) SetAssigned(v int32) {
	o.Assigned = &v
}

// GetReassigned returns the Reassigned field value if set, zero value otherwise.
func (o *LoadBalancerEntitlement) GetReassigned() int32 {
	if o == nil || IsNil(o.Reassigned) {
		var ret int32
		return ret
	}
	return *o.Reassigned
}

// GetReassignedOk returns a tuple with the Reassigned field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadBalancerEntitlement) GetReassignedOk() (*int32, bool) {
	if o == nil || IsNil(o.Reassigned) {
		return nil, false
	}
	return o.Reassigned, true
}

// HasReassigned returns a boolean if a field has been set.
func (o *LoadBalancerEntitlement) HasReassigned() bool {
	if o != nil && !IsNil(o.Reassigned) {
		return true
	}

	return false
}

// SetReassigned gets a reference to the given int32 and assigns it to the Reassigned field.
func (o *LoadBalancerEntitlement) SetReassigned(v int32) {
	o.Reassigned = &v
}

func (o LoadBalancerEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadBalancerEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Assigned) {
		toSerialize["assigned"] = o.Assigned
	}
	if !IsNil(o.Reassigned) {
		toSerialize["reassigned"] = o.Reassigned
	}
	return toSerialize, nil
}

type NullableLoadBalancerEntitlement struct {
	value *LoadBalancerEntitlement
	isSet bool
}

func (v NullableLoadBalancerEntitlement) Get() *LoadBalancerEntitlement {
	return v.value
}

func (v *NullableLoadBalancerEntitlement) Set(val *LoadBalancerEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadBalancerEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadBalancerEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadBalancerEntitlement(val *LoadBalancerEntitlement) *NullableLoadBalancerEntitlement {
	return &NullableLoadBalancerEntitlement{value: val, isSet: true}
}

func (v NullableLoadBalancerEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadBalancerEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


