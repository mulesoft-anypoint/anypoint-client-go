/*
Organization API

Description of the Organization API

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the HighAvailability type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighAvailability{}

// HighAvailability struct for HighAvailability
type HighAvailability struct {
	// Clustering
	Clustering *bool `json:"clustering,omitempty"`
}

// NewHighAvailability instantiates a new HighAvailability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighAvailability() *HighAvailability {
	this := HighAvailability{}
	var clustering bool = false
	this.Clustering = &clustering
	return &this
}

// NewHighAvailabilityWithDefaults instantiates a new HighAvailability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighAvailabilityWithDefaults() *HighAvailability {
	this := HighAvailability{}
	var clustering bool = false
	this.Clustering = &clustering
	return &this
}

// GetClustering returns the Clustering field value if set, zero value otherwise.
func (o *HighAvailability) GetClustering() bool {
	if o == nil || IsNil(o.Clustering) {
		var ret bool
		return ret
	}
	return *o.Clustering
}

// GetClusteringOk returns a tuple with the Clustering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighAvailability) GetClusteringOk() (*bool, bool) {
	if o == nil || IsNil(o.Clustering) {
		return nil, false
	}
	return o.Clustering, true
}

// HasClustering returns a boolean if a field has been set.
func (o *HighAvailability) HasClustering() bool {
	if o != nil && !IsNil(o.Clustering) {
		return true
	}

	return false
}

// SetClustering gets a reference to the given bool and assigns it to the Clustering field.
func (o *HighAvailability) SetClustering(v bool) {
	o.Clustering = &v
}

func (o HighAvailability) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighAvailability) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clustering) {
		toSerialize["clustering"] = o.Clustering
	}
	return toSerialize, nil
}

type NullableHighAvailability struct {
	value *HighAvailability
	isSet bool
}

func (v NullableHighAvailability) Get() *HighAvailability {
	return v.value
}

func (v *NullableHighAvailability) Set(val *HighAvailability) {
	v.value = val
	v.isSet = true
}

func (v NullableHighAvailability) IsSet() bool {
	return v.isSet
}

func (v *NullableHighAvailability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighAvailability(val *HighAvailability) *NullableHighAvailability {
	return &NullableHighAvailability{value: val, isSet: true}
}

func (v NullableHighAvailability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighAvailability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


