/*
Organization API

Description of the Organization API

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the RpaEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RpaEntitlement{}

// RpaEntitlement struct for RpaEntitlement
type RpaEntitlement struct {
	// RPA enabled
	Enabled *bool `json:"enabled,omitempty"`
	// RPA active
	Active *bool `json:"active,omitempty"`
	// Composer version
	ComposerVersion *string `json:"composerVersion,omitempty"`
}

// NewRpaEntitlement instantiates a new RpaEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRpaEntitlement() *RpaEntitlement {
	this := RpaEntitlement{}
	var enabled bool = false
	this.Enabled = &enabled
	var active bool = false
	this.Active = &active
	var composerVersion string = ""
	this.ComposerVersion = &composerVersion
	return &this
}

// NewRpaEntitlementWithDefaults instantiates a new RpaEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRpaEntitlementWithDefaults() *RpaEntitlement {
	this := RpaEntitlement{}
	var enabled bool = false
	this.Enabled = &enabled
	var active bool = false
	this.Active = &active
	var composerVersion string = ""
	this.ComposerVersion = &composerVersion
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RpaEntitlement) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpaEntitlement) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RpaEntitlement) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RpaEntitlement) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *RpaEntitlement) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpaEntitlement) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *RpaEntitlement) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *RpaEntitlement) SetActive(v bool) {
	o.Active = &v
}

// GetComposerVersion returns the ComposerVersion field value if set, zero value otherwise.
func (o *RpaEntitlement) GetComposerVersion() string {
	if o == nil || IsNil(o.ComposerVersion) {
		var ret string
		return ret
	}
	return *o.ComposerVersion
}

// GetComposerVersionOk returns a tuple with the ComposerVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpaEntitlement) GetComposerVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ComposerVersion) {
		return nil, false
	}
	return o.ComposerVersion, true
}

// HasComposerVersion returns a boolean if a field has been set.
func (o *RpaEntitlement) HasComposerVersion() bool {
	if o != nil && !IsNil(o.ComposerVersion) {
		return true
	}

	return false
}

// SetComposerVersion gets a reference to the given string and assigns it to the ComposerVersion field.
func (o *RpaEntitlement) SetComposerVersion(v string) {
	o.ComposerVersion = &v
}

func (o RpaEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RpaEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !IsNil(o.ComposerVersion) {
		toSerialize["composerVersion"] = o.ComposerVersion
	}
	return toSerialize, nil
}

type NullableRpaEntitlement struct {
	value *RpaEntitlement
	isSet bool
}

func (v NullableRpaEntitlement) Get() *RpaEntitlement {
	return v.value
}

func (v *NullableRpaEntitlement) Set(val *RpaEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableRpaEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableRpaEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRpaEntitlement(val *RpaEntitlement) *NullableRpaEntitlement {
	return &NullableRpaEntitlement{value: val, isSet: true}
}

func (v NullableRpaEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRpaEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


