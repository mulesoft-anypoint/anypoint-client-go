/*
Organization API

Description of the Organization API

API version: 1.1.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the HighAvailabilityEntitlement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HighAvailabilityEntitlement{}

// HighAvailabilityEntitlement struct for HighAvailabilityEntitlement
type HighAvailabilityEntitlement struct {
	// Clustering
	Clustering *bool `json:"clustering,omitempty"`
}

// NewHighAvailabilityEntitlement instantiates a new HighAvailabilityEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHighAvailabilityEntitlement() *HighAvailabilityEntitlement {
	this := HighAvailabilityEntitlement{}
	return &this
}

// NewHighAvailabilityEntitlementWithDefaults instantiates a new HighAvailabilityEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHighAvailabilityEntitlementWithDefaults() *HighAvailabilityEntitlement {
	this := HighAvailabilityEntitlement{}
	return &this
}

// GetClustering returns the Clustering field value if set, zero value otherwise.
func (o *HighAvailabilityEntitlement) GetClustering() bool {
	if o == nil || IsNil(o.Clustering) {
		var ret bool
		return ret
	}
	return *o.Clustering
}

// GetClusteringOk returns a tuple with the Clustering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HighAvailabilityEntitlement) GetClusteringOk() (*bool, bool) {
	if o == nil || IsNil(o.Clustering) {
		return nil, false
	}
	return o.Clustering, true
}

// HasClustering returns a boolean if a field has been set.
func (o *HighAvailabilityEntitlement) HasClustering() bool {
	if o != nil && !IsNil(o.Clustering) {
		return true
	}

	return false
}

// SetClustering gets a reference to the given bool and assigns it to the Clustering field.
func (o *HighAvailabilityEntitlement) SetClustering(v bool) {
	o.Clustering = &v
}

func (o HighAvailabilityEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HighAvailabilityEntitlement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Clustering) {
		toSerialize["clustering"] = o.Clustering
	}
	return toSerialize, nil
}

type NullableHighAvailabilityEntitlement struct {
	value *HighAvailabilityEntitlement
	isSet bool
}

func (v NullableHighAvailabilityEntitlement) Get() *HighAvailabilityEntitlement {
	return v.value
}

func (v *NullableHighAvailabilityEntitlement) Set(val *HighAvailabilityEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableHighAvailabilityEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableHighAvailabilityEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHighAvailabilityEntitlement(val *HighAvailabilityEntitlement) *NullableHighAvailabilityEntitlement {
	return &NullableHighAvailabilityEntitlement{value: val, isSet: true}
}

func (v NullableHighAvailabilityEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHighAvailabilityEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


