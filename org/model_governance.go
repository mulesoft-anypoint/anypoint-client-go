/*
Organization API

Description of the Organization API

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package org

import (
	"encoding/json"
)

// checks if the Governance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Governance{}

// Governance struct for Governance
type Governance struct {
	// API Manager governance enabled
	Enabled *bool `json:"enabled,omitempty"`
}

// NewGovernance instantiates a new Governance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGovernance() *Governance {
	this := Governance{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewGovernanceWithDefaults instantiates a new Governance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGovernanceWithDefaults() *Governance {
	this := Governance{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Governance) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Governance) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Governance) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Governance) SetEnabled(v bool) {
	o.Enabled = &v
}

func (o Governance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Governance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	return toSerialize, nil
}

type NullableGovernance struct {
	value *Governance
	isSet bool
}

func (v NullableGovernance) Get() *Governance {
	return v.value
}

func (v *NullableGovernance) Set(val *Governance) {
	v.value = val
	v.isSet = true
}

func (v NullableGovernance) IsSet() bool {
	return v.isSet
}

func (v *NullableGovernance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGovernance(val *Governance) *NullableGovernance {
	return &NullableGovernance{value: val, isSet: true}
}

func (v NullableGovernance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGovernance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


