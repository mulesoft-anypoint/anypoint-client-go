/*
 * API Manager API
 *
 * API Manager API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiDeleteApimInstanceRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
}


func (r DefaultApiApiDeleteApimInstanceRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteApimInstanceExecute(r)
}

/*
 * DeleteApimInstance Delete a specific API Manager Instance
 * Delete a specific API Manager Instance in a specific environment and organization. Connected Apps require the scope "Manage APIs Configuration".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api manager instance id for a given environment
 * @return DefaultApiApiDeleteApimInstanceRequest
 */
func (a *DefaultApiService) DeleteApimInstance(ctx _context.Context, orgId string, envId string, envApiId string) DefaultApiApiDeleteApimInstanceRequest {
	return DefaultApiApiDeleteApimInstanceRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) DeleteApimInstanceExecute(r DefaultApiApiDeleteApimInstanceRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteApimInstance")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiGetApimInstanceDetailsRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	includeProxyTemplate *bool
	includeValidation *bool
	includeTlsContexts *bool
}

func (r DefaultApiApiGetApimInstanceDetailsRequest) IncludeProxyTemplate(includeProxyTemplate bool) DefaultApiApiGetApimInstanceDetailsRequest {
	r.includeProxyTemplate = &includeProxyTemplate
	return r
}
func (r DefaultApiApiGetApimInstanceDetailsRequest) IncludeValidation(includeValidation bool) DefaultApiApiGetApimInstanceDetailsRequest {
	r.includeValidation = &includeValidation
	return r
}
func (r DefaultApiApiGetApimInstanceDetailsRequest) IncludeTlsContexts(includeTlsContexts bool) DefaultApiApiGetApimInstanceDetailsRequest {
	r.includeTlsContexts = &includeTlsContexts
	return r
}

func (r DefaultApiApiGetApimInstanceDetailsRequest) Execute() (ApimInstanceDetails, *_nethttp.Response, error) {
	return r.ApiService.GetApimInstanceDetailsExecute(r)
}

/*
 * GetApimInstanceDetails Retrieves a specific API Manager Instance
 * Retrieves a specific API Manager Instance for a specific environment and organization. Connected Apps require the scope "View APIs Configuration".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api manager instance id for a given environment
 * @return DefaultApiApiGetApimInstanceDetailsRequest
 */
func (a *DefaultApiService) GetApimInstanceDetails(ctx _context.Context, orgId string, envId string, envApiId string) DefaultApiApiGetApimInstanceDetailsRequest {
	return DefaultApiApiGetApimInstanceDetailsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

/*
 * Execute executes the request
 * @return ApimInstanceDetails
 */
func (a *DefaultApiService) GetApimInstanceDetailsExecute(r DefaultApiApiGetApimInstanceDetailsRequest) (ApimInstanceDetails, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ApimInstanceDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimInstanceDetails")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.includeProxyTemplate != nil {
		localVarQueryParams.Add("includeProxyTemplate", parameterToString(*r.includeProxyTemplate, ""))
	}
	if r.includeValidation != nil {
		localVarQueryParams.Add("includeValidation", parameterToString(*r.includeValidation, ""))
	}
	if r.includeTlsContexts != nil {
		localVarQueryParams.Add("includeTlsContexts", parameterToString(*r.includeTlsContexts, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiGetEnvApimInstancesRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	query *string
	groupId *string
	assetId *string
	assetVersion *string
	instanceLabel *string
	productVersion *string
	autodiscoveryInstanceName *string
	filters *[]string
	limit *int32
	offset *int32
	sort *string
	ascending *bool
}

func (r DefaultApiApiGetEnvApimInstancesRequest) Query(query string) DefaultApiApiGetEnvApimInstancesRequest {
	r.query = &query
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) GroupId(groupId string) DefaultApiApiGetEnvApimInstancesRequest {
	r.groupId = &groupId
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) AssetId(assetId string) DefaultApiApiGetEnvApimInstancesRequest {
	r.assetId = &assetId
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) AssetVersion(assetVersion string) DefaultApiApiGetEnvApimInstancesRequest {
	r.assetVersion = &assetVersion
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) InstanceLabel(instanceLabel string) DefaultApiApiGetEnvApimInstancesRequest {
	r.instanceLabel = &instanceLabel
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) ProductVersion(productVersion string) DefaultApiApiGetEnvApimInstancesRequest {
	r.productVersion = &productVersion
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) AutodiscoveryInstanceName(autodiscoveryInstanceName string) DefaultApiApiGetEnvApimInstancesRequest {
	r.autodiscoveryInstanceName = &autodiscoveryInstanceName
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) Filters(filters []string) DefaultApiApiGetEnvApimInstancesRequest {
	r.filters = &filters
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) Limit(limit int32) DefaultApiApiGetEnvApimInstancesRequest {
	r.limit = &limit
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) Offset(offset int32) DefaultApiApiGetEnvApimInstancesRequest {
	r.offset = &offset
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) Sort(sort string) DefaultApiApiGetEnvApimInstancesRequest {
	r.sort = &sort
	return r
}
func (r DefaultApiApiGetEnvApimInstancesRequest) Ascending(ascending bool) DefaultApiApiGetEnvApimInstancesRequest {
	r.ascending = &ascending
	return r
}

func (r DefaultApiApiGetEnvApimInstancesRequest) Execute() (ApimInstanceCollection, *_nethttp.Response, error) {
	return r.ApiService.GetEnvApimInstancesExecute(r)
}

/*
 * GetEnvApimInstances Retrieves a collection of API Manager Instances
 * Retrieves collection of API Manager Instances that meets the given criteria. Connected Apps require the scope "View APIs Configuration"
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @return DefaultApiApiGetEnvApimInstancesRequest
 */
func (a *DefaultApiService) GetEnvApimInstances(ctx _context.Context, orgId string, envId string) DefaultApiApiGetEnvApimInstancesRequest {
	return DefaultApiApiGetEnvApimInstancesRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
	}
}

/*
 * Execute executes the request
 * @return ApimInstanceCollection
 */
func (a *DefaultApiService) GetEnvApimInstancesExecute(r DefaultApiApiGetEnvApimInstancesRequest) (ApimInstanceCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ApimInstanceCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetEnvApimInstances")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.query != nil {
		localVarQueryParams.Add("query", parameterToString(*r.query, ""))
	}
	if r.groupId != nil {
		localVarQueryParams.Add("groupId", parameterToString(*r.groupId, ""))
	}
	if r.assetId != nil {
		localVarQueryParams.Add("assetId", parameterToString(*r.assetId, ""))
	}
	if r.assetVersion != nil {
		localVarQueryParams.Add("assetVersion", parameterToString(*r.assetVersion, ""))
	}
	if r.instanceLabel != nil {
		localVarQueryParams.Add("instanceLabel", parameterToString(*r.instanceLabel, ""))
	}
	if r.productVersion != nil {
		localVarQueryParams.Add("productVersion", parameterToString(*r.productVersion, ""))
	}
	if r.autodiscoveryInstanceName != nil {
		localVarQueryParams.Add("autodiscoveryInstanceName", parameterToString(*r.autodiscoveryInstanceName, ""))
	}
	if r.filters != nil {
		t := *r.filters
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("filters", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("filters", parameterToString(t, "multi"))
		}
	}
	if r.limit != nil {
		localVarQueryParams.Add("limit", parameterToString(*r.limit, ""))
	}
	if r.offset != nil {
		localVarQueryParams.Add("offset", parameterToString(*r.offset, ""))
	}
	if r.sort != nil {
		localVarQueryParams.Add("sort", parameterToString(*r.sort, ""))
	}
	if r.ascending != nil {
		localVarQueryParams.Add("ascending", parameterToString(*r.ascending, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiPatchApimInstanceRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	force *bool
	updateApisInSamePort *bool
	body *map[string]interface{}
}

func (r DefaultApiApiPatchApimInstanceRequest) Force(force bool) DefaultApiApiPatchApimInstanceRequest {
	r.force = &force
	return r
}
func (r DefaultApiApiPatchApimInstanceRequest) UpdateApisInSamePort(updateApisInSamePort bool) DefaultApiApiPatchApimInstanceRequest {
	r.updateApisInSamePort = &updateApisInSamePort
	return r
}
func (r DefaultApiApiPatchApimInstanceRequest) Body(body map[string]interface{}) DefaultApiApiPatchApimInstanceRequest {
	r.body = &body
	return r
}

func (r DefaultApiApiPatchApimInstanceRequest) Execute() (ApimInstancePatchResponse, *_nethttp.Response, error) {
	return r.ApiService.PatchApimInstanceExecute(r)
}

/*
 * PatchApimInstance Patches a specific API Manager Instance
 * Patches a specific API Manager Instance in a specific environment and organization. Connected Apps require the scope "Manage APIs Configuration".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api manager instance id for a given environment
 * @return DefaultApiApiPatchApimInstanceRequest
 */
func (a *DefaultApiService) PatchApimInstance(ctx _context.Context, orgId string, envId string, envApiId string) DefaultApiApiPatchApimInstanceRequest {
	return DefaultApiApiPatchApimInstanceRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

/*
 * Execute executes the request
 * @return ApimInstancePatchResponse
 */
func (a *DefaultApiService) PatchApimInstanceExecute(r DefaultApiApiPatchApimInstanceRequest) (ApimInstancePatchResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ApimInstancePatchResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchApimInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.force != nil {
		localVarQueryParams.Add("force", parameterToString(*r.force, ""))
	}
	if r.updateApisInSamePort != nil {
		localVarQueryParams.Add("updateApisInSamePort", parameterToString(*r.updateApisInSamePort, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiPostApimInstanceRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	apimInstancePostBody *ApimInstancePostBody
}

func (r DefaultApiApiPostApimInstanceRequest) ApimInstancePostBody(apimInstancePostBody ApimInstancePostBody) DefaultApiApiPostApimInstanceRequest {
	r.apimInstancePostBody = &apimInstancePostBody
	return r
}

func (r DefaultApiApiPostApimInstanceRequest) Execute() (ApimInstancePostResponse, *_nethttp.Response, error) {
	return r.ApiService.PostApimInstanceExecute(r)
}

/*
 * PostApimInstance Creates an API Manager Instance
 * Creates an API Manager Instance in a given environment. Connected Apps require the scope "Manage APIs Configuration".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @return DefaultApiApiPostApimInstanceRequest
 */
func (a *DefaultApiService) PostApimInstance(ctx _context.Context, orgId string, envId string) DefaultApiApiPostApimInstanceRequest {
	return DefaultApiApiPostApimInstanceRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
	}
}

/*
 * Execute executes the request
 * @return ApimInstancePostResponse
 */
func (a *DefaultApiService) PostApimInstanceExecute(r DefaultApiApiPostApimInstanceRequest) (ApimInstancePostResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ApimInstancePostResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostApimInstance")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.apimInstancePostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
