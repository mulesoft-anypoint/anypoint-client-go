/*
Private Space TLS Context API

Description of the Private Space TLS Context API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package private_space_tlscontext

import (
	"encoding/json"
	"fmt"
)

// TlsContextPostBodyTlsConfigKeyStore - struct for TlsContextPostBodyTlsConfigKeyStore
type TlsContextPostBodyTlsConfigKeyStore struct {
	TlsContextPostBodyKeyStoreJKS *TlsContextPostBodyKeyStoreJKS
	TlsContextPostBodyKeyStorePEM *TlsContextPostBodyKeyStorePEM
}

// TlsContextPostBodyKeyStoreJKSAsTlsContextPostBodyTlsConfigKeyStore is a convenience function that returns TlsContextPostBodyKeyStoreJKS wrapped in TlsContextPostBodyTlsConfigKeyStore
func TlsContextPostBodyKeyStoreJKSAsTlsContextPostBodyTlsConfigKeyStore(v *TlsContextPostBodyKeyStoreJKS) TlsContextPostBodyTlsConfigKeyStore {
	return TlsContextPostBodyTlsConfigKeyStore{
		TlsContextPostBodyKeyStoreJKS: v,
	}
}

// TlsContextPostBodyKeyStorePEMAsTlsContextPostBodyTlsConfigKeyStore is a convenience function that returns TlsContextPostBodyKeyStorePEM wrapped in TlsContextPostBodyTlsConfigKeyStore
func TlsContextPostBodyKeyStorePEMAsTlsContextPostBodyTlsConfigKeyStore(v *TlsContextPostBodyKeyStorePEM) TlsContextPostBodyTlsConfigKeyStore {
	return TlsContextPostBodyTlsConfigKeyStore{
		TlsContextPostBodyKeyStorePEM: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TlsContextPostBodyTlsConfigKeyStore) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TlsContextPostBodyKeyStoreJKS
	err = newStrictDecoder(data).Decode(&dst.TlsContextPostBodyKeyStoreJKS)
	if err == nil {
		jsonTlsContextPostBodyKeyStoreJKS, _ := json.Marshal(dst.TlsContextPostBodyKeyStoreJKS)
		if string(jsonTlsContextPostBodyKeyStoreJKS) == "{}" { // empty struct
			dst.TlsContextPostBodyKeyStoreJKS = nil
		} else {
			match++
		}
	} else {
		dst.TlsContextPostBodyKeyStoreJKS = nil
	}

	// try to unmarshal data into TlsContextPostBodyKeyStorePEM
	err = newStrictDecoder(data).Decode(&dst.TlsContextPostBodyKeyStorePEM)
	if err == nil {
		jsonTlsContextPostBodyKeyStorePEM, _ := json.Marshal(dst.TlsContextPostBodyKeyStorePEM)
		if string(jsonTlsContextPostBodyKeyStorePEM) == "{}" { // empty struct
			dst.TlsContextPostBodyKeyStorePEM = nil
		} else {
			match++
		}
	} else {
		dst.TlsContextPostBodyKeyStorePEM = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TlsContextPostBodyKeyStoreJKS = nil
		dst.TlsContextPostBodyKeyStorePEM = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TlsContextPostBodyTlsConfigKeyStore)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TlsContextPostBodyTlsConfigKeyStore)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TlsContextPostBodyTlsConfigKeyStore) MarshalJSON() ([]byte, error) {
	if src.TlsContextPostBodyKeyStoreJKS != nil {
		return json.Marshal(&src.TlsContextPostBodyKeyStoreJKS)
	}

	if src.TlsContextPostBodyKeyStorePEM != nil {
		return json.Marshal(&src.TlsContextPostBodyKeyStorePEM)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TlsContextPostBodyTlsConfigKeyStore) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TlsContextPostBodyKeyStoreJKS != nil {
		return obj.TlsContextPostBodyKeyStoreJKS
	}

	if obj.TlsContextPostBodyKeyStorePEM != nil {
		return obj.TlsContextPostBodyKeyStorePEM
	}

	// all schemas are nil
	return nil
}

type NullableTlsContextPostBodyTlsConfigKeyStore struct {
	value *TlsContextPostBodyTlsConfigKeyStore
	isSet bool
}

func (v NullableTlsContextPostBodyTlsConfigKeyStore) Get() *TlsContextPostBodyTlsConfigKeyStore {
	return v.value
}

func (v *NullableTlsContextPostBodyTlsConfigKeyStore) Set(val *TlsContextPostBodyTlsConfigKeyStore) {
	v.value = val
	v.isSet = true
}

func (v NullableTlsContextPostBodyTlsConfigKeyStore) IsSet() bool {
	return v.isSet
}

func (v *NullableTlsContextPostBodyTlsConfigKeyStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTlsContextPostBodyTlsConfigKeyStore(val *TlsContextPostBodyTlsConfigKeyStore) *NullableTlsContextPostBodyTlsConfigKeyStore {
	return &NullableTlsContextPostBodyTlsConfigKeyStore{value: val, isSet: true}
}

func (v NullableTlsContextPostBodyTlsConfigKeyStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTlsContextPostBodyTlsConfigKeyStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


