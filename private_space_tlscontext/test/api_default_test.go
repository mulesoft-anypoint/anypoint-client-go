/*
Private Space TLS Context API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package private_space_tlscontext

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/private_space_tlscontext"
)

func Test_private_space_tlscontext_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService CreateTlsContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.CreateTlsContext(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteTlsContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tlsContextId string

		httpRes, err := apiClient.DefaultApi.DeleteTlsContext(context.Background(), orgId, privateSpaceId, tlsContextId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetTlsContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tlsContextId string

		resp, httpRes, err := apiClient.DefaultApi.GetTlsContext(context.Background(), orgId, privateSpaceId, tlsContextId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetTlsContexts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string

		resp, httpRes, err := apiClient.DefaultApi.GetTlsContexts(context.Background(), orgId, privateSpaceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateTlsContext", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var privateSpaceId string
		var tlsContextId string

		resp, httpRes, err := apiClient.DefaultApi.UpdateTlsContext(context.Background(), orgId, privateSpaceId, tlsContextId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
