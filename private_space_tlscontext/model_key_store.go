/*
Private Space TLS Context API

Description of the Private Space TLS Context API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package private_space_tlscontext

import (
	"encoding/json"
)

// checks if the KeyStore type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeyStore{}

// KeyStore struct for KeyStore
type KeyStore struct {
	Type *string `json:"type,omitempty"`
	Cn *string `json:"cn,omitempty"`
	San []string `json:"san,omitempty"`
	FileName *string `json:"fileName,omitempty"`
	KeyFileName *string `json:"keyFileName,omitempty"`
	CapathFileName *string `json:"capathFileName,omitempty"`
	ExpirationDate *string `json:"expirationDate,omitempty"`
}

// NewKeyStore instantiates a new KeyStore object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeyStore() *KeyStore {
	this := KeyStore{}
	return &this
}

// NewKeyStoreWithDefaults instantiates a new KeyStore object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeyStoreWithDefaults() *KeyStore {
	this := KeyStore{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *KeyStore) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStore) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *KeyStore) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *KeyStore) SetType(v string) {
	o.Type = &v
}

// GetCn returns the Cn field value if set, zero value otherwise.
func (o *KeyStore) GetCn() string {
	if o == nil || IsNil(o.Cn) {
		var ret string
		return ret
	}
	return *o.Cn
}

// GetCnOk returns a tuple with the Cn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStore) GetCnOk() (*string, bool) {
	if o == nil || IsNil(o.Cn) {
		return nil, false
	}
	return o.Cn, true
}

// HasCn returns a boolean if a field has been set.
func (o *KeyStore) HasCn() bool {
	if o != nil && !IsNil(o.Cn) {
		return true
	}

	return false
}

// SetCn gets a reference to the given string and assigns it to the Cn field.
func (o *KeyStore) SetCn(v string) {
	o.Cn = &v
}

// GetSan returns the San field value if set, zero value otherwise.
func (o *KeyStore) GetSan() []string {
	if o == nil || IsNil(o.San) {
		var ret []string
		return ret
	}
	return o.San
}

// GetSanOk returns a tuple with the San field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStore) GetSanOk() ([]string, bool) {
	if o == nil || IsNil(o.San) {
		return nil, false
	}
	return o.San, true
}

// HasSan returns a boolean if a field has been set.
func (o *KeyStore) HasSan() bool {
	if o != nil && !IsNil(o.San) {
		return true
	}

	return false
}

// SetSan gets a reference to the given []string and assigns it to the San field.
func (o *KeyStore) SetSan(v []string) {
	o.San = v
}

// GetFileName returns the FileName field value if set, zero value otherwise.
func (o *KeyStore) GetFileName() string {
	if o == nil || IsNil(o.FileName) {
		var ret string
		return ret
	}
	return *o.FileName
}

// GetFileNameOk returns a tuple with the FileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStore) GetFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.FileName) {
		return nil, false
	}
	return o.FileName, true
}

// HasFileName returns a boolean if a field has been set.
func (o *KeyStore) HasFileName() bool {
	if o != nil && !IsNil(o.FileName) {
		return true
	}

	return false
}

// SetFileName gets a reference to the given string and assigns it to the FileName field.
func (o *KeyStore) SetFileName(v string) {
	o.FileName = &v
}

// GetKeyFileName returns the KeyFileName field value if set, zero value otherwise.
func (o *KeyStore) GetKeyFileName() string {
	if o == nil || IsNil(o.KeyFileName) {
		var ret string
		return ret
	}
	return *o.KeyFileName
}

// GetKeyFileNameOk returns a tuple with the KeyFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStore) GetKeyFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.KeyFileName) {
		return nil, false
	}
	return o.KeyFileName, true
}

// HasKeyFileName returns a boolean if a field has been set.
func (o *KeyStore) HasKeyFileName() bool {
	if o != nil && !IsNil(o.KeyFileName) {
		return true
	}

	return false
}

// SetKeyFileName gets a reference to the given string and assigns it to the KeyFileName field.
func (o *KeyStore) SetKeyFileName(v string) {
	o.KeyFileName = &v
}

// GetCapathFileName returns the CapathFileName field value if set, zero value otherwise.
func (o *KeyStore) GetCapathFileName() string {
	if o == nil || IsNil(o.CapathFileName) {
		var ret string
		return ret
	}
	return *o.CapathFileName
}

// GetCapathFileNameOk returns a tuple with the CapathFileName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStore) GetCapathFileNameOk() (*string, bool) {
	if o == nil || IsNil(o.CapathFileName) {
		return nil, false
	}
	return o.CapathFileName, true
}

// HasCapathFileName returns a boolean if a field has been set.
func (o *KeyStore) HasCapathFileName() bool {
	if o != nil && !IsNil(o.CapathFileName) {
		return true
	}

	return false
}

// SetCapathFileName gets a reference to the given string and assigns it to the CapathFileName field.
func (o *KeyStore) SetCapathFileName(v string) {
	o.CapathFileName = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *KeyStore) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeyStore) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *KeyStore) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *KeyStore) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

func (o KeyStore) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeyStore) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Cn) {
		toSerialize["cn"] = o.Cn
	}
	if !IsNil(o.San) {
		toSerialize["san"] = o.San
	}
	if !IsNil(o.FileName) {
		toSerialize["fileName"] = o.FileName
	}
	if !IsNil(o.KeyFileName) {
		toSerialize["keyFileName"] = o.KeyFileName
	}
	if !IsNil(o.CapathFileName) {
		toSerialize["capathFileName"] = o.CapathFileName
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	return toSerialize, nil
}

type NullableKeyStore struct {
	value *KeyStore
	isSet bool
}

func (v NullableKeyStore) Get() *KeyStore {
	return v.value
}

func (v *NullableKeyStore) Set(val *KeyStore) {
	v.value = val
	v.isSet = true
}

func (v NullableKeyStore) IsSet() bool {
	return v.isSet
}

func (v *NullableKeyStore) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeyStore(val *KeyStore) *NullableKeyStore {
	return &NullableKeyStore{value: val, isSet: true}
}

func (v NullableKeyStore) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeyStore) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


