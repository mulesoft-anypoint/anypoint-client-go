openapi: 3.0.0
info:
  description: Description of the Team API
  title: Team API
  version: 1.1.0
servers:
- description: Anypoint Cloudhub
  url: https://anypoint.mulesoft.com/accounts/api/
- description: Anypoint Cloudhub EU
  url: https://eu1.anypoint.mulesoft.com/accounts/api/
- description: Anypoint Cloudhub GOV
  url: https://gov.anypoint.mulesoft.com/accounts/api/
security:
- bearerAuth: []
paths:
  /organizations/{orgId}/teams:
    get:
      description: Returns all teams for a given org
      operationId: getTeams
      parameters:
      - description: The ID of the organization in GUID format
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: team_id that must appear in the team's ancestor_team_ids.
        explode: true
        in: query
        name: ancestor_team_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: team_id of the immediate parent of the team to return.
        explode: true
        in: query
        name: parent_team_id
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - description: id of the team to return.
        explode: true
        in: query
        name: team_id
        required: false
        schema:
          type: string
        style: form
      - description: return only teams that are of this type
        explode: true
        in: query
        name: team_type
        required: false
        schema:
          type: string
        style: form
      - description: A search string to use for case-insensitive partial matches on
          team name
        explode: true
        in: query
        name: search
        required: false
        schema:
          type: string
        style: form
      - description: Maximum number of rolegroups to retrieve per request.
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      - description: The number of records to omit from the response.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: integer
        style: form
      - description: The field to sort on. default team_name
        explode: true
        in: query
        name: sort
        required: false
        schema:
          enum:
          - team_name
          - created_at
          - team_id
          type: string
        style: form
      - description: Whether to sort ascending or descending. Default true
        explode: true
        in: query
        name: ascending
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "401":
          description: Access token is missing or invalid
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorsResponse'
          description: Bad request response
        "404":
          description: resource not found
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamCollection'
          description: Success response
      summary: Read all Teams for a given org
    post:
      description: Creates a new team
      operationId: createTeam
      parameters:
      - description: The ID of the organization in GUID format
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPostBody'
      responses:
        "401":
          description: Access token is missing or invalid
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Success response
      summary: Create a new team
  /organizations/{orgId}/teams/{teamId}:
    delete:
      description: Deletes a team by id
      operationId: deleteTeam
      parameters:
      - description: The ID of the organization in GUID format
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the team in GUID format
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "401":
          description: Access token is missing or invalid
        "204":
          description: Success response
      summary: Delete a team by id
    get:
      description: Retrieves a team by id
      operationId: getTeam
      parameters:
      - description: The ID of the organization in GUID format
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the team in GUID format
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "401":
          description: Access token is missing or invalid
        "404":
          description: resource not found
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Success response
      summary: Read a team by id
    patch:
      description: Updates a team by id
      operationId: updateTeam
      parameters:
      - description: The ID of the organization in GUID format
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the team in GUID format
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPatchBody'
      responses:
        "401":
          description: Access token is missing or invalid
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: Success response
      summary: Update a team by id
  /organizations/{orgId}/teams/{teamId}/parent:
    put:
      description: Moves a team (along with its nested teams) from one parent team
        to another
      operationId: moveTeam
      parameters:
      - description: The ID of the organization in GUID format
        explode: false
        in: path
        name: orgId
        required: true
        schema:
          type: string
        style: simple
      - description: The ID of the team in GUID format
        explode: false
        in: path
        name: teamId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamPutBody'
      responses:
        "401":
          description: Access token is missing or invalid
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutTeamResponse'
          description: Success response
      summary: Move a team
components:
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
    BadRequestError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorsResponse'
      description: Bad request response
    NotFoundError:
      description: resource not found
    SuccessListTeams:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TeamCollection'
      description: Success response
    SuccessGetTeam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Team'
      description: Success response
    SuccessPostTeam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Team'
      description: Success response
    SuccessPatchTeam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Team'
      description: Success response
    SuccessPutTeam:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PutTeamResponse'
      description: Success response
    SuccessDeleteTeam:
      description: Success response
  schemas:
    ErrorsResponse:
      properties:
        errors:
          items:
            $ref: '#/components/schemas/ErrorsResponse_errors_inner'
          type: array
      title: errorsResponse
      type: object
    PutTeamResponse:
      allOf:
      - $ref: '#/components/schemas/Team'
      - $ref: '#/components/schemas/previousTeamState'
    TeamPostBody:
      example:
        parent_team_id: parent_team_id
        team_type: internal
        team_name: team_name
      properties:
        parent_team_id:
          title: parentTeamId
          type: string
        team_name:
          title: teamName
          type: string
        team_type:
          default: internal
          title: teamType
          type: string
      title: TeamPostBody
      type: object
    TeamPatchBody:
      example:
        team_type: internal
        team_name: team_name
      properties:
        team_name:
          title: teamName
          type: string
        team_type:
          default: internal
          title: teamType
          type: string
      title: TeamPatchBody
      type: object
    TeamPutBody:
      example:
        parent_team_id: parent_team_id
      properties:
        parent_team_id:
          title: parentTeamId
          type: string
      title: TeamPutBody
      type: object
    Team:
      example:
        ancestor_team_ids:
        - ancestor_team_ids
        - ancestor_team_ids
        updated_at: updated_at
        org_id: org_id
        created_at: created_at
        team_type: team_type
        team_id: team_id
        team_name: team_name
      properties:
        org_id:
          title: orgId
          type: string
        team_id:
          title: teamId
          type: string
        team_name:
          title: teamName
          type: string
        team_type:
          title: teamType
          type: string
        ancestor_team_ids:
          items:
            type: string
          title: ancestorTeamIds
          type: array
        created_at:
          title: createdAt
          type: string
        updated_at:
          title: updatedAt
          type: string
      title: Team
      type: object
    TeamCollection:
      example:
        total: 0
        data:
        - ancestor_team_ids:
          - ancestor_team_ids
          - ancestor_team_ids
          updated_at: updated_at
          org_id: org_id
          created_at: created_at
          team_type: team_type
          team_id: team_id
          team_name: team_name
        - ancestor_team_ids:
          - ancestor_team_ids
          - ancestor_team_ids
          updated_at: updated_at
          org_id: org_id
          created_at: created_at
          team_type: team_type
          team_id: team_id
          team_name: team_name
      properties:
        data:
          items:
            $ref: '#/components/schemas/Team'
          title: data
          type: array
        total:
          title: total
          type: integer
      title: TeamCollection
      type: object
    ErrorsResponse_errors_inner:
      properties:
        type:
          title: type
          type: string
        dataPath:
          title: dataPath
          type: string
        keyword:
          title: keyword
          type: string
        schema:
          title: schema
          type: string
        data:
          title: data
          type: string
        message:
          title: message
          type: string
      type: object
    previousTeamState:
      properties:
        previous_ancestor_team_ids:
          items:
            type: string
          title: previousAncestorTeamIds
          type: array
      title: previousTeamState
      type: object
      example: null
  securitySchemes:
    bearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
