/*
 * API Manager Upstream API
 *
 * API Manager Upstream API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_upstream

import (
	"bytes"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// DefaultApiService DefaultApi service
type DefaultApiService service

type DefaultApiApiDeleteApimInstanceUpstreamRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamId string
}


func (r DefaultApiApiDeleteApimInstanceUpstreamRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.DeleteApimInstanceUpstreamExecute(r)
}

/*
 * DeleteApimInstanceUpstream Delete a specific Upstream of the given API Manager Instance
 * Delete a specific Upstream in a API Manager Instance  in a specific environment and organization. Connected Apps require the scope "Manage APIs Configuration".
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api id specific to a given environment
 * @param upstreamId The upstream id
 * @return DefaultApiApiDeleteApimInstanceUpstreamRequest
 */
func (a *DefaultApiService) DeleteApimInstanceUpstream(ctx _context.Context, orgId string, envId string, envApiId string, upstreamId string) DefaultApiApiDeleteApimInstanceUpstreamRequest {
	return DefaultApiApiDeleteApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
		upstreamId: upstreamId,
	}
}

/*
 * Execute executes the request
 */
func (a *DefaultApiService) DeleteApimInstanceUpstreamExecute(r DefaultApiApiDeleteApimInstanceUpstreamRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.DeleteApimInstanceUpstream")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams/{upstreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upstreamId"+"}", _neturl.PathEscape(parameterToString(r.upstreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarHTTPResponse, newErr
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type DefaultApiApiGetApimInstanceUpstreamRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamId string
}


func (r DefaultApiApiGetApimInstanceUpstreamRequest) Execute() (UpstreamDetails, *_nethttp.Response, error) {
	return r.ApiService.GetApimInstanceUpstreamExecute(r)
}

/*
 * GetApimInstanceUpstream Retrieve a specific upstream for a given API Manager instance
 * Retrieve a specific upstream for a given API Manager instance in a given environment. Connected App requires the scope "View APIs Configuration"
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api id specific to a given environment
 * @param upstreamId The upstream id
 * @return DefaultApiApiGetApimInstanceUpstreamRequest
 */
func (a *DefaultApiService) GetApimInstanceUpstream(ctx _context.Context, orgId string, envId string, envApiId string, upstreamId string) DefaultApiApiGetApimInstanceUpstreamRequest {
	return DefaultApiApiGetApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
		upstreamId: upstreamId,
	}
}

/*
 * Execute executes the request
 * @return UpstreamDetails
 */
func (a *DefaultApiService) GetApimInstanceUpstreamExecute(r DefaultApiApiGetApimInstanceUpstreamRequest) (UpstreamDetails, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpstreamDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimInstanceUpstream")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams/{upstreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upstreamId"+"}", _neturl.PathEscape(parameterToString(r.upstreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiGetApimInstanceUpstreamsRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
}


func (r DefaultApiApiGetApimInstanceUpstreamsRequest) Execute() (UpstreamCollection, *_nethttp.Response, error) {
	return r.ApiService.GetApimInstanceUpstreamsExecute(r)
}

/*
 * GetApimInstanceUpstreams Retrieve all upstreams of a given API Manager instance
 * Retrieves all upstreams for a given API Manager instance in a given environment. Connected App requires the scope "View APIs Configuration"
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api id specific to a given environment
 * @return DefaultApiApiGetApimInstanceUpstreamsRequest
 */
func (a *DefaultApiService) GetApimInstanceUpstreams(ctx _context.Context, orgId string, envId string, envApiId string) DefaultApiApiGetApimInstanceUpstreamsRequest {
	return DefaultApiApiGetApimInstanceUpstreamsRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

/*
 * Execute executes the request
 * @return UpstreamCollection
 */
func (a *DefaultApiService) GetApimInstanceUpstreamsExecute(r DefaultApiApiGetApimInstanceUpstreamsRequest) (UpstreamCollection, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpstreamCollection
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.GetApimInstanceUpstreams")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v InlineResponse404
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiPatchApimInstanceUpstreamRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamId string
	upstreamPatchBody *UpstreamPatchBody
}

func (r DefaultApiApiPatchApimInstanceUpstreamRequest) UpstreamPatchBody(upstreamPatchBody UpstreamPatchBody) DefaultApiApiPatchApimInstanceUpstreamRequest {
	r.upstreamPatchBody = &upstreamPatchBody
	return r
}

func (r DefaultApiApiPatchApimInstanceUpstreamRequest) Execute() (Upstream, *_nethttp.Response, error) {
	return r.ApiService.PatchApimInstanceUpstreamExecute(r)
}

/*
 * PatchApimInstanceUpstream Update a specific upstream in a given API Manager instance
 * Update a specific upstream in a given API Manager instance in a given environment. Connected App requires the scope "Manage APIs Configuration"
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api id specific to a given environment
 * @param upstreamId The upstream id
 * @return DefaultApiApiPatchApimInstanceUpstreamRequest
 */
func (a *DefaultApiService) PatchApimInstanceUpstream(ctx _context.Context, orgId string, envId string, envApiId string, upstreamId string) DefaultApiApiPatchApimInstanceUpstreamRequest {
	return DefaultApiApiPatchApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
		upstreamId: upstreamId,
	}
}

/*
 * Execute executes the request
 * @return Upstream
 */
func (a *DefaultApiService) PatchApimInstanceUpstreamExecute(r DefaultApiApiPatchApimInstanceUpstreamRequest) (Upstream, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  Upstream
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PatchApimInstanceUpstream")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams/{upstreamId}"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"upstreamId"+"}", _neturl.PathEscape(parameterToString(r.upstreamId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPatchBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type DefaultApiApiPostApimInstanceUpstreamRequest struct {
	ctx _context.Context
	ApiService *DefaultApiService
	orgId string
	envId string
	envApiId string
	upstreamPostBody *UpstreamPostBody
}

func (r DefaultApiApiPostApimInstanceUpstreamRequest) UpstreamPostBody(upstreamPostBody UpstreamPostBody) DefaultApiApiPostApimInstanceUpstreamRequest {
	r.upstreamPostBody = &upstreamPostBody
	return r
}

func (r DefaultApiApiPostApimInstanceUpstreamRequest) Execute() (UpstreamDetails, *_nethttp.Response, error) {
	return r.ApiService.PostApimInstanceUpstreamExecute(r)
}

/*
 * PostApimInstanceUpstream Creates an upstream for a given API Manager instance
 * Creates an upstream for a given API Manager instance in a given environment. Connected App requires the scope "Manage APIs Configuration"
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param orgId The organization Id
 * @param envId The environment id
 * @param envApiId The api id specific to a given environment
 * @return DefaultApiApiPostApimInstanceUpstreamRequest
 */
func (a *DefaultApiService) PostApimInstanceUpstream(ctx _context.Context, orgId string, envId string, envApiId string) DefaultApiApiPostApimInstanceUpstreamRequest {
	return DefaultApiApiPostApimInstanceUpstreamRequest{
		ApiService: a,
		ctx: ctx,
		orgId: orgId,
		envId: envId,
		envApiId: envApiId,
	}
}

/*
 * Execute executes the request
 * @return UpstreamDetails
 */
func (a *DefaultApiService) PostApimInstanceUpstreamExecute(r DefaultApiApiPostApimInstanceUpstreamRequest) (UpstreamDetails, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  UpstreamDetails
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.PostApimInstanceUpstream")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/organizations/{orgId}/environments/{envId}/apis/{envApiId}/upstreams"
	localVarPath = strings.Replace(localVarPath, "{"+"orgId"+"}", _neturl.PathEscape(parameterToString(r.orgId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envId"+"}", _neturl.PathEscape(parameterToString(r.envId, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"envApiId"+"}", _neturl.PathEscape(parameterToString(r.envApiId, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.upstreamPostBody
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorsResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
