/*
 * API Manager Upstream API
 *
 * API Manager Upstream API
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_upstream

import (
	"encoding/json"
)

// UpstreamCollection struct for UpstreamCollection
type UpstreamCollection struct {
	Total *int32 `json:"total,omitempty"`
	Upstreams *[]UpstreamDetails `json:"upstreams,omitempty"`
}

// NewUpstreamCollection instantiates a new UpstreamCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpstreamCollection() *UpstreamCollection {
	this := UpstreamCollection{}
	return &this
}

// NewUpstreamCollectionWithDefaults instantiates a new UpstreamCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpstreamCollectionWithDefaults() *UpstreamCollection {
	this := UpstreamCollection{}
	return &this
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *UpstreamCollection) GetTotal() int32 {
	if o == nil || o.Total == nil {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamCollection) GetTotalOk() (*int32, bool) {
	if o == nil || o.Total == nil {
		return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *UpstreamCollection) HasTotal() bool {
	if o != nil && o.Total != nil {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *UpstreamCollection) SetTotal(v int32) {
	o.Total = &v
}

// GetUpstreams returns the Upstreams field value if set, zero value otherwise.
func (o *UpstreamCollection) GetUpstreams() []UpstreamDetails {
	if o == nil || o.Upstreams == nil {
		var ret []UpstreamDetails
		return ret
	}
	return *o.Upstreams
}

// GetUpstreamsOk returns a tuple with the Upstreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpstreamCollection) GetUpstreamsOk() (*[]UpstreamDetails, bool) {
	if o == nil || o.Upstreams == nil {
		return nil, false
	}
	return o.Upstreams, true
}

// HasUpstreams returns a boolean if a field has been set.
func (o *UpstreamCollection) HasUpstreams() bool {
	if o != nil && o.Upstreams != nil {
		return true
	}

	return false
}

// SetUpstreams gets a reference to the given []UpstreamDetails and assigns it to the Upstreams field.
func (o *UpstreamCollection) SetUpstreams(v []UpstreamDetails) {
	o.Upstreams = &v
}

func (o UpstreamCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Total != nil {
		toSerialize["total"] = o.Total
	}
	if o.Upstreams != nil {
		toSerialize["upstreams"] = o.Upstreams
	}
	return json.Marshal(toSerialize)
}

type NullableUpstreamCollection struct {
	value *UpstreamCollection
	isSet bool
}

func (v NullableUpstreamCollection) Get() *UpstreamCollection {
	return v.value
}

func (v *NullableUpstreamCollection) Set(val *UpstreamCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableUpstreamCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableUpstreamCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpstreamCollection(val *UpstreamCollection) *NullableUpstreamCollection {
	return &NullableUpstreamCollection{value: val, isSet: true}
}

func (v NullableUpstreamCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpstreamCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


