/*
Application Manager v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the UpdateDeploymentBodyJSON type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDeploymentBodyJSON{}

// UpdateDeploymentBodyJSON Application deployment body to update a deployment from exchange.
type UpdateDeploymentBodyJSON struct {
	ApplicationInfo *NewDeploymentStruct `json:"applicationInfo,omitempty"`
	ApplicationSource *ExchangeApplicationSource `json:"applicationSource,omitempty"`
}

// NewUpdateDeploymentBodyJSON instantiates a new UpdateDeploymentBodyJSON object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDeploymentBodyJSON() *UpdateDeploymentBodyJSON {
	this := UpdateDeploymentBodyJSON{}
	return &this
}

// NewUpdateDeploymentBodyJSONWithDefaults instantiates a new UpdateDeploymentBodyJSON object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDeploymentBodyJSONWithDefaults() *UpdateDeploymentBodyJSON {
	this := UpdateDeploymentBodyJSON{}
	return &this
}

// GetApplicationInfo returns the ApplicationInfo field value if set, zero value otherwise.
func (o *UpdateDeploymentBodyJSON) GetApplicationInfo() NewDeploymentStruct {
	if o == nil || IsNil(o.ApplicationInfo) {
		var ret NewDeploymentStruct
		return ret
	}
	return *o.ApplicationInfo
}

// GetApplicationInfoOk returns a tuple with the ApplicationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDeploymentBodyJSON) GetApplicationInfoOk() (*NewDeploymentStruct, bool) {
	if o == nil || IsNil(o.ApplicationInfo) {
		return nil, false
	}
	return o.ApplicationInfo, true
}

// HasApplicationInfo returns a boolean if a field has been set.
func (o *UpdateDeploymentBodyJSON) HasApplicationInfo() bool {
	if o != nil && !IsNil(o.ApplicationInfo) {
		return true
	}

	return false
}

// SetApplicationInfo gets a reference to the given NewDeploymentStruct and assigns it to the ApplicationInfo field.
func (o *UpdateDeploymentBodyJSON) SetApplicationInfo(v NewDeploymentStruct) {
	o.ApplicationInfo = &v
}

// GetApplicationSource returns the ApplicationSource field value if set, zero value otherwise.
func (o *UpdateDeploymentBodyJSON) GetApplicationSource() ExchangeApplicationSource {
	if o == nil || IsNil(o.ApplicationSource) {
		var ret ExchangeApplicationSource
		return ret
	}
	return *o.ApplicationSource
}

// GetApplicationSourceOk returns a tuple with the ApplicationSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDeploymentBodyJSON) GetApplicationSourceOk() (*ExchangeApplicationSource, bool) {
	if o == nil || IsNil(o.ApplicationSource) {
		return nil, false
	}
	return o.ApplicationSource, true
}

// HasApplicationSource returns a boolean if a field has been set.
func (o *UpdateDeploymentBodyJSON) HasApplicationSource() bool {
	if o != nil && !IsNil(o.ApplicationSource) {
		return true
	}

	return false
}

// SetApplicationSource gets a reference to the given ExchangeApplicationSource and assigns it to the ApplicationSource field.
func (o *UpdateDeploymentBodyJSON) SetApplicationSource(v ExchangeApplicationSource) {
	o.ApplicationSource = &v
}

func (o UpdateDeploymentBodyJSON) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDeploymentBodyJSON) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationInfo) {
		toSerialize["applicationInfo"] = o.ApplicationInfo
	}
	if !IsNil(o.ApplicationSource) {
		toSerialize["applicationSource"] = o.ApplicationSource
	}
	return toSerialize, nil
}

type NullableUpdateDeploymentBodyJSON struct {
	value *UpdateDeploymentBodyJSON
	isSet bool
}

func (v NullableUpdateDeploymentBodyJSON) Get() *UpdateDeploymentBodyJSON {
	return v.value
}

func (v *NullableUpdateDeploymentBodyJSON) Set(val *UpdateDeploymentBodyJSON) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDeploymentBodyJSON) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDeploymentBodyJSON) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDeploymentBodyJSON(val *UpdateDeploymentBodyJSON) *NullableUpdateDeploymentBodyJSON {
	return &NullableUpdateDeploymentBodyJSON{value: val, isSet: true}
}

func (v NullableUpdateDeploymentBodyJSON) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDeploymentBodyJSON) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


