/*
Application Manager v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the ExchangeApplicationSource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeApplicationSource{}

// ExchangeApplicationSource The source of the application in Exchange.
type ExchangeApplicationSource struct {
	// The source of the application in Exchange.
	Source *string `json:"source,omitempty"`
	// The group ID of the application in Exchange.
	GroupId *string `json:"groupId,omitempty"`
	// The artifact ID of the application in Exchange.
	ArtifactId *string `json:"artifactId,omitempty"`
	// The version of the application in Exchange.
	Version *string `json:"version,omitempty"`
	// The organization ID of the application in Exchange.
	OrganizationId *string `json:"organizationId,omitempty"`
}

// NewExchangeApplicationSource instantiates a new ExchangeApplicationSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeApplicationSource() *ExchangeApplicationSource {
	this := ExchangeApplicationSource{}
	return &this
}

// NewExchangeApplicationSourceWithDefaults instantiates a new ExchangeApplicationSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeApplicationSourceWithDefaults() *ExchangeApplicationSource {
	this := ExchangeApplicationSource{}
	return &this
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *ExchangeApplicationSource) GetSource() string {
	if o == nil || IsNil(o.Source) {
		var ret string
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeApplicationSource) GetSourceOk() (*string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *ExchangeApplicationSource) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given string and assigns it to the Source field.
func (o *ExchangeApplicationSource) SetSource(v string) {
	o.Source = &v
}

// GetGroupId returns the GroupId field value if set, zero value otherwise.
func (o *ExchangeApplicationSource) GetGroupId() string {
	if o == nil || IsNil(o.GroupId) {
		var ret string
		return ret
	}
	return *o.GroupId
}

// GetGroupIdOk returns a tuple with the GroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeApplicationSource) GetGroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.GroupId) {
		return nil, false
	}
	return o.GroupId, true
}

// HasGroupId returns a boolean if a field has been set.
func (o *ExchangeApplicationSource) HasGroupId() bool {
	if o != nil && !IsNil(o.GroupId) {
		return true
	}

	return false
}

// SetGroupId gets a reference to the given string and assigns it to the GroupId field.
func (o *ExchangeApplicationSource) SetGroupId(v string) {
	o.GroupId = &v
}

// GetArtifactId returns the ArtifactId field value if set, zero value otherwise.
func (o *ExchangeApplicationSource) GetArtifactId() string {
	if o == nil || IsNil(o.ArtifactId) {
		var ret string
		return ret
	}
	return *o.ArtifactId
}

// GetArtifactIdOk returns a tuple with the ArtifactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeApplicationSource) GetArtifactIdOk() (*string, bool) {
	if o == nil || IsNil(o.ArtifactId) {
		return nil, false
	}
	return o.ArtifactId, true
}

// HasArtifactId returns a boolean if a field has been set.
func (o *ExchangeApplicationSource) HasArtifactId() bool {
	if o != nil && !IsNil(o.ArtifactId) {
		return true
	}

	return false
}

// SetArtifactId gets a reference to the given string and assigns it to the ArtifactId field.
func (o *ExchangeApplicationSource) SetArtifactId(v string) {
	o.ArtifactId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ExchangeApplicationSource) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeApplicationSource) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ExchangeApplicationSource) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ExchangeApplicationSource) SetVersion(v string) {
	o.Version = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ExchangeApplicationSource) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeApplicationSource) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ExchangeApplicationSource) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ExchangeApplicationSource) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

func (o ExchangeApplicationSource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeApplicationSource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.GroupId) {
		toSerialize["groupId"] = o.GroupId
	}
	if !IsNil(o.ArtifactId) {
		toSerialize["artifactId"] = o.ArtifactId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	return toSerialize, nil
}

type NullableExchangeApplicationSource struct {
	value *ExchangeApplicationSource
	isSet bool
}

func (v NullableExchangeApplicationSource) Get() *ExchangeApplicationSource {
	return v.value
}

func (v *NullableExchangeApplicationSource) Set(val *ExchangeApplicationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeApplicationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeApplicationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeApplicationSource(val *ExchangeApplicationSource) *NullableExchangeApplicationSource {
	return &NullableExchangeApplicationSource{value: val, isSet: true}
}

func (v NullableExchangeApplicationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeApplicationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


