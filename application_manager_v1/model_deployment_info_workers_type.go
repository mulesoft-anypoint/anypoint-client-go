/*
Deployment v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the DeploymentInfoWorkersType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentInfoWorkersType{}

// DeploymentInfoWorkersType struct for DeploymentInfoWorkersType
type DeploymentInfoWorkersType struct {
	// The size of the worker
	Name *string `json:"name,omitempty"`
}

// NewDeploymentInfoWorkersType instantiates a new DeploymentInfoWorkersType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentInfoWorkersType() *DeploymentInfoWorkersType {
	this := DeploymentInfoWorkersType{}
	return &this
}

// NewDeploymentInfoWorkersTypeWithDefaults instantiates a new DeploymentInfoWorkersType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentInfoWorkersTypeWithDefaults() *DeploymentInfoWorkersType {
	this := DeploymentInfoWorkersType{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *DeploymentInfoWorkersType) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentInfoWorkersType) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *DeploymentInfoWorkersType) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *DeploymentInfoWorkersType) SetName(v string) {
	o.Name = &v
}

func (o DeploymentInfoWorkersType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentInfoWorkersType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableDeploymentInfoWorkersType struct {
	value *DeploymentInfoWorkersType
	isSet bool
}

func (v NullableDeploymentInfoWorkersType) Get() *DeploymentInfoWorkersType {
	return v.value
}

func (v *NullableDeploymentInfoWorkersType) Set(val *DeploymentInfoWorkersType) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentInfoWorkersType) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentInfoWorkersType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentInfoWorkersType(val *DeploymentInfoWorkersType) *NullableDeploymentInfoWorkersType {
	return &NullableDeploymentInfoWorkersType{value: val, isSet: true}
}

func (v NullableDeploymentInfoWorkersType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentInfoWorkersType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


