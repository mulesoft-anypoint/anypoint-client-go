/*
Deployment v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the DeploymentMuleVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentMuleVersion{}

// DeploymentMuleVersion Details regarding the Mule runtime version.
type DeploymentMuleVersion struct {
	// The Mule runtime version.
	Version *string `json:"version,omitempty"`
	// The identifier for the runtime update.
	UpdateId *string `json:"updateId,omitempty"`
	// The identifier for the latest runtime update.
	LatestUpdateId *string `json:"latestUpdateId,omitempty"`
	// The timestamp (in milliseconds) representing the end-of-support date.
	EndOfSupportDate *int64 `json:"endOfSupportDate,omitempty"`
}

// NewDeploymentMuleVersion instantiates a new DeploymentMuleVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentMuleVersion() *DeploymentMuleVersion {
	this := DeploymentMuleVersion{}
	return &this
}

// NewDeploymentMuleVersionWithDefaults instantiates a new DeploymentMuleVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentMuleVersionWithDefaults() *DeploymentMuleVersion {
	this := DeploymentMuleVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeploymentMuleVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMuleVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeploymentMuleVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DeploymentMuleVersion) SetVersion(v string) {
	o.Version = &v
}

// GetUpdateId returns the UpdateId field value if set, zero value otherwise.
func (o *DeploymentMuleVersion) GetUpdateId() string {
	if o == nil || IsNil(o.UpdateId) {
		var ret string
		return ret
	}
	return *o.UpdateId
}

// GetUpdateIdOk returns a tuple with the UpdateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMuleVersion) GetUpdateIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateId) {
		return nil, false
	}
	return o.UpdateId, true
}

// HasUpdateId returns a boolean if a field has been set.
func (o *DeploymentMuleVersion) HasUpdateId() bool {
	if o != nil && !IsNil(o.UpdateId) {
		return true
	}

	return false
}

// SetUpdateId gets a reference to the given string and assigns it to the UpdateId field.
func (o *DeploymentMuleVersion) SetUpdateId(v string) {
	o.UpdateId = &v
}

// GetLatestUpdateId returns the LatestUpdateId field value if set, zero value otherwise.
func (o *DeploymentMuleVersion) GetLatestUpdateId() string {
	if o == nil || IsNil(o.LatestUpdateId) {
		var ret string
		return ret
	}
	return *o.LatestUpdateId
}

// GetLatestUpdateIdOk returns a tuple with the LatestUpdateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMuleVersion) GetLatestUpdateIdOk() (*string, bool) {
	if o == nil || IsNil(o.LatestUpdateId) {
		return nil, false
	}
	return o.LatestUpdateId, true
}

// HasLatestUpdateId returns a boolean if a field has been set.
func (o *DeploymentMuleVersion) HasLatestUpdateId() bool {
	if o != nil && !IsNil(o.LatestUpdateId) {
		return true
	}

	return false
}

// SetLatestUpdateId gets a reference to the given string and assigns it to the LatestUpdateId field.
func (o *DeploymentMuleVersion) SetLatestUpdateId(v string) {
	o.LatestUpdateId = &v
}

// GetEndOfSupportDate returns the EndOfSupportDate field value if set, zero value otherwise.
func (o *DeploymentMuleVersion) GetEndOfSupportDate() int64 {
	if o == nil || IsNil(o.EndOfSupportDate) {
		var ret int64
		return ret
	}
	return *o.EndOfSupportDate
}

// GetEndOfSupportDateOk returns a tuple with the EndOfSupportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentMuleVersion) GetEndOfSupportDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndOfSupportDate) {
		return nil, false
	}
	return o.EndOfSupportDate, true
}

// HasEndOfSupportDate returns a boolean if a field has been set.
func (o *DeploymentMuleVersion) HasEndOfSupportDate() bool {
	if o != nil && !IsNil(o.EndOfSupportDate) {
		return true
	}

	return false
}

// SetEndOfSupportDate gets a reference to the given int64 and assigns it to the EndOfSupportDate field.
func (o *DeploymentMuleVersion) SetEndOfSupportDate(v int64) {
	o.EndOfSupportDate = &v
}

func (o DeploymentMuleVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentMuleVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.UpdateId) {
		toSerialize["updateId"] = o.UpdateId
	}
	if !IsNil(o.LatestUpdateId) {
		toSerialize["latestUpdateId"] = o.LatestUpdateId
	}
	if !IsNil(o.EndOfSupportDate) {
		toSerialize["endOfSupportDate"] = o.EndOfSupportDate
	}
	return toSerialize, nil
}

type NullableDeploymentMuleVersion struct {
	value *DeploymentMuleVersion
	isSet bool
}

func (v NullableDeploymentMuleVersion) Get() *DeploymentMuleVersion {
	return v.value
}

func (v *NullableDeploymentMuleVersion) Set(val *DeploymentMuleVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentMuleVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentMuleVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentMuleVersion(val *DeploymentMuleVersion) *NullableDeploymentMuleVersion {
	return &NullableDeploymentMuleVersion{value: val, isSet: true}
}

func (v NullableDeploymentMuleVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentMuleVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


