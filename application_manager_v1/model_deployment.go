/*
Deployment v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the Deployment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Deployment{}

// Deployment struct for Deployment
type Deployment struct {
	// A unique identifier for the deployment.
	Id *string `json:"id,omitempty"`
	Artifact *DeploymentArtifact `json:"artifact,omitempty"`
	// The last reported status of the deployment (e.g., STARTED, UNDEPLOYED).
	LastReportedStatus *string `json:"lastReportedStatus,omitempty"`
	Details *DeploymentDetails `json:"details,omitempty"`
	Target *DeploymentTarget `json:"target,omitempty"`
	Application *DeploymentApplication `json:"application,omitempty"`
	MuleVersion *DeploymentMuleVersion `json:"muleVersion,omitempty"`
}

// NewDeployment instantiates a new Deployment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeployment() *Deployment {
	this := Deployment{}
	return &this
}

// NewDeploymentWithDefaults instantiates a new Deployment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentWithDefaults() *Deployment {
	this := Deployment{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Deployment) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Deployment) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Deployment) SetId(v string) {
	o.Id = &v
}

// GetArtifact returns the Artifact field value if set, zero value otherwise.
func (o *Deployment) GetArtifact() DeploymentArtifact {
	if o == nil || IsNil(o.Artifact) {
		var ret DeploymentArtifact
		return ret
	}
	return *o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetArtifactOk() (*DeploymentArtifact, bool) {
	if o == nil || IsNil(o.Artifact) {
		return nil, false
	}
	return o.Artifact, true
}

// HasArtifact returns a boolean if a field has been set.
func (o *Deployment) HasArtifact() bool {
	if o != nil && !IsNil(o.Artifact) {
		return true
	}

	return false
}

// SetArtifact gets a reference to the given DeploymentArtifact and assigns it to the Artifact field.
func (o *Deployment) SetArtifact(v DeploymentArtifact) {
	o.Artifact = &v
}

// GetLastReportedStatus returns the LastReportedStatus field value if set, zero value otherwise.
func (o *Deployment) GetLastReportedStatus() string {
	if o == nil || IsNil(o.LastReportedStatus) {
		var ret string
		return ret
	}
	return *o.LastReportedStatus
}

// GetLastReportedStatusOk returns a tuple with the LastReportedStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetLastReportedStatusOk() (*string, bool) {
	if o == nil || IsNil(o.LastReportedStatus) {
		return nil, false
	}
	return o.LastReportedStatus, true
}

// HasLastReportedStatus returns a boolean if a field has been set.
func (o *Deployment) HasLastReportedStatus() bool {
	if o != nil && !IsNil(o.LastReportedStatus) {
		return true
	}

	return false
}

// SetLastReportedStatus gets a reference to the given string and assigns it to the LastReportedStatus field.
func (o *Deployment) SetLastReportedStatus(v string) {
	o.LastReportedStatus = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *Deployment) GetDetails() DeploymentDetails {
	if o == nil || IsNil(o.Details) {
		var ret DeploymentDetails
		return ret
	}
	return *o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetDetailsOk() (*DeploymentDetails, bool) {
	if o == nil || IsNil(o.Details) {
		return nil, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *Deployment) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given DeploymentDetails and assigns it to the Details field.
func (o *Deployment) SetDetails(v DeploymentDetails) {
	o.Details = &v
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *Deployment) GetTarget() DeploymentTarget {
	if o == nil || IsNil(o.Target) {
		var ret DeploymentTarget
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetTargetOk() (*DeploymentTarget, bool) {
	if o == nil || IsNil(o.Target) {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *Deployment) HasTarget() bool {
	if o != nil && !IsNil(o.Target) {
		return true
	}

	return false
}

// SetTarget gets a reference to the given DeploymentTarget and assigns it to the Target field.
func (o *Deployment) SetTarget(v DeploymentTarget) {
	o.Target = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *Deployment) GetApplication() DeploymentApplication {
	if o == nil || IsNil(o.Application) {
		var ret DeploymentApplication
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetApplicationOk() (*DeploymentApplication, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *Deployment) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given DeploymentApplication and assigns it to the Application field.
func (o *Deployment) SetApplication(v DeploymentApplication) {
	o.Application = &v
}

// GetMuleVersion returns the MuleVersion field value if set, zero value otherwise.
func (o *Deployment) GetMuleVersion() DeploymentMuleVersion {
	if o == nil || IsNil(o.MuleVersion) {
		var ret DeploymentMuleVersion
		return ret
	}
	return *o.MuleVersion
}

// GetMuleVersionOk returns a tuple with the MuleVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Deployment) GetMuleVersionOk() (*DeploymentMuleVersion, bool) {
	if o == nil || IsNil(o.MuleVersion) {
		return nil, false
	}
	return o.MuleVersion, true
}

// HasMuleVersion returns a boolean if a field has been set.
func (o *Deployment) HasMuleVersion() bool {
	if o != nil && !IsNil(o.MuleVersion) {
		return true
	}

	return false
}

// SetMuleVersion gets a reference to the given DeploymentMuleVersion and assigns it to the MuleVersion field.
func (o *Deployment) SetMuleVersion(v DeploymentMuleVersion) {
	o.MuleVersion = &v
}

func (o Deployment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Deployment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Artifact) {
		toSerialize["artifact"] = o.Artifact
	}
	if !IsNil(o.LastReportedStatus) {
		toSerialize["lastReportedStatus"] = o.LastReportedStatus
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	if !IsNil(o.Target) {
		toSerialize["target"] = o.Target
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.MuleVersion) {
		toSerialize["muleVersion"] = o.MuleVersion
	}
	return toSerialize, nil
}

type NullableDeployment struct {
	value *Deployment
	isSet bool
}

func (v NullableDeployment) Get() *Deployment {
	return v.value
}

func (v *NullableDeployment) Set(val *Deployment) {
	v.value = val
	v.isSet = true
}

func (v NullableDeployment) IsSet() bool {
	return v.isSet
}

func (v *NullableDeployment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeployment(val *Deployment) *NullableDeployment {
	return &NullableDeployment{value: val, isSet: true}
}

func (v NullableDeployment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeployment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


