/*
Application Manager v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the RuntimeLatestUpdateFlags type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuntimeLatestUpdateFlags{}

// RuntimeLatestUpdateFlags struct for RuntimeLatestUpdateFlags
type RuntimeLatestUpdateFlags struct {
	PerformLog4jReplacement *bool `json:"performLog4jReplacement,omitempty"`
	SkipMMCPairing *bool `json:"skipMMCPairing,omitempty"`
	Log4j1Used *bool `json:"log4j1Used,omitempty"`
	UsingMuleAgent *bool `json:"usingMuleAgent,omitempty"`
	VpnSupported *bool `json:"vpnSupported,omitempty"`
	MonitoringSupported *bool `json:"monitoringSupported,omitempty"`
	ObjectStoreV1 *bool `json:"objectStoreV1,omitempty"`
	LoggingNgSupported *bool `json:"loggingNgSupported,omitempty"`
	DiagnosticsSupported *bool `json:"diagnosticsSupported,omitempty"`
	PersistentQueuesSupported *bool `json:"persistentQueuesSupported,omitempty"`
	AsyncScheduleSupported *bool `json:"asyncScheduleSupported,omitempty"`
	MuleLivenessSupported *bool `json:"muleLivenessSupported,omitempty"`
	MuleReadinessCheckSupported *bool `json:"muleReadinessCheckSupported,omitempty"`
	OcsServiceSupported *bool `json:"ocsServiceSupported,omitempty"`
	InjectLog4j2Supported *bool `json:"injectLog4j2Supported,omitempty"`
	InjectMuleLogsWhenFail *bool `json:"injectMuleLogsWhenFail,omitempty"`
	AmiVersionData *RuntimeLatestUpdateFlagsAmiVersionData `json:"amiVersionData,omitempty"`
}

// NewRuntimeLatestUpdateFlags instantiates a new RuntimeLatestUpdateFlags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuntimeLatestUpdateFlags() *RuntimeLatestUpdateFlags {
	this := RuntimeLatestUpdateFlags{}
	return &this
}

// NewRuntimeLatestUpdateFlagsWithDefaults instantiates a new RuntimeLatestUpdateFlags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuntimeLatestUpdateFlagsWithDefaults() *RuntimeLatestUpdateFlags {
	this := RuntimeLatestUpdateFlags{}
	return &this
}

// GetPerformLog4jReplacement returns the PerformLog4jReplacement field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetPerformLog4jReplacement() bool {
	if o == nil || IsNil(o.PerformLog4jReplacement) {
		var ret bool
		return ret
	}
	return *o.PerformLog4jReplacement
}

// GetPerformLog4jReplacementOk returns a tuple with the PerformLog4jReplacement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetPerformLog4jReplacementOk() (*bool, bool) {
	if o == nil || IsNil(o.PerformLog4jReplacement) {
		return nil, false
	}
	return o.PerformLog4jReplacement, true
}

// HasPerformLog4jReplacement returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasPerformLog4jReplacement() bool {
	if o != nil && !IsNil(o.PerformLog4jReplacement) {
		return true
	}

	return false
}

// SetPerformLog4jReplacement gets a reference to the given bool and assigns it to the PerformLog4jReplacement field.
func (o *RuntimeLatestUpdateFlags) SetPerformLog4jReplacement(v bool) {
	o.PerformLog4jReplacement = &v
}

// GetSkipMMCPairing returns the SkipMMCPairing field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetSkipMMCPairing() bool {
	if o == nil || IsNil(o.SkipMMCPairing) {
		var ret bool
		return ret
	}
	return *o.SkipMMCPairing
}

// GetSkipMMCPairingOk returns a tuple with the SkipMMCPairing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetSkipMMCPairingOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipMMCPairing) {
		return nil, false
	}
	return o.SkipMMCPairing, true
}

// HasSkipMMCPairing returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasSkipMMCPairing() bool {
	if o != nil && !IsNil(o.SkipMMCPairing) {
		return true
	}

	return false
}

// SetSkipMMCPairing gets a reference to the given bool and assigns it to the SkipMMCPairing field.
func (o *RuntimeLatestUpdateFlags) SetSkipMMCPairing(v bool) {
	o.SkipMMCPairing = &v
}

// GetLog4j1Used returns the Log4j1Used field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetLog4j1Used() bool {
	if o == nil || IsNil(o.Log4j1Used) {
		var ret bool
		return ret
	}
	return *o.Log4j1Used
}

// GetLog4j1UsedOk returns a tuple with the Log4j1Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetLog4j1UsedOk() (*bool, bool) {
	if o == nil || IsNil(o.Log4j1Used) {
		return nil, false
	}
	return o.Log4j1Used, true
}

// HasLog4j1Used returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasLog4j1Used() bool {
	if o != nil && !IsNil(o.Log4j1Used) {
		return true
	}

	return false
}

// SetLog4j1Used gets a reference to the given bool and assigns it to the Log4j1Used field.
func (o *RuntimeLatestUpdateFlags) SetLog4j1Used(v bool) {
	o.Log4j1Used = &v
}

// GetUsingMuleAgent returns the UsingMuleAgent field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetUsingMuleAgent() bool {
	if o == nil || IsNil(o.UsingMuleAgent) {
		var ret bool
		return ret
	}
	return *o.UsingMuleAgent
}

// GetUsingMuleAgentOk returns a tuple with the UsingMuleAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetUsingMuleAgentOk() (*bool, bool) {
	if o == nil || IsNil(o.UsingMuleAgent) {
		return nil, false
	}
	return o.UsingMuleAgent, true
}

// HasUsingMuleAgent returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasUsingMuleAgent() bool {
	if o != nil && !IsNil(o.UsingMuleAgent) {
		return true
	}

	return false
}

// SetUsingMuleAgent gets a reference to the given bool and assigns it to the UsingMuleAgent field.
func (o *RuntimeLatestUpdateFlags) SetUsingMuleAgent(v bool) {
	o.UsingMuleAgent = &v
}

// GetVpnSupported returns the VpnSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetVpnSupported() bool {
	if o == nil || IsNil(o.VpnSupported) {
		var ret bool
		return ret
	}
	return *o.VpnSupported
}

// GetVpnSupportedOk returns a tuple with the VpnSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetVpnSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.VpnSupported) {
		return nil, false
	}
	return o.VpnSupported, true
}

// HasVpnSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasVpnSupported() bool {
	if o != nil && !IsNil(o.VpnSupported) {
		return true
	}

	return false
}

// SetVpnSupported gets a reference to the given bool and assigns it to the VpnSupported field.
func (o *RuntimeLatestUpdateFlags) SetVpnSupported(v bool) {
	o.VpnSupported = &v
}

// GetMonitoringSupported returns the MonitoringSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetMonitoringSupported() bool {
	if o == nil || IsNil(o.MonitoringSupported) {
		var ret bool
		return ret
	}
	return *o.MonitoringSupported
}

// GetMonitoringSupportedOk returns a tuple with the MonitoringSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetMonitoringSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MonitoringSupported) {
		return nil, false
	}
	return o.MonitoringSupported, true
}

// HasMonitoringSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasMonitoringSupported() bool {
	if o != nil && !IsNil(o.MonitoringSupported) {
		return true
	}

	return false
}

// SetMonitoringSupported gets a reference to the given bool and assigns it to the MonitoringSupported field.
func (o *RuntimeLatestUpdateFlags) SetMonitoringSupported(v bool) {
	o.MonitoringSupported = &v
}

// GetObjectStoreV1 returns the ObjectStoreV1 field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetObjectStoreV1() bool {
	if o == nil || IsNil(o.ObjectStoreV1) {
		var ret bool
		return ret
	}
	return *o.ObjectStoreV1
}

// GetObjectStoreV1Ok returns a tuple with the ObjectStoreV1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetObjectStoreV1Ok() (*bool, bool) {
	if o == nil || IsNil(o.ObjectStoreV1) {
		return nil, false
	}
	return o.ObjectStoreV1, true
}

// HasObjectStoreV1 returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasObjectStoreV1() bool {
	if o != nil && !IsNil(o.ObjectStoreV1) {
		return true
	}

	return false
}

// SetObjectStoreV1 gets a reference to the given bool and assigns it to the ObjectStoreV1 field.
func (o *RuntimeLatestUpdateFlags) SetObjectStoreV1(v bool) {
	o.ObjectStoreV1 = &v
}

// GetLoggingNgSupported returns the LoggingNgSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetLoggingNgSupported() bool {
	if o == nil || IsNil(o.LoggingNgSupported) {
		var ret bool
		return ret
	}
	return *o.LoggingNgSupported
}

// GetLoggingNgSupportedOk returns a tuple with the LoggingNgSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetLoggingNgSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.LoggingNgSupported) {
		return nil, false
	}
	return o.LoggingNgSupported, true
}

// HasLoggingNgSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasLoggingNgSupported() bool {
	if o != nil && !IsNil(o.LoggingNgSupported) {
		return true
	}

	return false
}

// SetLoggingNgSupported gets a reference to the given bool and assigns it to the LoggingNgSupported field.
func (o *RuntimeLatestUpdateFlags) SetLoggingNgSupported(v bool) {
	o.LoggingNgSupported = &v
}

// GetDiagnosticsSupported returns the DiagnosticsSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetDiagnosticsSupported() bool {
	if o == nil || IsNil(o.DiagnosticsSupported) {
		var ret bool
		return ret
	}
	return *o.DiagnosticsSupported
}

// GetDiagnosticsSupportedOk returns a tuple with the DiagnosticsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetDiagnosticsSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.DiagnosticsSupported) {
		return nil, false
	}
	return o.DiagnosticsSupported, true
}

// HasDiagnosticsSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasDiagnosticsSupported() bool {
	if o != nil && !IsNil(o.DiagnosticsSupported) {
		return true
	}

	return false
}

// SetDiagnosticsSupported gets a reference to the given bool and assigns it to the DiagnosticsSupported field.
func (o *RuntimeLatestUpdateFlags) SetDiagnosticsSupported(v bool) {
	o.DiagnosticsSupported = &v
}

// GetPersistentQueuesSupported returns the PersistentQueuesSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetPersistentQueuesSupported() bool {
	if o == nil || IsNil(o.PersistentQueuesSupported) {
		var ret bool
		return ret
	}
	return *o.PersistentQueuesSupported
}

// GetPersistentQueuesSupportedOk returns a tuple with the PersistentQueuesSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetPersistentQueuesSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.PersistentQueuesSupported) {
		return nil, false
	}
	return o.PersistentQueuesSupported, true
}

// HasPersistentQueuesSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasPersistentQueuesSupported() bool {
	if o != nil && !IsNil(o.PersistentQueuesSupported) {
		return true
	}

	return false
}

// SetPersistentQueuesSupported gets a reference to the given bool and assigns it to the PersistentQueuesSupported field.
func (o *RuntimeLatestUpdateFlags) SetPersistentQueuesSupported(v bool) {
	o.PersistentQueuesSupported = &v
}

// GetAsyncScheduleSupported returns the AsyncScheduleSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetAsyncScheduleSupported() bool {
	if o == nil || IsNil(o.AsyncScheduleSupported) {
		var ret bool
		return ret
	}
	return *o.AsyncScheduleSupported
}

// GetAsyncScheduleSupportedOk returns a tuple with the AsyncScheduleSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetAsyncScheduleSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.AsyncScheduleSupported) {
		return nil, false
	}
	return o.AsyncScheduleSupported, true
}

// HasAsyncScheduleSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasAsyncScheduleSupported() bool {
	if o != nil && !IsNil(o.AsyncScheduleSupported) {
		return true
	}

	return false
}

// SetAsyncScheduleSupported gets a reference to the given bool and assigns it to the AsyncScheduleSupported field.
func (o *RuntimeLatestUpdateFlags) SetAsyncScheduleSupported(v bool) {
	o.AsyncScheduleSupported = &v
}

// GetMuleLivenessSupported returns the MuleLivenessSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetMuleLivenessSupported() bool {
	if o == nil || IsNil(o.MuleLivenessSupported) {
		var ret bool
		return ret
	}
	return *o.MuleLivenessSupported
}

// GetMuleLivenessSupportedOk returns a tuple with the MuleLivenessSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetMuleLivenessSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MuleLivenessSupported) {
		return nil, false
	}
	return o.MuleLivenessSupported, true
}

// HasMuleLivenessSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasMuleLivenessSupported() bool {
	if o != nil && !IsNil(o.MuleLivenessSupported) {
		return true
	}

	return false
}

// SetMuleLivenessSupported gets a reference to the given bool and assigns it to the MuleLivenessSupported field.
func (o *RuntimeLatestUpdateFlags) SetMuleLivenessSupported(v bool) {
	o.MuleLivenessSupported = &v
}

// GetMuleReadinessCheckSupported returns the MuleReadinessCheckSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetMuleReadinessCheckSupported() bool {
	if o == nil || IsNil(o.MuleReadinessCheckSupported) {
		var ret bool
		return ret
	}
	return *o.MuleReadinessCheckSupported
}

// GetMuleReadinessCheckSupportedOk returns a tuple with the MuleReadinessCheckSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetMuleReadinessCheckSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.MuleReadinessCheckSupported) {
		return nil, false
	}
	return o.MuleReadinessCheckSupported, true
}

// HasMuleReadinessCheckSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasMuleReadinessCheckSupported() bool {
	if o != nil && !IsNil(o.MuleReadinessCheckSupported) {
		return true
	}

	return false
}

// SetMuleReadinessCheckSupported gets a reference to the given bool and assigns it to the MuleReadinessCheckSupported field.
func (o *RuntimeLatestUpdateFlags) SetMuleReadinessCheckSupported(v bool) {
	o.MuleReadinessCheckSupported = &v
}

// GetOcsServiceSupported returns the OcsServiceSupported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetOcsServiceSupported() bool {
	if o == nil || IsNil(o.OcsServiceSupported) {
		var ret bool
		return ret
	}
	return *o.OcsServiceSupported
}

// GetOcsServiceSupportedOk returns a tuple with the OcsServiceSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetOcsServiceSupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.OcsServiceSupported) {
		return nil, false
	}
	return o.OcsServiceSupported, true
}

// HasOcsServiceSupported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasOcsServiceSupported() bool {
	if o != nil && !IsNil(o.OcsServiceSupported) {
		return true
	}

	return false
}

// SetOcsServiceSupported gets a reference to the given bool and assigns it to the OcsServiceSupported field.
func (o *RuntimeLatestUpdateFlags) SetOcsServiceSupported(v bool) {
	o.OcsServiceSupported = &v
}

// GetInjectLog4j2Supported returns the InjectLog4j2Supported field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetInjectLog4j2Supported() bool {
	if o == nil || IsNil(o.InjectLog4j2Supported) {
		var ret bool
		return ret
	}
	return *o.InjectLog4j2Supported
}

// GetInjectLog4j2SupportedOk returns a tuple with the InjectLog4j2Supported field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetInjectLog4j2SupportedOk() (*bool, bool) {
	if o == nil || IsNil(o.InjectLog4j2Supported) {
		return nil, false
	}
	return o.InjectLog4j2Supported, true
}

// HasInjectLog4j2Supported returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasInjectLog4j2Supported() bool {
	if o != nil && !IsNil(o.InjectLog4j2Supported) {
		return true
	}

	return false
}

// SetInjectLog4j2Supported gets a reference to the given bool and assigns it to the InjectLog4j2Supported field.
func (o *RuntimeLatestUpdateFlags) SetInjectLog4j2Supported(v bool) {
	o.InjectLog4j2Supported = &v
}

// GetInjectMuleLogsWhenFail returns the InjectMuleLogsWhenFail field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetInjectMuleLogsWhenFail() bool {
	if o == nil || IsNil(o.InjectMuleLogsWhenFail) {
		var ret bool
		return ret
	}
	return *o.InjectMuleLogsWhenFail
}

// GetInjectMuleLogsWhenFailOk returns a tuple with the InjectMuleLogsWhenFail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetInjectMuleLogsWhenFailOk() (*bool, bool) {
	if o == nil || IsNil(o.InjectMuleLogsWhenFail) {
		return nil, false
	}
	return o.InjectMuleLogsWhenFail, true
}

// HasInjectMuleLogsWhenFail returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasInjectMuleLogsWhenFail() bool {
	if o != nil && !IsNil(o.InjectMuleLogsWhenFail) {
		return true
	}

	return false
}

// SetInjectMuleLogsWhenFail gets a reference to the given bool and assigns it to the InjectMuleLogsWhenFail field.
func (o *RuntimeLatestUpdateFlags) SetInjectMuleLogsWhenFail(v bool) {
	o.InjectMuleLogsWhenFail = &v
}

// GetAmiVersionData returns the AmiVersionData field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlags) GetAmiVersionData() RuntimeLatestUpdateFlagsAmiVersionData {
	if o == nil || IsNil(o.AmiVersionData) {
		var ret RuntimeLatestUpdateFlagsAmiVersionData
		return ret
	}
	return *o.AmiVersionData
}

// GetAmiVersionDataOk returns a tuple with the AmiVersionData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlags) GetAmiVersionDataOk() (*RuntimeLatestUpdateFlagsAmiVersionData, bool) {
	if o == nil || IsNil(o.AmiVersionData) {
		return nil, false
	}
	return o.AmiVersionData, true
}

// HasAmiVersionData returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlags) HasAmiVersionData() bool {
	if o != nil && !IsNil(o.AmiVersionData) {
		return true
	}

	return false
}

// SetAmiVersionData gets a reference to the given RuntimeLatestUpdateFlagsAmiVersionData and assigns it to the AmiVersionData field.
func (o *RuntimeLatestUpdateFlags) SetAmiVersionData(v RuntimeLatestUpdateFlagsAmiVersionData) {
	o.AmiVersionData = &v
}

func (o RuntimeLatestUpdateFlags) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuntimeLatestUpdateFlags) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PerformLog4jReplacement) {
		toSerialize["performLog4jReplacement"] = o.PerformLog4jReplacement
	}
	if !IsNil(o.SkipMMCPairing) {
		toSerialize["skipMMCPairing"] = o.SkipMMCPairing
	}
	if !IsNil(o.Log4j1Used) {
		toSerialize["log4j1Used"] = o.Log4j1Used
	}
	if !IsNil(o.UsingMuleAgent) {
		toSerialize["usingMuleAgent"] = o.UsingMuleAgent
	}
	if !IsNil(o.VpnSupported) {
		toSerialize["vpnSupported"] = o.VpnSupported
	}
	if !IsNil(o.MonitoringSupported) {
		toSerialize["monitoringSupported"] = o.MonitoringSupported
	}
	if !IsNil(o.ObjectStoreV1) {
		toSerialize["objectStoreV1"] = o.ObjectStoreV1
	}
	if !IsNil(o.LoggingNgSupported) {
		toSerialize["loggingNgSupported"] = o.LoggingNgSupported
	}
	if !IsNil(o.DiagnosticsSupported) {
		toSerialize["diagnosticsSupported"] = o.DiagnosticsSupported
	}
	if !IsNil(o.PersistentQueuesSupported) {
		toSerialize["persistentQueuesSupported"] = o.PersistentQueuesSupported
	}
	if !IsNil(o.AsyncScheduleSupported) {
		toSerialize["asyncScheduleSupported"] = o.AsyncScheduleSupported
	}
	if !IsNil(o.MuleLivenessSupported) {
		toSerialize["muleLivenessSupported"] = o.MuleLivenessSupported
	}
	if !IsNil(o.MuleReadinessCheckSupported) {
		toSerialize["muleReadinessCheckSupported"] = o.MuleReadinessCheckSupported
	}
	if !IsNil(o.OcsServiceSupported) {
		toSerialize["ocsServiceSupported"] = o.OcsServiceSupported
	}
	if !IsNil(o.InjectLog4j2Supported) {
		toSerialize["injectLog4j2Supported"] = o.InjectLog4j2Supported
	}
	if !IsNil(o.InjectMuleLogsWhenFail) {
		toSerialize["injectMuleLogsWhenFail"] = o.InjectMuleLogsWhenFail
	}
	if !IsNil(o.AmiVersionData) {
		toSerialize["amiVersionData"] = o.AmiVersionData
	}
	return toSerialize, nil
}

type NullableRuntimeLatestUpdateFlags struct {
	value *RuntimeLatestUpdateFlags
	isSet bool
}

func (v NullableRuntimeLatestUpdateFlags) Get() *RuntimeLatestUpdateFlags {
	return v.value
}

func (v *NullableRuntimeLatestUpdateFlags) Set(val *RuntimeLatestUpdateFlags) {
	v.value = val
	v.isSet = true
}

func (v NullableRuntimeLatestUpdateFlags) IsSet() bool {
	return v.isSet
}

func (v *NullableRuntimeLatestUpdateFlags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuntimeLatestUpdateFlags(val *RuntimeLatestUpdateFlags) *NullableRuntimeLatestUpdateFlags {
	return &NullableRuntimeLatestUpdateFlags{value: val, isSet: true}
}

func (v NullableRuntimeLatestUpdateFlags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuntimeLatestUpdateFlags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


