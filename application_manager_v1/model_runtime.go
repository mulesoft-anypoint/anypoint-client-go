/*
Application Manager v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the Runtime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Runtime{}

// Runtime struct for Runtime
type Runtime struct {
	// The runtime version identifier.
	Version *string `json:"version,omitempty"`
	// The display name for the runtime.
	DisplayName *string `json:"displayName,omitempty"`
	// Indicates whether this runtime is recommended.
	Recommended *bool `json:"recommended,omitempty"`
	// The timestamp (in milliseconds) when support ends for this runtime.
	EndOfSupportDate *float32 `json:"endOfSupportDate,omitempty"`
	// The timestamp (in milliseconds) when this runtime reaches end of life.
	EndOfLifeDate *float32 `json:"endOfLifeDate,omitempty"`
	LatestUpdate *RuntimeLatestUpdate `json:"latestUpdate,omitempty"`
	// The state of the runtime (for example, ACTIVE).
	State *string `json:"state,omitempty"`
	// The release channel of the runtime (for example, EDGE, LTS).
	ReleaseChannel *string `json:"releaseChannel,omitempty"`
	// The Java version used by the runtime.
	JavaVersion *string `json:"javaVersion,omitempty"`
	// Indicates whether this runtime is the default.
	Default *bool `json:"default,omitempty"`
}

// NewRuntime instantiates a new Runtime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuntime() *Runtime {
	this := Runtime{}
	return &this
}

// NewRuntimeWithDefaults instantiates a new Runtime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuntimeWithDefaults() *Runtime {
	this := Runtime{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Runtime) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Runtime) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Runtime) SetVersion(v string) {
	o.Version = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Runtime) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Runtime) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Runtime) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetRecommended returns the Recommended field value if set, zero value otherwise.
func (o *Runtime) GetRecommended() bool {
	if o == nil || IsNil(o.Recommended) {
		var ret bool
		return ret
	}
	return *o.Recommended
}

// GetRecommendedOk returns a tuple with the Recommended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetRecommendedOk() (*bool, bool) {
	if o == nil || IsNil(o.Recommended) {
		return nil, false
	}
	return o.Recommended, true
}

// HasRecommended returns a boolean if a field has been set.
func (o *Runtime) HasRecommended() bool {
	if o != nil && !IsNil(o.Recommended) {
		return true
	}

	return false
}

// SetRecommended gets a reference to the given bool and assigns it to the Recommended field.
func (o *Runtime) SetRecommended(v bool) {
	o.Recommended = &v
}

// GetEndOfSupportDate returns the EndOfSupportDate field value if set, zero value otherwise.
func (o *Runtime) GetEndOfSupportDate() float32 {
	if o == nil || IsNil(o.EndOfSupportDate) {
		var ret float32
		return ret
	}
	return *o.EndOfSupportDate
}

// GetEndOfSupportDateOk returns a tuple with the EndOfSupportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetEndOfSupportDateOk() (*float32, bool) {
	if o == nil || IsNil(o.EndOfSupportDate) {
		return nil, false
	}
	return o.EndOfSupportDate, true
}

// HasEndOfSupportDate returns a boolean if a field has been set.
func (o *Runtime) HasEndOfSupportDate() bool {
	if o != nil && !IsNil(o.EndOfSupportDate) {
		return true
	}

	return false
}

// SetEndOfSupportDate gets a reference to the given float32 and assigns it to the EndOfSupportDate field.
func (o *Runtime) SetEndOfSupportDate(v float32) {
	o.EndOfSupportDate = &v
}

// GetEndOfLifeDate returns the EndOfLifeDate field value if set, zero value otherwise.
func (o *Runtime) GetEndOfLifeDate() float32 {
	if o == nil || IsNil(o.EndOfLifeDate) {
		var ret float32
		return ret
	}
	return *o.EndOfLifeDate
}

// GetEndOfLifeDateOk returns a tuple with the EndOfLifeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetEndOfLifeDateOk() (*float32, bool) {
	if o == nil || IsNil(o.EndOfLifeDate) {
		return nil, false
	}
	return o.EndOfLifeDate, true
}

// HasEndOfLifeDate returns a boolean if a field has been set.
func (o *Runtime) HasEndOfLifeDate() bool {
	if o != nil && !IsNil(o.EndOfLifeDate) {
		return true
	}

	return false
}

// SetEndOfLifeDate gets a reference to the given float32 and assigns it to the EndOfLifeDate field.
func (o *Runtime) SetEndOfLifeDate(v float32) {
	o.EndOfLifeDate = &v
}

// GetLatestUpdate returns the LatestUpdate field value if set, zero value otherwise.
func (o *Runtime) GetLatestUpdate() RuntimeLatestUpdate {
	if o == nil || IsNil(o.LatestUpdate) {
		var ret RuntimeLatestUpdate
		return ret
	}
	return *o.LatestUpdate
}

// GetLatestUpdateOk returns a tuple with the LatestUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetLatestUpdateOk() (*RuntimeLatestUpdate, bool) {
	if o == nil || IsNil(o.LatestUpdate) {
		return nil, false
	}
	return o.LatestUpdate, true
}

// HasLatestUpdate returns a boolean if a field has been set.
func (o *Runtime) HasLatestUpdate() bool {
	if o != nil && !IsNil(o.LatestUpdate) {
		return true
	}

	return false
}

// SetLatestUpdate gets a reference to the given RuntimeLatestUpdate and assigns it to the LatestUpdate field.
func (o *Runtime) SetLatestUpdate(v RuntimeLatestUpdate) {
	o.LatestUpdate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Runtime) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Runtime) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Runtime) SetState(v string) {
	o.State = &v
}

// GetReleaseChannel returns the ReleaseChannel field value if set, zero value otherwise.
func (o *Runtime) GetReleaseChannel() string {
	if o == nil || IsNil(o.ReleaseChannel) {
		var ret string
		return ret
	}
	return *o.ReleaseChannel
}

// GetReleaseChannelOk returns a tuple with the ReleaseChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetReleaseChannelOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseChannel) {
		return nil, false
	}
	return o.ReleaseChannel, true
}

// HasReleaseChannel returns a boolean if a field has been set.
func (o *Runtime) HasReleaseChannel() bool {
	if o != nil && !IsNil(o.ReleaseChannel) {
		return true
	}

	return false
}

// SetReleaseChannel gets a reference to the given string and assigns it to the ReleaseChannel field.
func (o *Runtime) SetReleaseChannel(v string) {
	o.ReleaseChannel = &v
}

// GetJavaVersion returns the JavaVersion field value if set, zero value otherwise.
func (o *Runtime) GetJavaVersion() string {
	if o == nil || IsNil(o.JavaVersion) {
		var ret string
		return ret
	}
	return *o.JavaVersion
}

// GetJavaVersionOk returns a tuple with the JavaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetJavaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.JavaVersion) {
		return nil, false
	}
	return o.JavaVersion, true
}

// HasJavaVersion returns a boolean if a field has been set.
func (o *Runtime) HasJavaVersion() bool {
	if o != nil && !IsNil(o.JavaVersion) {
		return true
	}

	return false
}

// SetJavaVersion gets a reference to the given string and assigns it to the JavaVersion field.
func (o *Runtime) SetJavaVersion(v string) {
	o.JavaVersion = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Runtime) GetDefault() bool {
	if o == nil || IsNil(o.Default) {
		var ret bool
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Runtime) GetDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Runtime) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given bool and assigns it to the Default field.
func (o *Runtime) SetDefault(v bool) {
	o.Default = &v
}

func (o Runtime) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Runtime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.DisplayName) {
		toSerialize["displayName"] = o.DisplayName
	}
	if !IsNil(o.Recommended) {
		toSerialize["recommended"] = o.Recommended
	}
	if !IsNil(o.EndOfSupportDate) {
		toSerialize["endOfSupportDate"] = o.EndOfSupportDate
	}
	if !IsNil(o.EndOfLifeDate) {
		toSerialize["endOfLifeDate"] = o.EndOfLifeDate
	}
	if !IsNil(o.LatestUpdate) {
		toSerialize["latestUpdate"] = o.LatestUpdate
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ReleaseChannel) {
		toSerialize["releaseChannel"] = o.ReleaseChannel
	}
	if !IsNil(o.JavaVersion) {
		toSerialize["javaVersion"] = o.JavaVersion
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	return toSerialize, nil
}

type NullableRuntime struct {
	value *Runtime
	isSet bool
}

func (v NullableRuntime) Get() *Runtime {
	return v.value
}

func (v *NullableRuntime) Set(val *Runtime) {
	v.value = val
	v.isSet = true
}

func (v NullableRuntime) IsSet() bool {
	return v.isSet
}

func (v *NullableRuntime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuntime(val *Runtime) *NullableRuntime {
	return &NullableRuntime{value: val, isSet: true}
}

func (v NullableRuntime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuntime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


