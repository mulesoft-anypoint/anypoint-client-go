/*
Deployment v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the DeploymentDetailsPreviousMuleVersion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentDetailsPreviousMuleVersion{}

// DeploymentDetailsPreviousMuleVersion Details of the previous Mule runtime version before the current deployment.
type DeploymentDetailsPreviousMuleVersion struct {
	// The previous Mule runtime version.
	Version *string `json:"version,omitempty"`
	// Identifier for the previous update.
	UpdateId *string `json:"updateId,omitempty"`
	// Timestamp (in milliseconds) for the previous version's end-of-support date.
	EndOfSupportDate *int64 `json:"endOfSupportDate,omitempty"`
	// Timestamp (in milliseconds) for the previous version's end-of-life date.
	EndOfLifeDate *int64 `json:"endOfLifeDate,omitempty"`
	// The previous update version string.
	UpdateVersion *string `json:"updateVersion,omitempty"`
	// The release channel for the previous runtime.
	ReleaseChannel *string `json:"releaseChannel,omitempty"`
	// The previous Java version used.
	JavaVersion *string `json:"javaVersion,omitempty"`
}

// NewDeploymentDetailsPreviousMuleVersion instantiates a new DeploymentDetailsPreviousMuleVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentDetailsPreviousMuleVersion() *DeploymentDetailsPreviousMuleVersion {
	this := DeploymentDetailsPreviousMuleVersion{}
	return &this
}

// NewDeploymentDetailsPreviousMuleVersionWithDefaults instantiates a new DeploymentDetailsPreviousMuleVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentDetailsPreviousMuleVersionWithDefaults() *DeploymentDetailsPreviousMuleVersion {
	this := DeploymentDetailsPreviousMuleVersion{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DeploymentDetailsPreviousMuleVersion) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentDetailsPreviousMuleVersion) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DeploymentDetailsPreviousMuleVersion) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DeploymentDetailsPreviousMuleVersion) SetVersion(v string) {
	o.Version = &v
}

// GetUpdateId returns the UpdateId field value if set, zero value otherwise.
func (o *DeploymentDetailsPreviousMuleVersion) GetUpdateId() string {
	if o == nil || IsNil(o.UpdateId) {
		var ret string
		return ret
	}
	return *o.UpdateId
}

// GetUpdateIdOk returns a tuple with the UpdateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentDetailsPreviousMuleVersion) GetUpdateIdOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateId) {
		return nil, false
	}
	return o.UpdateId, true
}

// HasUpdateId returns a boolean if a field has been set.
func (o *DeploymentDetailsPreviousMuleVersion) HasUpdateId() bool {
	if o != nil && !IsNil(o.UpdateId) {
		return true
	}

	return false
}

// SetUpdateId gets a reference to the given string and assigns it to the UpdateId field.
func (o *DeploymentDetailsPreviousMuleVersion) SetUpdateId(v string) {
	o.UpdateId = &v
}

// GetEndOfSupportDate returns the EndOfSupportDate field value if set, zero value otherwise.
func (o *DeploymentDetailsPreviousMuleVersion) GetEndOfSupportDate() int64 {
	if o == nil || IsNil(o.EndOfSupportDate) {
		var ret int64
		return ret
	}
	return *o.EndOfSupportDate
}

// GetEndOfSupportDateOk returns a tuple with the EndOfSupportDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentDetailsPreviousMuleVersion) GetEndOfSupportDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndOfSupportDate) {
		return nil, false
	}
	return o.EndOfSupportDate, true
}

// HasEndOfSupportDate returns a boolean if a field has been set.
func (o *DeploymentDetailsPreviousMuleVersion) HasEndOfSupportDate() bool {
	if o != nil && !IsNil(o.EndOfSupportDate) {
		return true
	}

	return false
}

// SetEndOfSupportDate gets a reference to the given int64 and assigns it to the EndOfSupportDate field.
func (o *DeploymentDetailsPreviousMuleVersion) SetEndOfSupportDate(v int64) {
	o.EndOfSupportDate = &v
}

// GetEndOfLifeDate returns the EndOfLifeDate field value if set, zero value otherwise.
func (o *DeploymentDetailsPreviousMuleVersion) GetEndOfLifeDate() int64 {
	if o == nil || IsNil(o.EndOfLifeDate) {
		var ret int64
		return ret
	}
	return *o.EndOfLifeDate
}

// GetEndOfLifeDateOk returns a tuple with the EndOfLifeDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentDetailsPreviousMuleVersion) GetEndOfLifeDateOk() (*int64, bool) {
	if o == nil || IsNil(o.EndOfLifeDate) {
		return nil, false
	}
	return o.EndOfLifeDate, true
}

// HasEndOfLifeDate returns a boolean if a field has been set.
func (o *DeploymentDetailsPreviousMuleVersion) HasEndOfLifeDate() bool {
	if o != nil && !IsNil(o.EndOfLifeDate) {
		return true
	}

	return false
}

// SetEndOfLifeDate gets a reference to the given int64 and assigns it to the EndOfLifeDate field.
func (o *DeploymentDetailsPreviousMuleVersion) SetEndOfLifeDate(v int64) {
	o.EndOfLifeDate = &v
}

// GetUpdateVersion returns the UpdateVersion field value if set, zero value otherwise.
func (o *DeploymentDetailsPreviousMuleVersion) GetUpdateVersion() string {
	if o == nil || IsNil(o.UpdateVersion) {
		var ret string
		return ret
	}
	return *o.UpdateVersion
}

// GetUpdateVersionOk returns a tuple with the UpdateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentDetailsPreviousMuleVersion) GetUpdateVersionOk() (*string, bool) {
	if o == nil || IsNil(o.UpdateVersion) {
		return nil, false
	}
	return o.UpdateVersion, true
}

// HasUpdateVersion returns a boolean if a field has been set.
func (o *DeploymentDetailsPreviousMuleVersion) HasUpdateVersion() bool {
	if o != nil && !IsNil(o.UpdateVersion) {
		return true
	}

	return false
}

// SetUpdateVersion gets a reference to the given string and assigns it to the UpdateVersion field.
func (o *DeploymentDetailsPreviousMuleVersion) SetUpdateVersion(v string) {
	o.UpdateVersion = &v
}

// GetReleaseChannel returns the ReleaseChannel field value if set, zero value otherwise.
func (o *DeploymentDetailsPreviousMuleVersion) GetReleaseChannel() string {
	if o == nil || IsNil(o.ReleaseChannel) {
		var ret string
		return ret
	}
	return *o.ReleaseChannel
}

// GetReleaseChannelOk returns a tuple with the ReleaseChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentDetailsPreviousMuleVersion) GetReleaseChannelOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseChannel) {
		return nil, false
	}
	return o.ReleaseChannel, true
}

// HasReleaseChannel returns a boolean if a field has been set.
func (o *DeploymentDetailsPreviousMuleVersion) HasReleaseChannel() bool {
	if o != nil && !IsNil(o.ReleaseChannel) {
		return true
	}

	return false
}

// SetReleaseChannel gets a reference to the given string and assigns it to the ReleaseChannel field.
func (o *DeploymentDetailsPreviousMuleVersion) SetReleaseChannel(v string) {
	o.ReleaseChannel = &v
}

// GetJavaVersion returns the JavaVersion field value if set, zero value otherwise.
func (o *DeploymentDetailsPreviousMuleVersion) GetJavaVersion() string {
	if o == nil || IsNil(o.JavaVersion) {
		var ret string
		return ret
	}
	return *o.JavaVersion
}

// GetJavaVersionOk returns a tuple with the JavaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentDetailsPreviousMuleVersion) GetJavaVersionOk() (*string, bool) {
	if o == nil || IsNil(o.JavaVersion) {
		return nil, false
	}
	return o.JavaVersion, true
}

// HasJavaVersion returns a boolean if a field has been set.
func (o *DeploymentDetailsPreviousMuleVersion) HasJavaVersion() bool {
	if o != nil && !IsNil(o.JavaVersion) {
		return true
	}

	return false
}

// SetJavaVersion gets a reference to the given string and assigns it to the JavaVersion field.
func (o *DeploymentDetailsPreviousMuleVersion) SetJavaVersion(v string) {
	o.JavaVersion = &v
}

func (o DeploymentDetailsPreviousMuleVersion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentDetailsPreviousMuleVersion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.UpdateId) {
		toSerialize["updateId"] = o.UpdateId
	}
	if !IsNil(o.EndOfSupportDate) {
		toSerialize["endOfSupportDate"] = o.EndOfSupportDate
	}
	if !IsNil(o.EndOfLifeDate) {
		toSerialize["endOfLifeDate"] = o.EndOfLifeDate
	}
	if !IsNil(o.UpdateVersion) {
		toSerialize["updateVersion"] = o.UpdateVersion
	}
	if !IsNil(o.ReleaseChannel) {
		toSerialize["releaseChannel"] = o.ReleaseChannel
	}
	if !IsNil(o.JavaVersion) {
		toSerialize["javaVersion"] = o.JavaVersion
	}
	return toSerialize, nil
}

type NullableDeploymentDetailsPreviousMuleVersion struct {
	value *DeploymentDetailsPreviousMuleVersion
	isSet bool
}

func (v NullableDeploymentDetailsPreviousMuleVersion) Get() *DeploymentDetailsPreviousMuleVersion {
	return v.value
}

func (v *NullableDeploymentDetailsPreviousMuleVersion) Set(val *DeploymentDetailsPreviousMuleVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentDetailsPreviousMuleVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentDetailsPreviousMuleVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentDetailsPreviousMuleVersion(val *DeploymentDetailsPreviousMuleVersion) *NullableDeploymentDetailsPreviousMuleVersion {
	return &NullableDeploymentDetailsPreviousMuleVersion{value: val, isSet: true}
}

func (v NullableDeploymentDetailsPreviousMuleVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentDetailsPreviousMuleVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


