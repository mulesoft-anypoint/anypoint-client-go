/*
Deployment v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 1.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the RuntimeLatestUpdateFlagsAmiVersionData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuntimeLatestUpdateFlagsAmiVersionData{}

// RuntimeLatestUpdateFlagsAmiVersionData struct for RuntimeLatestUpdateFlagsAmiVersionData
type RuntimeLatestUpdateFlagsAmiVersionData struct {
	Chextension *string `json:"ch,extension,omitempty"`
	Muleversion *string `json:"mule,version,omitempty"`
	Objectstorepluginartifact *string `json:"objectstore,plugin,artifact,omitempty"`
	Ningversion *string `json:"ning,version,omitempty"`
	MuledistroartifactId *string `json:"mule,distro,artifactId,omitempty"`
	Mozartmonitoringserviceversion *string `json:"mozart,monitoring,service,version,omitempty"`
	Muleagentmetricscollectorversion *string `json:"mule,agent,metrics,collector,version,omitempty"`
	Muledistroversion *string `json:"mule,distro,version,omitempty"`
	Httpcomponentshttpclientversion *string `json:"httpcomponents,httpclient,version,omitempty"`
	Muleagentextensionversion *string `json:"mule,agent,extension,version,omitempty"`
	OutputDirectorypluginsagentch *string `json:"outputDirectory,plugins,agent,ch,omitempty"`
	Munitversion *string `json:"munit,version,omitempty"`
	OutputDirectorylibmule *string `json:"outputDirectory,lib,mule,omitempty"`
	Objectstorepluginmule3version *string `json:"objectstore,plugin,mule3,version,omitempty"`
	Cloudhubmuleagentextensionversion *string `json:"cloudhub,mule,agent,extension,version,omitempty"`
	MuledistrogroupId *string `json:"mule,distro,groupId,omitempty"`
	Nettytypesafeversion *string `json:"netty,typesafe,version,omitempty"`
	Hawtjournalversion *string `json:"hawtjournal,version,omitempty"`
	Licmversion *string `json:"licm,version,omitempty"`
	CloudhubCommonversion *string `json:"cloudhub-common,version,omitempty"`
	Muleextensionversion *string `json:"mule,extension,version,omitempty"`
	ClmserverId *string `json:"clm,serverId,omitempty"`
	CloudhubPlatformartifact *string `json:"cloudhub-platform,artifact,omitempty"`
	CloudhubLogAppenderversion *string `json:"cloudhub-log-appender,version,omitempty"`
	Mulepatchversion *string `json:"mule,patch,version,omitempty"`
	OutputDirectorychlogging *string `json:"outputDirectory,ch,logging,omitempty"`
	AwsJavaSdkversion *string `json:"aws-java-sdk,version,omitempty"`
	OutputDirectoryservices *string `json:"outputDirectory,services,omitempty"`
	OutputDirectorylibpatches *string `json:"outputDirectory,lib,patches,omitempty"`
	Agws3providerversion *string `json:"agw,s3,provider,version,omitempty"`
	Quartzversion *string `json:"quartz,version,omitempty"`
	Nettyversion *string `json:"netty,version,omitempty"`
	Mozartagentserviceversion *string `json:"mozart,agent,service,version,omitempty"`
	OutputDirectorylibalternative *string `json:"outputDirectory,lib,alternative,omitempty"`
	BranchFullName *string `json:"branchFullName,omitempty"`
	Muleversionfolder *string `json:"mule,version,folder,omitempty"`
	Distroversionextension *string `json:"distro,version,extension,omitempty"`
	CommonJacksonversion *string `json:"common-jackson,version,omitempty"`
	LicensePath *string `json:"licensePath,omitempty"`
	Objectstorepluginmule4version *string `json:"objectstore,plugin,mule4,version,omitempty"`
	OutputDirectorylibboot *string `json:"outputDirectory,lib,boot,omitempty"`
	Hawtbufversion *string `json:"hawtbuf,version,omitempty"`
	OutputDirectorylibartifactPatches *string `json:"outputDirectory,lib,artifact-patches,omitempty"`
	BranchType *string `json:"branchType,omitempty"`
	Jasyptversion *string `json:"jasypt,version,omitempty"`
	Munitagentserviceversion *string `json:"munit,agent,service,version,omitempty"`
	Muledistrotargetdirectory *string `json:"mule,distro,target,directory,omitempty"`
	Muleagentversion *string `json:"mule,agent,version,omitempty"`
	BranchDetail *string `json:"branchDetail,omitempty"`
	Httpcomponentshttpcoreversion *string `json:"httpcomponents,httpcore,version,omitempty"`
	OutputDirectorylibuser *string `json:"outputDirectory,lib,user,omitempty"`
	Objectstorepluginversion *string `json:"objectstore,plugin,version,omitempty"`
	Objectstoreplugintype *string `json:"objectstore,plugin,type,omitempty"`
	Objectstorepluginclassifier *string `json:"objectstore,plugin,classifier,omitempty"`
	OutputDirectorybin *string `json:"outputDirectory,bin,omitempty"`
	Muleversionsuffix *string `json:"mule,version,suffix,omitempty"`
	OutputDirectorylibopt *string `json:"outputDirectory,lib,opt,omitempty"`
	OutputDirectoryplugins *string `json:"outputDirectory,plugins,omitempty"`
	ClmserverUrl *string `json:"clm,serverUrl,omitempty"`
	Muleunpackdirectory *string `json:"mule,unpack,directory,omitempty"`
	ClmapplicationId *string `json:"clm,applicationId,omitempty"`
}

// NewRuntimeLatestUpdateFlagsAmiVersionData instantiates a new RuntimeLatestUpdateFlagsAmiVersionData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuntimeLatestUpdateFlagsAmiVersionData() *RuntimeLatestUpdateFlagsAmiVersionData {
	this := RuntimeLatestUpdateFlagsAmiVersionData{}
	return &this
}

// NewRuntimeLatestUpdateFlagsAmiVersionDataWithDefaults instantiates a new RuntimeLatestUpdateFlagsAmiVersionData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuntimeLatestUpdateFlagsAmiVersionDataWithDefaults() *RuntimeLatestUpdateFlagsAmiVersionData {
	this := RuntimeLatestUpdateFlagsAmiVersionData{}
	return &this
}

// GetChextension returns the Chextension field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetChextension() string {
	if o == nil || IsNil(o.Chextension) {
		var ret string
		return ret
	}
	return *o.Chextension
}

// GetChextensionOk returns a tuple with the Chextension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetChextensionOk() (*string, bool) {
	if o == nil || IsNil(o.Chextension) {
		return nil, false
	}
	return o.Chextension, true
}

// HasChextension returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasChextension() bool {
	if o != nil && !IsNil(o.Chextension) {
		return true
	}

	return false
}

// SetChextension gets a reference to the given string and assigns it to the Chextension field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetChextension(v string) {
	o.Chextension = &v
}

// GetMuleversion returns the Muleversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleversion() string {
	if o == nil || IsNil(o.Muleversion) {
		var ret string
		return ret
	}
	return *o.Muleversion
}

// GetMuleversionOk returns a tuple with the Muleversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleversionOk() (*string, bool) {
	if o == nil || IsNil(o.Muleversion) {
		return nil, false
	}
	return o.Muleversion, true
}

// HasMuleversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleversion() bool {
	if o != nil && !IsNil(o.Muleversion) {
		return true
	}

	return false
}

// SetMuleversion gets a reference to the given string and assigns it to the Muleversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleversion(v string) {
	o.Muleversion = &v
}

// GetObjectstorepluginartifact returns the Objectstorepluginartifact field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginartifact() string {
	if o == nil || IsNil(o.Objectstorepluginartifact) {
		var ret string
		return ret
	}
	return *o.Objectstorepluginartifact
}

// GetObjectstorepluginartifactOk returns a tuple with the Objectstorepluginartifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginartifactOk() (*string, bool) {
	if o == nil || IsNil(o.Objectstorepluginartifact) {
		return nil, false
	}
	return o.Objectstorepluginartifact, true
}

// HasObjectstorepluginartifact returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasObjectstorepluginartifact() bool {
	if o != nil && !IsNil(o.Objectstorepluginartifact) {
		return true
	}

	return false
}

// SetObjectstorepluginartifact gets a reference to the given string and assigns it to the Objectstorepluginartifact field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetObjectstorepluginartifact(v string) {
	o.Objectstorepluginartifact = &v
}

// GetNingversion returns the Ningversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetNingversion() string {
	if o == nil || IsNil(o.Ningversion) {
		var ret string
		return ret
	}
	return *o.Ningversion
}

// GetNingversionOk returns a tuple with the Ningversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetNingversionOk() (*string, bool) {
	if o == nil || IsNil(o.Ningversion) {
		return nil, false
	}
	return o.Ningversion, true
}

// HasNingversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasNingversion() bool {
	if o != nil && !IsNil(o.Ningversion) {
		return true
	}

	return false
}

// SetNingversion gets a reference to the given string and assigns it to the Ningversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetNingversion(v string) {
	o.Ningversion = &v
}

// GetMuledistroartifactId returns the MuledistroartifactId field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistroartifactId() string {
	if o == nil || IsNil(o.MuledistroartifactId) {
		var ret string
		return ret
	}
	return *o.MuledistroartifactId
}

// GetMuledistroartifactIdOk returns a tuple with the MuledistroartifactId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistroartifactIdOk() (*string, bool) {
	if o == nil || IsNil(o.MuledistroartifactId) {
		return nil, false
	}
	return o.MuledistroartifactId, true
}

// HasMuledistroartifactId returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuledistroartifactId() bool {
	if o != nil && !IsNil(o.MuledistroartifactId) {
		return true
	}

	return false
}

// SetMuledistroartifactId gets a reference to the given string and assigns it to the MuledistroartifactId field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuledistroartifactId(v string) {
	o.MuledistroartifactId = &v
}

// GetMozartmonitoringserviceversion returns the Mozartmonitoringserviceversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMozartmonitoringserviceversion() string {
	if o == nil || IsNil(o.Mozartmonitoringserviceversion) {
		var ret string
		return ret
	}
	return *o.Mozartmonitoringserviceversion
}

// GetMozartmonitoringserviceversionOk returns a tuple with the Mozartmonitoringserviceversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMozartmonitoringserviceversionOk() (*string, bool) {
	if o == nil || IsNil(o.Mozartmonitoringserviceversion) {
		return nil, false
	}
	return o.Mozartmonitoringserviceversion, true
}

// HasMozartmonitoringserviceversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMozartmonitoringserviceversion() bool {
	if o != nil && !IsNil(o.Mozartmonitoringserviceversion) {
		return true
	}

	return false
}

// SetMozartmonitoringserviceversion gets a reference to the given string and assigns it to the Mozartmonitoringserviceversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMozartmonitoringserviceversion(v string) {
	o.Mozartmonitoringserviceversion = &v
}

// GetMuleagentmetricscollectorversion returns the Muleagentmetricscollectorversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleagentmetricscollectorversion() string {
	if o == nil || IsNil(o.Muleagentmetricscollectorversion) {
		var ret string
		return ret
	}
	return *o.Muleagentmetricscollectorversion
}

// GetMuleagentmetricscollectorversionOk returns a tuple with the Muleagentmetricscollectorversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleagentmetricscollectorversionOk() (*string, bool) {
	if o == nil || IsNil(o.Muleagentmetricscollectorversion) {
		return nil, false
	}
	return o.Muleagentmetricscollectorversion, true
}

// HasMuleagentmetricscollectorversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleagentmetricscollectorversion() bool {
	if o != nil && !IsNil(o.Muleagentmetricscollectorversion) {
		return true
	}

	return false
}

// SetMuleagentmetricscollectorversion gets a reference to the given string and assigns it to the Muleagentmetricscollectorversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleagentmetricscollectorversion(v string) {
	o.Muleagentmetricscollectorversion = &v
}

// GetMuledistroversion returns the Muledistroversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistroversion() string {
	if o == nil || IsNil(o.Muledistroversion) {
		var ret string
		return ret
	}
	return *o.Muledistroversion
}

// GetMuledistroversionOk returns a tuple with the Muledistroversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistroversionOk() (*string, bool) {
	if o == nil || IsNil(o.Muledistroversion) {
		return nil, false
	}
	return o.Muledistroversion, true
}

// HasMuledistroversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuledistroversion() bool {
	if o != nil && !IsNil(o.Muledistroversion) {
		return true
	}

	return false
}

// SetMuledistroversion gets a reference to the given string and assigns it to the Muledistroversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuledistroversion(v string) {
	o.Muledistroversion = &v
}

// GetHttpcomponentshttpclientversion returns the Httpcomponentshttpclientversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHttpcomponentshttpclientversion() string {
	if o == nil || IsNil(o.Httpcomponentshttpclientversion) {
		var ret string
		return ret
	}
	return *o.Httpcomponentshttpclientversion
}

// GetHttpcomponentshttpclientversionOk returns a tuple with the Httpcomponentshttpclientversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHttpcomponentshttpclientversionOk() (*string, bool) {
	if o == nil || IsNil(o.Httpcomponentshttpclientversion) {
		return nil, false
	}
	return o.Httpcomponentshttpclientversion, true
}

// HasHttpcomponentshttpclientversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasHttpcomponentshttpclientversion() bool {
	if o != nil && !IsNil(o.Httpcomponentshttpclientversion) {
		return true
	}

	return false
}

// SetHttpcomponentshttpclientversion gets a reference to the given string and assigns it to the Httpcomponentshttpclientversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetHttpcomponentshttpclientversion(v string) {
	o.Httpcomponentshttpclientversion = &v
}

// GetMuleagentextensionversion returns the Muleagentextensionversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleagentextensionversion() string {
	if o == nil || IsNil(o.Muleagentextensionversion) {
		var ret string
		return ret
	}
	return *o.Muleagentextensionversion
}

// GetMuleagentextensionversionOk returns a tuple with the Muleagentextensionversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleagentextensionversionOk() (*string, bool) {
	if o == nil || IsNil(o.Muleagentextensionversion) {
		return nil, false
	}
	return o.Muleagentextensionversion, true
}

// HasMuleagentextensionversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleagentextensionversion() bool {
	if o != nil && !IsNil(o.Muleagentextensionversion) {
		return true
	}

	return false
}

// SetMuleagentextensionversion gets a reference to the given string and assigns it to the Muleagentextensionversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleagentextensionversion(v string) {
	o.Muleagentextensionversion = &v
}

// GetOutputDirectorypluginsagentch returns the OutputDirectorypluginsagentch field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorypluginsagentch() string {
	if o == nil || IsNil(o.OutputDirectorypluginsagentch) {
		var ret string
		return ret
	}
	return *o.OutputDirectorypluginsagentch
}

// GetOutputDirectorypluginsagentchOk returns a tuple with the OutputDirectorypluginsagentch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorypluginsagentchOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorypluginsagentch) {
		return nil, false
	}
	return o.OutputDirectorypluginsagentch, true
}

// HasOutputDirectorypluginsagentch returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorypluginsagentch() bool {
	if o != nil && !IsNil(o.OutputDirectorypluginsagentch) {
		return true
	}

	return false
}

// SetOutputDirectorypluginsagentch gets a reference to the given string and assigns it to the OutputDirectorypluginsagentch field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorypluginsagentch(v string) {
	o.OutputDirectorypluginsagentch = &v
}

// GetMunitversion returns the Munitversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMunitversion() string {
	if o == nil || IsNil(o.Munitversion) {
		var ret string
		return ret
	}
	return *o.Munitversion
}

// GetMunitversionOk returns a tuple with the Munitversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMunitversionOk() (*string, bool) {
	if o == nil || IsNil(o.Munitversion) {
		return nil, false
	}
	return o.Munitversion, true
}

// HasMunitversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMunitversion() bool {
	if o != nil && !IsNil(o.Munitversion) {
		return true
	}

	return false
}

// SetMunitversion gets a reference to the given string and assigns it to the Munitversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMunitversion(v string) {
	o.Munitversion = &v
}

// GetOutputDirectorylibmule returns the OutputDirectorylibmule field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibmule() string {
	if o == nil || IsNil(o.OutputDirectorylibmule) {
		var ret string
		return ret
	}
	return *o.OutputDirectorylibmule
}

// GetOutputDirectorylibmuleOk returns a tuple with the OutputDirectorylibmule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibmuleOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorylibmule) {
		return nil, false
	}
	return o.OutputDirectorylibmule, true
}

// HasOutputDirectorylibmule returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorylibmule() bool {
	if o != nil && !IsNil(o.OutputDirectorylibmule) {
		return true
	}

	return false
}

// SetOutputDirectorylibmule gets a reference to the given string and assigns it to the OutputDirectorylibmule field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorylibmule(v string) {
	o.OutputDirectorylibmule = &v
}

// GetObjectstorepluginmule3version returns the Objectstorepluginmule3version field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginmule3version() string {
	if o == nil || IsNil(o.Objectstorepluginmule3version) {
		var ret string
		return ret
	}
	return *o.Objectstorepluginmule3version
}

// GetObjectstorepluginmule3versionOk returns a tuple with the Objectstorepluginmule3version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginmule3versionOk() (*string, bool) {
	if o == nil || IsNil(o.Objectstorepluginmule3version) {
		return nil, false
	}
	return o.Objectstorepluginmule3version, true
}

// HasObjectstorepluginmule3version returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasObjectstorepluginmule3version() bool {
	if o != nil && !IsNil(o.Objectstorepluginmule3version) {
		return true
	}

	return false
}

// SetObjectstorepluginmule3version gets a reference to the given string and assigns it to the Objectstorepluginmule3version field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetObjectstorepluginmule3version(v string) {
	o.Objectstorepluginmule3version = &v
}

// GetCloudhubmuleagentextensionversion returns the Cloudhubmuleagentextensionversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubmuleagentextensionversion() string {
	if o == nil || IsNil(o.Cloudhubmuleagentextensionversion) {
		var ret string
		return ret
	}
	return *o.Cloudhubmuleagentextensionversion
}

// GetCloudhubmuleagentextensionversionOk returns a tuple with the Cloudhubmuleagentextensionversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubmuleagentextensionversionOk() (*string, bool) {
	if o == nil || IsNil(o.Cloudhubmuleagentextensionversion) {
		return nil, false
	}
	return o.Cloudhubmuleagentextensionversion, true
}

// HasCloudhubmuleagentextensionversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasCloudhubmuleagentextensionversion() bool {
	if o != nil && !IsNil(o.Cloudhubmuleagentextensionversion) {
		return true
	}

	return false
}

// SetCloudhubmuleagentextensionversion gets a reference to the given string and assigns it to the Cloudhubmuleagentextensionversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetCloudhubmuleagentextensionversion(v string) {
	o.Cloudhubmuleagentextensionversion = &v
}

// GetMuledistrogroupId returns the MuledistrogroupId field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistrogroupId() string {
	if o == nil || IsNil(o.MuledistrogroupId) {
		var ret string
		return ret
	}
	return *o.MuledistrogroupId
}

// GetMuledistrogroupIdOk returns a tuple with the MuledistrogroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistrogroupIdOk() (*string, bool) {
	if o == nil || IsNil(o.MuledistrogroupId) {
		return nil, false
	}
	return o.MuledistrogroupId, true
}

// HasMuledistrogroupId returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuledistrogroupId() bool {
	if o != nil && !IsNil(o.MuledistrogroupId) {
		return true
	}

	return false
}

// SetMuledistrogroupId gets a reference to the given string and assigns it to the MuledistrogroupId field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuledistrogroupId(v string) {
	o.MuledistrogroupId = &v
}

// GetNettytypesafeversion returns the Nettytypesafeversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetNettytypesafeversion() string {
	if o == nil || IsNil(o.Nettytypesafeversion) {
		var ret string
		return ret
	}
	return *o.Nettytypesafeversion
}

// GetNettytypesafeversionOk returns a tuple with the Nettytypesafeversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetNettytypesafeversionOk() (*string, bool) {
	if o == nil || IsNil(o.Nettytypesafeversion) {
		return nil, false
	}
	return o.Nettytypesafeversion, true
}

// HasNettytypesafeversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasNettytypesafeversion() bool {
	if o != nil && !IsNil(o.Nettytypesafeversion) {
		return true
	}

	return false
}

// SetNettytypesafeversion gets a reference to the given string and assigns it to the Nettytypesafeversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetNettytypesafeversion(v string) {
	o.Nettytypesafeversion = &v
}

// GetHawtjournalversion returns the Hawtjournalversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHawtjournalversion() string {
	if o == nil || IsNil(o.Hawtjournalversion) {
		var ret string
		return ret
	}
	return *o.Hawtjournalversion
}

// GetHawtjournalversionOk returns a tuple with the Hawtjournalversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHawtjournalversionOk() (*string, bool) {
	if o == nil || IsNil(o.Hawtjournalversion) {
		return nil, false
	}
	return o.Hawtjournalversion, true
}

// HasHawtjournalversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasHawtjournalversion() bool {
	if o != nil && !IsNil(o.Hawtjournalversion) {
		return true
	}

	return false
}

// SetHawtjournalversion gets a reference to the given string and assigns it to the Hawtjournalversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetHawtjournalversion(v string) {
	o.Hawtjournalversion = &v
}

// GetLicmversion returns the Licmversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetLicmversion() string {
	if o == nil || IsNil(o.Licmversion) {
		var ret string
		return ret
	}
	return *o.Licmversion
}

// GetLicmversionOk returns a tuple with the Licmversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetLicmversionOk() (*string, bool) {
	if o == nil || IsNil(o.Licmversion) {
		return nil, false
	}
	return o.Licmversion, true
}

// HasLicmversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasLicmversion() bool {
	if o != nil && !IsNil(o.Licmversion) {
		return true
	}

	return false
}

// SetLicmversion gets a reference to the given string and assigns it to the Licmversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetLicmversion(v string) {
	o.Licmversion = &v
}

// GetCloudhubCommonversion returns the CloudhubCommonversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubCommonversion() string {
	if o == nil || IsNil(o.CloudhubCommonversion) {
		var ret string
		return ret
	}
	return *o.CloudhubCommonversion
}

// GetCloudhubCommonversionOk returns a tuple with the CloudhubCommonversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubCommonversionOk() (*string, bool) {
	if o == nil || IsNil(o.CloudhubCommonversion) {
		return nil, false
	}
	return o.CloudhubCommonversion, true
}

// HasCloudhubCommonversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasCloudhubCommonversion() bool {
	if o != nil && !IsNil(o.CloudhubCommonversion) {
		return true
	}

	return false
}

// SetCloudhubCommonversion gets a reference to the given string and assigns it to the CloudhubCommonversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetCloudhubCommonversion(v string) {
	o.CloudhubCommonversion = &v
}

// GetMuleextensionversion returns the Muleextensionversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleextensionversion() string {
	if o == nil || IsNil(o.Muleextensionversion) {
		var ret string
		return ret
	}
	return *o.Muleextensionversion
}

// GetMuleextensionversionOk returns a tuple with the Muleextensionversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleextensionversionOk() (*string, bool) {
	if o == nil || IsNil(o.Muleextensionversion) {
		return nil, false
	}
	return o.Muleextensionversion, true
}

// HasMuleextensionversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleextensionversion() bool {
	if o != nil && !IsNil(o.Muleextensionversion) {
		return true
	}

	return false
}

// SetMuleextensionversion gets a reference to the given string and assigns it to the Muleextensionversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleextensionversion(v string) {
	o.Muleextensionversion = &v
}

// GetClmserverId returns the ClmserverId field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetClmserverId() string {
	if o == nil || IsNil(o.ClmserverId) {
		var ret string
		return ret
	}
	return *o.ClmserverId
}

// GetClmserverIdOk returns a tuple with the ClmserverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetClmserverIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClmserverId) {
		return nil, false
	}
	return o.ClmserverId, true
}

// HasClmserverId returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasClmserverId() bool {
	if o != nil && !IsNil(o.ClmserverId) {
		return true
	}

	return false
}

// SetClmserverId gets a reference to the given string and assigns it to the ClmserverId field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetClmserverId(v string) {
	o.ClmserverId = &v
}

// GetCloudhubPlatformartifact returns the CloudhubPlatformartifact field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubPlatformartifact() string {
	if o == nil || IsNil(o.CloudhubPlatformartifact) {
		var ret string
		return ret
	}
	return *o.CloudhubPlatformartifact
}

// GetCloudhubPlatformartifactOk returns a tuple with the CloudhubPlatformartifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubPlatformartifactOk() (*string, bool) {
	if o == nil || IsNil(o.CloudhubPlatformartifact) {
		return nil, false
	}
	return o.CloudhubPlatformartifact, true
}

// HasCloudhubPlatformartifact returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasCloudhubPlatformartifact() bool {
	if o != nil && !IsNil(o.CloudhubPlatformartifact) {
		return true
	}

	return false
}

// SetCloudhubPlatformartifact gets a reference to the given string and assigns it to the CloudhubPlatformartifact field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetCloudhubPlatformartifact(v string) {
	o.CloudhubPlatformartifact = &v
}

// GetCloudhubLogAppenderversion returns the CloudhubLogAppenderversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubLogAppenderversion() string {
	if o == nil || IsNil(o.CloudhubLogAppenderversion) {
		var ret string
		return ret
	}
	return *o.CloudhubLogAppenderversion
}

// GetCloudhubLogAppenderversionOk returns a tuple with the CloudhubLogAppenderversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCloudhubLogAppenderversionOk() (*string, bool) {
	if o == nil || IsNil(o.CloudhubLogAppenderversion) {
		return nil, false
	}
	return o.CloudhubLogAppenderversion, true
}

// HasCloudhubLogAppenderversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasCloudhubLogAppenderversion() bool {
	if o != nil && !IsNil(o.CloudhubLogAppenderversion) {
		return true
	}

	return false
}

// SetCloudhubLogAppenderversion gets a reference to the given string and assigns it to the CloudhubLogAppenderversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetCloudhubLogAppenderversion(v string) {
	o.CloudhubLogAppenderversion = &v
}

// GetMulepatchversion returns the Mulepatchversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMulepatchversion() string {
	if o == nil || IsNil(o.Mulepatchversion) {
		var ret string
		return ret
	}
	return *o.Mulepatchversion
}

// GetMulepatchversionOk returns a tuple with the Mulepatchversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMulepatchversionOk() (*string, bool) {
	if o == nil || IsNil(o.Mulepatchversion) {
		return nil, false
	}
	return o.Mulepatchversion, true
}

// HasMulepatchversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMulepatchversion() bool {
	if o != nil && !IsNil(o.Mulepatchversion) {
		return true
	}

	return false
}

// SetMulepatchversion gets a reference to the given string and assigns it to the Mulepatchversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMulepatchversion(v string) {
	o.Mulepatchversion = &v
}

// GetOutputDirectorychlogging returns the OutputDirectorychlogging field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorychlogging() string {
	if o == nil || IsNil(o.OutputDirectorychlogging) {
		var ret string
		return ret
	}
	return *o.OutputDirectorychlogging
}

// GetOutputDirectorychloggingOk returns a tuple with the OutputDirectorychlogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorychloggingOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorychlogging) {
		return nil, false
	}
	return o.OutputDirectorychlogging, true
}

// HasOutputDirectorychlogging returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorychlogging() bool {
	if o != nil && !IsNil(o.OutputDirectorychlogging) {
		return true
	}

	return false
}

// SetOutputDirectorychlogging gets a reference to the given string and assigns it to the OutputDirectorychlogging field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorychlogging(v string) {
	o.OutputDirectorychlogging = &v
}

// GetAwsJavaSdkversion returns the AwsJavaSdkversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetAwsJavaSdkversion() string {
	if o == nil || IsNil(o.AwsJavaSdkversion) {
		var ret string
		return ret
	}
	return *o.AwsJavaSdkversion
}

// GetAwsJavaSdkversionOk returns a tuple with the AwsJavaSdkversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetAwsJavaSdkversionOk() (*string, bool) {
	if o == nil || IsNil(o.AwsJavaSdkversion) {
		return nil, false
	}
	return o.AwsJavaSdkversion, true
}

// HasAwsJavaSdkversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasAwsJavaSdkversion() bool {
	if o != nil && !IsNil(o.AwsJavaSdkversion) {
		return true
	}

	return false
}

// SetAwsJavaSdkversion gets a reference to the given string and assigns it to the AwsJavaSdkversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetAwsJavaSdkversion(v string) {
	o.AwsJavaSdkversion = &v
}

// GetOutputDirectoryservices returns the OutputDirectoryservices field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectoryservices() string {
	if o == nil || IsNil(o.OutputDirectoryservices) {
		var ret string
		return ret
	}
	return *o.OutputDirectoryservices
}

// GetOutputDirectoryservicesOk returns a tuple with the OutputDirectoryservices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectoryservicesOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectoryservices) {
		return nil, false
	}
	return o.OutputDirectoryservices, true
}

// HasOutputDirectoryservices returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectoryservices() bool {
	if o != nil && !IsNil(o.OutputDirectoryservices) {
		return true
	}

	return false
}

// SetOutputDirectoryservices gets a reference to the given string and assigns it to the OutputDirectoryservices field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectoryservices(v string) {
	o.OutputDirectoryservices = &v
}

// GetOutputDirectorylibpatches returns the OutputDirectorylibpatches field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibpatches() string {
	if o == nil || IsNil(o.OutputDirectorylibpatches) {
		var ret string
		return ret
	}
	return *o.OutputDirectorylibpatches
}

// GetOutputDirectorylibpatchesOk returns a tuple with the OutputDirectorylibpatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibpatchesOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorylibpatches) {
		return nil, false
	}
	return o.OutputDirectorylibpatches, true
}

// HasOutputDirectorylibpatches returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorylibpatches() bool {
	if o != nil && !IsNil(o.OutputDirectorylibpatches) {
		return true
	}

	return false
}

// SetOutputDirectorylibpatches gets a reference to the given string and assigns it to the OutputDirectorylibpatches field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorylibpatches(v string) {
	o.OutputDirectorylibpatches = &v
}

// GetAgws3providerversion returns the Agws3providerversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetAgws3providerversion() string {
	if o == nil || IsNil(o.Agws3providerversion) {
		var ret string
		return ret
	}
	return *o.Agws3providerversion
}

// GetAgws3providerversionOk returns a tuple with the Agws3providerversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetAgws3providerversionOk() (*string, bool) {
	if o == nil || IsNil(o.Agws3providerversion) {
		return nil, false
	}
	return o.Agws3providerversion, true
}

// HasAgws3providerversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasAgws3providerversion() bool {
	if o != nil && !IsNil(o.Agws3providerversion) {
		return true
	}

	return false
}

// SetAgws3providerversion gets a reference to the given string and assigns it to the Agws3providerversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetAgws3providerversion(v string) {
	o.Agws3providerversion = &v
}

// GetQuartzversion returns the Quartzversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetQuartzversion() string {
	if o == nil || IsNil(o.Quartzversion) {
		var ret string
		return ret
	}
	return *o.Quartzversion
}

// GetQuartzversionOk returns a tuple with the Quartzversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetQuartzversionOk() (*string, bool) {
	if o == nil || IsNil(o.Quartzversion) {
		return nil, false
	}
	return o.Quartzversion, true
}

// HasQuartzversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasQuartzversion() bool {
	if o != nil && !IsNil(o.Quartzversion) {
		return true
	}

	return false
}

// SetQuartzversion gets a reference to the given string and assigns it to the Quartzversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetQuartzversion(v string) {
	o.Quartzversion = &v
}

// GetNettyversion returns the Nettyversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetNettyversion() string {
	if o == nil || IsNil(o.Nettyversion) {
		var ret string
		return ret
	}
	return *o.Nettyversion
}

// GetNettyversionOk returns a tuple with the Nettyversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetNettyversionOk() (*string, bool) {
	if o == nil || IsNil(o.Nettyversion) {
		return nil, false
	}
	return o.Nettyversion, true
}

// HasNettyversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasNettyversion() bool {
	if o != nil && !IsNil(o.Nettyversion) {
		return true
	}

	return false
}

// SetNettyversion gets a reference to the given string and assigns it to the Nettyversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetNettyversion(v string) {
	o.Nettyversion = &v
}

// GetMozartagentserviceversion returns the Mozartagentserviceversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMozartagentserviceversion() string {
	if o == nil || IsNil(o.Mozartagentserviceversion) {
		var ret string
		return ret
	}
	return *o.Mozartagentserviceversion
}

// GetMozartagentserviceversionOk returns a tuple with the Mozartagentserviceversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMozartagentserviceversionOk() (*string, bool) {
	if o == nil || IsNil(o.Mozartagentserviceversion) {
		return nil, false
	}
	return o.Mozartagentserviceversion, true
}

// HasMozartagentserviceversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMozartagentserviceversion() bool {
	if o != nil && !IsNil(o.Mozartagentserviceversion) {
		return true
	}

	return false
}

// SetMozartagentserviceversion gets a reference to the given string and assigns it to the Mozartagentserviceversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMozartagentserviceversion(v string) {
	o.Mozartagentserviceversion = &v
}

// GetOutputDirectorylibalternative returns the OutputDirectorylibalternative field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibalternative() string {
	if o == nil || IsNil(o.OutputDirectorylibalternative) {
		var ret string
		return ret
	}
	return *o.OutputDirectorylibalternative
}

// GetOutputDirectorylibalternativeOk returns a tuple with the OutputDirectorylibalternative field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibalternativeOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorylibalternative) {
		return nil, false
	}
	return o.OutputDirectorylibalternative, true
}

// HasOutputDirectorylibalternative returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorylibalternative() bool {
	if o != nil && !IsNil(o.OutputDirectorylibalternative) {
		return true
	}

	return false
}

// SetOutputDirectorylibalternative gets a reference to the given string and assigns it to the OutputDirectorylibalternative field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorylibalternative(v string) {
	o.OutputDirectorylibalternative = &v
}

// GetBranchFullName returns the BranchFullName field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetBranchFullName() string {
	if o == nil || IsNil(o.BranchFullName) {
		var ret string
		return ret
	}
	return *o.BranchFullName
}

// GetBranchFullNameOk returns a tuple with the BranchFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetBranchFullNameOk() (*string, bool) {
	if o == nil || IsNil(o.BranchFullName) {
		return nil, false
	}
	return o.BranchFullName, true
}

// HasBranchFullName returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasBranchFullName() bool {
	if o != nil && !IsNil(o.BranchFullName) {
		return true
	}

	return false
}

// SetBranchFullName gets a reference to the given string and assigns it to the BranchFullName field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetBranchFullName(v string) {
	o.BranchFullName = &v
}

// GetMuleversionfolder returns the Muleversionfolder field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleversionfolder() string {
	if o == nil || IsNil(o.Muleversionfolder) {
		var ret string
		return ret
	}
	return *o.Muleversionfolder
}

// GetMuleversionfolderOk returns a tuple with the Muleversionfolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleversionfolderOk() (*string, bool) {
	if o == nil || IsNil(o.Muleversionfolder) {
		return nil, false
	}
	return o.Muleversionfolder, true
}

// HasMuleversionfolder returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleversionfolder() bool {
	if o != nil && !IsNil(o.Muleversionfolder) {
		return true
	}

	return false
}

// SetMuleversionfolder gets a reference to the given string and assigns it to the Muleversionfolder field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleversionfolder(v string) {
	o.Muleversionfolder = &v
}

// GetDistroversionextension returns the Distroversionextension field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetDistroversionextension() string {
	if o == nil || IsNil(o.Distroversionextension) {
		var ret string
		return ret
	}
	return *o.Distroversionextension
}

// GetDistroversionextensionOk returns a tuple with the Distroversionextension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetDistroversionextensionOk() (*string, bool) {
	if o == nil || IsNil(o.Distroversionextension) {
		return nil, false
	}
	return o.Distroversionextension, true
}

// HasDistroversionextension returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasDistroversionextension() bool {
	if o != nil && !IsNil(o.Distroversionextension) {
		return true
	}

	return false
}

// SetDistroversionextension gets a reference to the given string and assigns it to the Distroversionextension field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetDistroversionextension(v string) {
	o.Distroversionextension = &v
}

// GetCommonJacksonversion returns the CommonJacksonversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCommonJacksonversion() string {
	if o == nil || IsNil(o.CommonJacksonversion) {
		var ret string
		return ret
	}
	return *o.CommonJacksonversion
}

// GetCommonJacksonversionOk returns a tuple with the CommonJacksonversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetCommonJacksonversionOk() (*string, bool) {
	if o == nil || IsNil(o.CommonJacksonversion) {
		return nil, false
	}
	return o.CommonJacksonversion, true
}

// HasCommonJacksonversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasCommonJacksonversion() bool {
	if o != nil && !IsNil(o.CommonJacksonversion) {
		return true
	}

	return false
}

// SetCommonJacksonversion gets a reference to the given string and assigns it to the CommonJacksonversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetCommonJacksonversion(v string) {
	o.CommonJacksonversion = &v
}

// GetLicensePath returns the LicensePath field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetLicensePath() string {
	if o == nil || IsNil(o.LicensePath) {
		var ret string
		return ret
	}
	return *o.LicensePath
}

// GetLicensePathOk returns a tuple with the LicensePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetLicensePathOk() (*string, bool) {
	if o == nil || IsNil(o.LicensePath) {
		return nil, false
	}
	return o.LicensePath, true
}

// HasLicensePath returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasLicensePath() bool {
	if o != nil && !IsNil(o.LicensePath) {
		return true
	}

	return false
}

// SetLicensePath gets a reference to the given string and assigns it to the LicensePath field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetLicensePath(v string) {
	o.LicensePath = &v
}

// GetObjectstorepluginmule4version returns the Objectstorepluginmule4version field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginmule4version() string {
	if o == nil || IsNil(o.Objectstorepluginmule4version) {
		var ret string
		return ret
	}
	return *o.Objectstorepluginmule4version
}

// GetObjectstorepluginmule4versionOk returns a tuple with the Objectstorepluginmule4version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginmule4versionOk() (*string, bool) {
	if o == nil || IsNil(o.Objectstorepluginmule4version) {
		return nil, false
	}
	return o.Objectstorepluginmule4version, true
}

// HasObjectstorepluginmule4version returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasObjectstorepluginmule4version() bool {
	if o != nil && !IsNil(o.Objectstorepluginmule4version) {
		return true
	}

	return false
}

// SetObjectstorepluginmule4version gets a reference to the given string and assigns it to the Objectstorepluginmule4version field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetObjectstorepluginmule4version(v string) {
	o.Objectstorepluginmule4version = &v
}

// GetOutputDirectorylibboot returns the OutputDirectorylibboot field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibboot() string {
	if o == nil || IsNil(o.OutputDirectorylibboot) {
		var ret string
		return ret
	}
	return *o.OutputDirectorylibboot
}

// GetOutputDirectorylibbootOk returns a tuple with the OutputDirectorylibboot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibbootOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorylibboot) {
		return nil, false
	}
	return o.OutputDirectorylibboot, true
}

// HasOutputDirectorylibboot returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorylibboot() bool {
	if o != nil && !IsNil(o.OutputDirectorylibboot) {
		return true
	}

	return false
}

// SetOutputDirectorylibboot gets a reference to the given string and assigns it to the OutputDirectorylibboot field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorylibboot(v string) {
	o.OutputDirectorylibboot = &v
}

// GetHawtbufversion returns the Hawtbufversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHawtbufversion() string {
	if o == nil || IsNil(o.Hawtbufversion) {
		var ret string
		return ret
	}
	return *o.Hawtbufversion
}

// GetHawtbufversionOk returns a tuple with the Hawtbufversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHawtbufversionOk() (*string, bool) {
	if o == nil || IsNil(o.Hawtbufversion) {
		return nil, false
	}
	return o.Hawtbufversion, true
}

// HasHawtbufversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasHawtbufversion() bool {
	if o != nil && !IsNil(o.Hawtbufversion) {
		return true
	}

	return false
}

// SetHawtbufversion gets a reference to the given string and assigns it to the Hawtbufversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetHawtbufversion(v string) {
	o.Hawtbufversion = &v
}

// GetOutputDirectorylibartifactPatches returns the OutputDirectorylibartifactPatches field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibartifactPatches() string {
	if o == nil || IsNil(o.OutputDirectorylibartifactPatches) {
		var ret string
		return ret
	}
	return *o.OutputDirectorylibartifactPatches
}

// GetOutputDirectorylibartifactPatchesOk returns a tuple with the OutputDirectorylibartifactPatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibartifactPatchesOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorylibartifactPatches) {
		return nil, false
	}
	return o.OutputDirectorylibartifactPatches, true
}

// HasOutputDirectorylibartifactPatches returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorylibartifactPatches() bool {
	if o != nil && !IsNil(o.OutputDirectorylibartifactPatches) {
		return true
	}

	return false
}

// SetOutputDirectorylibartifactPatches gets a reference to the given string and assigns it to the OutputDirectorylibartifactPatches field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorylibartifactPatches(v string) {
	o.OutputDirectorylibartifactPatches = &v
}

// GetBranchType returns the BranchType field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetBranchType() string {
	if o == nil || IsNil(o.BranchType) {
		var ret string
		return ret
	}
	return *o.BranchType
}

// GetBranchTypeOk returns a tuple with the BranchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetBranchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BranchType) {
		return nil, false
	}
	return o.BranchType, true
}

// HasBranchType returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasBranchType() bool {
	if o != nil && !IsNil(o.BranchType) {
		return true
	}

	return false
}

// SetBranchType gets a reference to the given string and assigns it to the BranchType field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetBranchType(v string) {
	o.BranchType = &v
}

// GetJasyptversion returns the Jasyptversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetJasyptversion() string {
	if o == nil || IsNil(o.Jasyptversion) {
		var ret string
		return ret
	}
	return *o.Jasyptversion
}

// GetJasyptversionOk returns a tuple with the Jasyptversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetJasyptversionOk() (*string, bool) {
	if o == nil || IsNil(o.Jasyptversion) {
		return nil, false
	}
	return o.Jasyptversion, true
}

// HasJasyptversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasJasyptversion() bool {
	if o != nil && !IsNil(o.Jasyptversion) {
		return true
	}

	return false
}

// SetJasyptversion gets a reference to the given string and assigns it to the Jasyptversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetJasyptversion(v string) {
	o.Jasyptversion = &v
}

// GetMunitagentserviceversion returns the Munitagentserviceversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMunitagentserviceversion() string {
	if o == nil || IsNil(o.Munitagentserviceversion) {
		var ret string
		return ret
	}
	return *o.Munitagentserviceversion
}

// GetMunitagentserviceversionOk returns a tuple with the Munitagentserviceversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMunitagentserviceversionOk() (*string, bool) {
	if o == nil || IsNil(o.Munitagentserviceversion) {
		return nil, false
	}
	return o.Munitagentserviceversion, true
}

// HasMunitagentserviceversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMunitagentserviceversion() bool {
	if o != nil && !IsNil(o.Munitagentserviceversion) {
		return true
	}

	return false
}

// SetMunitagentserviceversion gets a reference to the given string and assigns it to the Munitagentserviceversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMunitagentserviceversion(v string) {
	o.Munitagentserviceversion = &v
}

// GetMuledistrotargetdirectory returns the Muledistrotargetdirectory field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistrotargetdirectory() string {
	if o == nil || IsNil(o.Muledistrotargetdirectory) {
		var ret string
		return ret
	}
	return *o.Muledistrotargetdirectory
}

// GetMuledistrotargetdirectoryOk returns a tuple with the Muledistrotargetdirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuledistrotargetdirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.Muledistrotargetdirectory) {
		return nil, false
	}
	return o.Muledistrotargetdirectory, true
}

// HasMuledistrotargetdirectory returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuledistrotargetdirectory() bool {
	if o != nil && !IsNil(o.Muledistrotargetdirectory) {
		return true
	}

	return false
}

// SetMuledistrotargetdirectory gets a reference to the given string and assigns it to the Muledistrotargetdirectory field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuledistrotargetdirectory(v string) {
	o.Muledistrotargetdirectory = &v
}

// GetMuleagentversion returns the Muleagentversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleagentversion() string {
	if o == nil || IsNil(o.Muleagentversion) {
		var ret string
		return ret
	}
	return *o.Muleagentversion
}

// GetMuleagentversionOk returns a tuple with the Muleagentversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleagentversionOk() (*string, bool) {
	if o == nil || IsNil(o.Muleagentversion) {
		return nil, false
	}
	return o.Muleagentversion, true
}

// HasMuleagentversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleagentversion() bool {
	if o != nil && !IsNil(o.Muleagentversion) {
		return true
	}

	return false
}

// SetMuleagentversion gets a reference to the given string and assigns it to the Muleagentversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleagentversion(v string) {
	o.Muleagentversion = &v
}

// GetBranchDetail returns the BranchDetail field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetBranchDetail() string {
	if o == nil || IsNil(o.BranchDetail) {
		var ret string
		return ret
	}
	return *o.BranchDetail
}

// GetBranchDetailOk returns a tuple with the BranchDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetBranchDetailOk() (*string, bool) {
	if o == nil || IsNil(o.BranchDetail) {
		return nil, false
	}
	return o.BranchDetail, true
}

// HasBranchDetail returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasBranchDetail() bool {
	if o != nil && !IsNil(o.BranchDetail) {
		return true
	}

	return false
}

// SetBranchDetail gets a reference to the given string and assigns it to the BranchDetail field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetBranchDetail(v string) {
	o.BranchDetail = &v
}

// GetHttpcomponentshttpcoreversion returns the Httpcomponentshttpcoreversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHttpcomponentshttpcoreversion() string {
	if o == nil || IsNil(o.Httpcomponentshttpcoreversion) {
		var ret string
		return ret
	}
	return *o.Httpcomponentshttpcoreversion
}

// GetHttpcomponentshttpcoreversionOk returns a tuple with the Httpcomponentshttpcoreversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetHttpcomponentshttpcoreversionOk() (*string, bool) {
	if o == nil || IsNil(o.Httpcomponentshttpcoreversion) {
		return nil, false
	}
	return o.Httpcomponentshttpcoreversion, true
}

// HasHttpcomponentshttpcoreversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasHttpcomponentshttpcoreversion() bool {
	if o != nil && !IsNil(o.Httpcomponentshttpcoreversion) {
		return true
	}

	return false
}

// SetHttpcomponentshttpcoreversion gets a reference to the given string and assigns it to the Httpcomponentshttpcoreversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetHttpcomponentshttpcoreversion(v string) {
	o.Httpcomponentshttpcoreversion = &v
}

// GetOutputDirectorylibuser returns the OutputDirectorylibuser field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibuser() string {
	if o == nil || IsNil(o.OutputDirectorylibuser) {
		var ret string
		return ret
	}
	return *o.OutputDirectorylibuser
}

// GetOutputDirectorylibuserOk returns a tuple with the OutputDirectorylibuser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibuserOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorylibuser) {
		return nil, false
	}
	return o.OutputDirectorylibuser, true
}

// HasOutputDirectorylibuser returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorylibuser() bool {
	if o != nil && !IsNil(o.OutputDirectorylibuser) {
		return true
	}

	return false
}

// SetOutputDirectorylibuser gets a reference to the given string and assigns it to the OutputDirectorylibuser field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorylibuser(v string) {
	o.OutputDirectorylibuser = &v
}

// GetObjectstorepluginversion returns the Objectstorepluginversion field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginversion() string {
	if o == nil || IsNil(o.Objectstorepluginversion) {
		var ret string
		return ret
	}
	return *o.Objectstorepluginversion
}

// GetObjectstorepluginversionOk returns a tuple with the Objectstorepluginversion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginversionOk() (*string, bool) {
	if o == nil || IsNil(o.Objectstorepluginversion) {
		return nil, false
	}
	return o.Objectstorepluginversion, true
}

// HasObjectstorepluginversion returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasObjectstorepluginversion() bool {
	if o != nil && !IsNil(o.Objectstorepluginversion) {
		return true
	}

	return false
}

// SetObjectstorepluginversion gets a reference to the given string and assigns it to the Objectstorepluginversion field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetObjectstorepluginversion(v string) {
	o.Objectstorepluginversion = &v
}

// GetObjectstoreplugintype returns the Objectstoreplugintype field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstoreplugintype() string {
	if o == nil || IsNil(o.Objectstoreplugintype) {
		var ret string
		return ret
	}
	return *o.Objectstoreplugintype
}

// GetObjectstoreplugintypeOk returns a tuple with the Objectstoreplugintype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstoreplugintypeOk() (*string, bool) {
	if o == nil || IsNil(o.Objectstoreplugintype) {
		return nil, false
	}
	return o.Objectstoreplugintype, true
}

// HasObjectstoreplugintype returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasObjectstoreplugintype() bool {
	if o != nil && !IsNil(o.Objectstoreplugintype) {
		return true
	}

	return false
}

// SetObjectstoreplugintype gets a reference to the given string and assigns it to the Objectstoreplugintype field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetObjectstoreplugintype(v string) {
	o.Objectstoreplugintype = &v
}

// GetObjectstorepluginclassifier returns the Objectstorepluginclassifier field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginclassifier() string {
	if o == nil || IsNil(o.Objectstorepluginclassifier) {
		var ret string
		return ret
	}
	return *o.Objectstorepluginclassifier
}

// GetObjectstorepluginclassifierOk returns a tuple with the Objectstorepluginclassifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetObjectstorepluginclassifierOk() (*string, bool) {
	if o == nil || IsNil(o.Objectstorepluginclassifier) {
		return nil, false
	}
	return o.Objectstorepluginclassifier, true
}

// HasObjectstorepluginclassifier returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasObjectstorepluginclassifier() bool {
	if o != nil && !IsNil(o.Objectstorepluginclassifier) {
		return true
	}

	return false
}

// SetObjectstorepluginclassifier gets a reference to the given string and assigns it to the Objectstorepluginclassifier field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetObjectstorepluginclassifier(v string) {
	o.Objectstorepluginclassifier = &v
}

// GetOutputDirectorybin returns the OutputDirectorybin field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorybin() string {
	if o == nil || IsNil(o.OutputDirectorybin) {
		var ret string
		return ret
	}
	return *o.OutputDirectorybin
}

// GetOutputDirectorybinOk returns a tuple with the OutputDirectorybin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorybinOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorybin) {
		return nil, false
	}
	return o.OutputDirectorybin, true
}

// HasOutputDirectorybin returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorybin() bool {
	if o != nil && !IsNil(o.OutputDirectorybin) {
		return true
	}

	return false
}

// SetOutputDirectorybin gets a reference to the given string and assigns it to the OutputDirectorybin field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorybin(v string) {
	o.OutputDirectorybin = &v
}

// GetMuleversionsuffix returns the Muleversionsuffix field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleversionsuffix() string {
	if o == nil || IsNil(o.Muleversionsuffix) {
		var ret string
		return ret
	}
	return *o.Muleversionsuffix
}

// GetMuleversionsuffixOk returns a tuple with the Muleversionsuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleversionsuffixOk() (*string, bool) {
	if o == nil || IsNil(o.Muleversionsuffix) {
		return nil, false
	}
	return o.Muleversionsuffix, true
}

// HasMuleversionsuffix returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleversionsuffix() bool {
	if o != nil && !IsNil(o.Muleversionsuffix) {
		return true
	}

	return false
}

// SetMuleversionsuffix gets a reference to the given string and assigns it to the Muleversionsuffix field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleversionsuffix(v string) {
	o.Muleversionsuffix = &v
}

// GetOutputDirectorylibopt returns the OutputDirectorylibopt field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorylibopt() string {
	if o == nil || IsNil(o.OutputDirectorylibopt) {
		var ret string
		return ret
	}
	return *o.OutputDirectorylibopt
}

// GetOutputDirectoryliboptOk returns a tuple with the OutputDirectorylibopt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectoryliboptOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectorylibopt) {
		return nil, false
	}
	return o.OutputDirectorylibopt, true
}

// HasOutputDirectorylibopt returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectorylibopt() bool {
	if o != nil && !IsNil(o.OutputDirectorylibopt) {
		return true
	}

	return false
}

// SetOutputDirectorylibopt gets a reference to the given string and assigns it to the OutputDirectorylibopt field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectorylibopt(v string) {
	o.OutputDirectorylibopt = &v
}

// GetOutputDirectoryplugins returns the OutputDirectoryplugins field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectoryplugins() string {
	if o == nil || IsNil(o.OutputDirectoryplugins) {
		var ret string
		return ret
	}
	return *o.OutputDirectoryplugins
}

// GetOutputDirectorypluginsOk returns a tuple with the OutputDirectoryplugins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetOutputDirectorypluginsOk() (*string, bool) {
	if o == nil || IsNil(o.OutputDirectoryplugins) {
		return nil, false
	}
	return o.OutputDirectoryplugins, true
}

// HasOutputDirectoryplugins returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasOutputDirectoryplugins() bool {
	if o != nil && !IsNil(o.OutputDirectoryplugins) {
		return true
	}

	return false
}

// SetOutputDirectoryplugins gets a reference to the given string and assigns it to the OutputDirectoryplugins field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetOutputDirectoryplugins(v string) {
	o.OutputDirectoryplugins = &v
}

// GetClmserverUrl returns the ClmserverUrl field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetClmserverUrl() string {
	if o == nil || IsNil(o.ClmserverUrl) {
		var ret string
		return ret
	}
	return *o.ClmserverUrl
}

// GetClmserverUrlOk returns a tuple with the ClmserverUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetClmserverUrlOk() (*string, bool) {
	if o == nil || IsNil(o.ClmserverUrl) {
		return nil, false
	}
	return o.ClmserverUrl, true
}

// HasClmserverUrl returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasClmserverUrl() bool {
	if o != nil && !IsNil(o.ClmserverUrl) {
		return true
	}

	return false
}

// SetClmserverUrl gets a reference to the given string and assigns it to the ClmserverUrl field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetClmserverUrl(v string) {
	o.ClmserverUrl = &v
}

// GetMuleunpackdirectory returns the Muleunpackdirectory field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleunpackdirectory() string {
	if o == nil || IsNil(o.Muleunpackdirectory) {
		var ret string
		return ret
	}
	return *o.Muleunpackdirectory
}

// GetMuleunpackdirectoryOk returns a tuple with the Muleunpackdirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetMuleunpackdirectoryOk() (*string, bool) {
	if o == nil || IsNil(o.Muleunpackdirectory) {
		return nil, false
	}
	return o.Muleunpackdirectory, true
}

// HasMuleunpackdirectory returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasMuleunpackdirectory() bool {
	if o != nil && !IsNil(o.Muleunpackdirectory) {
		return true
	}

	return false
}

// SetMuleunpackdirectory gets a reference to the given string and assigns it to the Muleunpackdirectory field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetMuleunpackdirectory(v string) {
	o.Muleunpackdirectory = &v
}

// GetClmapplicationId returns the ClmapplicationId field value if set, zero value otherwise.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetClmapplicationId() string {
	if o == nil || IsNil(o.ClmapplicationId) {
		var ret string
		return ret
	}
	return *o.ClmapplicationId
}

// GetClmapplicationIdOk returns a tuple with the ClmapplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) GetClmapplicationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClmapplicationId) {
		return nil, false
	}
	return o.ClmapplicationId, true
}

// HasClmapplicationId returns a boolean if a field has been set.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) HasClmapplicationId() bool {
	if o != nil && !IsNil(o.ClmapplicationId) {
		return true
	}

	return false
}

// SetClmapplicationId gets a reference to the given string and assigns it to the ClmapplicationId field.
func (o *RuntimeLatestUpdateFlagsAmiVersionData) SetClmapplicationId(v string) {
	o.ClmapplicationId = &v
}

func (o RuntimeLatestUpdateFlagsAmiVersionData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuntimeLatestUpdateFlagsAmiVersionData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chextension) {
		toSerialize["ch,extension"] = o.Chextension
	}
	if !IsNil(o.Muleversion) {
		toSerialize["mule,version"] = o.Muleversion
	}
	if !IsNil(o.Objectstorepluginartifact) {
		toSerialize["objectstore,plugin,artifact"] = o.Objectstorepluginartifact
	}
	if !IsNil(o.Ningversion) {
		toSerialize["ning,version"] = o.Ningversion
	}
	if !IsNil(o.MuledistroartifactId) {
		toSerialize["mule,distro,artifactId"] = o.MuledistroartifactId
	}
	if !IsNil(o.Mozartmonitoringserviceversion) {
		toSerialize["mozart,monitoring,service,version"] = o.Mozartmonitoringserviceversion
	}
	if !IsNil(o.Muleagentmetricscollectorversion) {
		toSerialize["mule,agent,metrics,collector,version"] = o.Muleagentmetricscollectorversion
	}
	if !IsNil(o.Muledistroversion) {
		toSerialize["mule,distro,version"] = o.Muledistroversion
	}
	if !IsNil(o.Httpcomponentshttpclientversion) {
		toSerialize["httpcomponents,httpclient,version"] = o.Httpcomponentshttpclientversion
	}
	if !IsNil(o.Muleagentextensionversion) {
		toSerialize["mule,agent,extension,version"] = o.Muleagentextensionversion
	}
	if !IsNil(o.OutputDirectorypluginsagentch) {
		toSerialize["outputDirectory,plugins,agent,ch"] = o.OutputDirectorypluginsagentch
	}
	if !IsNil(o.Munitversion) {
		toSerialize["munit,version"] = o.Munitversion
	}
	if !IsNil(o.OutputDirectorylibmule) {
		toSerialize["outputDirectory,lib,mule"] = o.OutputDirectorylibmule
	}
	if !IsNil(o.Objectstorepluginmule3version) {
		toSerialize["objectstore,plugin,mule3,version"] = o.Objectstorepluginmule3version
	}
	if !IsNil(o.Cloudhubmuleagentextensionversion) {
		toSerialize["cloudhub,mule,agent,extension,version"] = o.Cloudhubmuleagentextensionversion
	}
	if !IsNil(o.MuledistrogroupId) {
		toSerialize["mule,distro,groupId"] = o.MuledistrogroupId
	}
	if !IsNil(o.Nettytypesafeversion) {
		toSerialize["netty,typesafe,version"] = o.Nettytypesafeversion
	}
	if !IsNil(o.Hawtjournalversion) {
		toSerialize["hawtjournal,version"] = o.Hawtjournalversion
	}
	if !IsNil(o.Licmversion) {
		toSerialize["licm,version"] = o.Licmversion
	}
	if !IsNil(o.CloudhubCommonversion) {
		toSerialize["cloudhub-common,version"] = o.CloudhubCommonversion
	}
	if !IsNil(o.Muleextensionversion) {
		toSerialize["mule,extension,version"] = o.Muleextensionversion
	}
	if !IsNil(o.ClmserverId) {
		toSerialize["clm,serverId"] = o.ClmserverId
	}
	if !IsNil(o.CloudhubPlatformartifact) {
		toSerialize["cloudhub-platform,artifact"] = o.CloudhubPlatformartifact
	}
	if !IsNil(o.CloudhubLogAppenderversion) {
		toSerialize["cloudhub-log-appender,version"] = o.CloudhubLogAppenderversion
	}
	if !IsNil(o.Mulepatchversion) {
		toSerialize["mule,patch,version"] = o.Mulepatchversion
	}
	if !IsNil(o.OutputDirectorychlogging) {
		toSerialize["outputDirectory,ch,logging"] = o.OutputDirectorychlogging
	}
	if !IsNil(o.AwsJavaSdkversion) {
		toSerialize["aws-java-sdk,version"] = o.AwsJavaSdkversion
	}
	if !IsNil(o.OutputDirectoryservices) {
		toSerialize["outputDirectory,services"] = o.OutputDirectoryservices
	}
	if !IsNil(o.OutputDirectorylibpatches) {
		toSerialize["outputDirectory,lib,patches"] = o.OutputDirectorylibpatches
	}
	if !IsNil(o.Agws3providerversion) {
		toSerialize["agw,s3,provider,version"] = o.Agws3providerversion
	}
	if !IsNil(o.Quartzversion) {
		toSerialize["quartz,version"] = o.Quartzversion
	}
	if !IsNil(o.Nettyversion) {
		toSerialize["netty,version"] = o.Nettyversion
	}
	if !IsNil(o.Mozartagentserviceversion) {
		toSerialize["mozart,agent,service,version"] = o.Mozartagentserviceversion
	}
	if !IsNil(o.OutputDirectorylibalternative) {
		toSerialize["outputDirectory,lib,alternative"] = o.OutputDirectorylibalternative
	}
	if !IsNil(o.BranchFullName) {
		toSerialize["branchFullName"] = o.BranchFullName
	}
	if !IsNil(o.Muleversionfolder) {
		toSerialize["mule,version,folder"] = o.Muleversionfolder
	}
	if !IsNil(o.Distroversionextension) {
		toSerialize["distro,version,extension"] = o.Distroversionextension
	}
	if !IsNil(o.CommonJacksonversion) {
		toSerialize["common-jackson,version"] = o.CommonJacksonversion
	}
	if !IsNil(o.LicensePath) {
		toSerialize["licensePath"] = o.LicensePath
	}
	if !IsNil(o.Objectstorepluginmule4version) {
		toSerialize["objectstore,plugin,mule4,version"] = o.Objectstorepluginmule4version
	}
	if !IsNil(o.OutputDirectorylibboot) {
		toSerialize["outputDirectory,lib,boot"] = o.OutputDirectorylibboot
	}
	if !IsNil(o.Hawtbufversion) {
		toSerialize["hawtbuf,version"] = o.Hawtbufversion
	}
	if !IsNil(o.OutputDirectorylibartifactPatches) {
		toSerialize["outputDirectory,lib,artifact-patches"] = o.OutputDirectorylibartifactPatches
	}
	if !IsNil(o.BranchType) {
		toSerialize["branchType"] = o.BranchType
	}
	if !IsNil(o.Jasyptversion) {
		toSerialize["jasypt,version"] = o.Jasyptversion
	}
	if !IsNil(o.Munitagentserviceversion) {
		toSerialize["munit,agent,service,version"] = o.Munitagentserviceversion
	}
	if !IsNil(o.Muledistrotargetdirectory) {
		toSerialize["mule,distro,target,directory"] = o.Muledistrotargetdirectory
	}
	if !IsNil(o.Muleagentversion) {
		toSerialize["mule,agent,version"] = o.Muleagentversion
	}
	if !IsNil(o.BranchDetail) {
		toSerialize["branchDetail"] = o.BranchDetail
	}
	if !IsNil(o.Httpcomponentshttpcoreversion) {
		toSerialize["httpcomponents,httpcore,version"] = o.Httpcomponentshttpcoreversion
	}
	if !IsNil(o.OutputDirectorylibuser) {
		toSerialize["outputDirectory,lib,user"] = o.OutputDirectorylibuser
	}
	if !IsNil(o.Objectstorepluginversion) {
		toSerialize["objectstore,plugin,version"] = o.Objectstorepluginversion
	}
	if !IsNil(o.Objectstoreplugintype) {
		toSerialize["objectstore,plugin,type"] = o.Objectstoreplugintype
	}
	if !IsNil(o.Objectstorepluginclassifier) {
		toSerialize["objectstore,plugin,classifier"] = o.Objectstorepluginclassifier
	}
	if !IsNil(o.OutputDirectorybin) {
		toSerialize["outputDirectory,bin"] = o.OutputDirectorybin
	}
	if !IsNil(o.Muleversionsuffix) {
		toSerialize["mule,version,suffix"] = o.Muleversionsuffix
	}
	if !IsNil(o.OutputDirectorylibopt) {
		toSerialize["outputDirectory,lib,opt"] = o.OutputDirectorylibopt
	}
	if !IsNil(o.OutputDirectoryplugins) {
		toSerialize["outputDirectory,plugins"] = o.OutputDirectoryplugins
	}
	if !IsNil(o.ClmserverUrl) {
		toSerialize["clm,serverUrl"] = o.ClmserverUrl
	}
	if !IsNil(o.Muleunpackdirectory) {
		toSerialize["mule,unpack,directory"] = o.Muleunpackdirectory
	}
	if !IsNil(o.ClmapplicationId) {
		toSerialize["clm,applicationId"] = o.ClmapplicationId
	}
	return toSerialize, nil
}

type NullableRuntimeLatestUpdateFlagsAmiVersionData struct {
	value *RuntimeLatestUpdateFlagsAmiVersionData
	isSet bool
}

func (v NullableRuntimeLatestUpdateFlagsAmiVersionData) Get() *RuntimeLatestUpdateFlagsAmiVersionData {
	return v.value
}

func (v *NullableRuntimeLatestUpdateFlagsAmiVersionData) Set(val *RuntimeLatestUpdateFlagsAmiVersionData) {
	v.value = val
	v.isSet = true
}

func (v NullableRuntimeLatestUpdateFlagsAmiVersionData) IsSet() bool {
	return v.isSet
}

func (v *NullableRuntimeLatestUpdateFlagsAmiVersionData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuntimeLatestUpdateFlagsAmiVersionData(val *RuntimeLatestUpdateFlagsAmiVersionData) *NullableRuntimeLatestUpdateFlagsAmiVersionData {
	return &NullableRuntimeLatestUpdateFlagsAmiVersionData{value: val, isSet: true}
}

func (v NullableRuntimeLatestUpdateFlagsAmiVersionData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuntimeLatestUpdateFlagsAmiVersionData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


