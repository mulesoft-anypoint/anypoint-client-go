/*
Application Manager v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the UpdateDeploymentBulkBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDeploymentBulkBody{}

// UpdateDeploymentBulkBody struct for UpdateDeploymentBulkBody
type UpdateDeploymentBulkBody struct {
	// * UPDATE: Update all applications in the provided list to the latest update of the Mule Version that the application is currently using * START: Start all applications in the provided list if they are stopped * STOP: Stop all applications in the provided list if they are started * RESTART: Restart all applications in the provided list with zero downtime * DELETE: Delete all applications in the provided list 
	Action *string `json:"action,omitempty"`
	// The list of application domains
	Domains []string `json:"domains,omitempty"`
}

// NewUpdateDeploymentBulkBody instantiates a new UpdateDeploymentBulkBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDeploymentBulkBody() *UpdateDeploymentBulkBody {
	this := UpdateDeploymentBulkBody{}
	return &this
}

// NewUpdateDeploymentBulkBodyWithDefaults instantiates a new UpdateDeploymentBulkBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDeploymentBulkBodyWithDefaults() *UpdateDeploymentBulkBody {
	this := UpdateDeploymentBulkBody{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *UpdateDeploymentBulkBody) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDeploymentBulkBody) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *UpdateDeploymentBulkBody) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *UpdateDeploymentBulkBody) SetAction(v string) {
	o.Action = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *UpdateDeploymentBulkBody) GetDomains() []string {
	if o == nil || IsNil(o.Domains) {
		var ret []string
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateDeploymentBulkBody) GetDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.Domains) {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *UpdateDeploymentBulkBody) HasDomains() bool {
	if o != nil && !IsNil(o.Domains) {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []string and assigns it to the Domains field.
func (o *UpdateDeploymentBulkBody) SetDomains(v []string) {
	o.Domains = v
}

func (o UpdateDeploymentBulkBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDeploymentBulkBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Domains) {
		toSerialize["domains"] = o.Domains
	}
	return toSerialize, nil
}

type NullableUpdateDeploymentBulkBody struct {
	value *UpdateDeploymentBulkBody
	isSet bool
}

func (v NullableUpdateDeploymentBulkBody) Get() *UpdateDeploymentBulkBody {
	return v.value
}

func (v *NullableUpdateDeploymentBulkBody) Set(val *UpdateDeploymentBulkBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDeploymentBulkBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDeploymentBulkBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDeploymentBulkBody(val *UpdateDeploymentBulkBody) *NullableUpdateDeploymentBulkBody {
	return &NullableUpdateDeploymentBulkBody{value: val, isSet: true}
}

func (v NullableUpdateDeploymentBulkBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDeploymentBulkBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


