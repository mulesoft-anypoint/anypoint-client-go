/*
Deployment v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the DeploymentApplication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeploymentApplication{}

// DeploymentApplication Application-specific information for the deployment.
type DeploymentApplication struct {
	// The status of the application.
	Status *string `json:"status,omitempty"`
}

// NewDeploymentApplication instantiates a new DeploymentApplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeploymentApplication() *DeploymentApplication {
	this := DeploymentApplication{}
	return &this
}

// NewDeploymentApplicationWithDefaults instantiates a new DeploymentApplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeploymentApplicationWithDefaults() *DeploymentApplication {
	this := DeploymentApplication{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DeploymentApplication) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeploymentApplication) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DeploymentApplication) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DeploymentApplication) SetStatus(v string) {
	o.Status = &v
}

func (o DeploymentApplication) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeploymentApplication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDeploymentApplication struct {
	value *DeploymentApplication
	isSet bool
}

func (v NullableDeploymentApplication) Get() *DeploymentApplication {
	return v.value
}

func (v *NullableDeploymentApplication) Set(val *DeploymentApplication) {
	v.value = val
	v.isSet = true
}

func (v NullableDeploymentApplication) IsSet() bool {
	return v.isSet
}

func (v *NullableDeploymentApplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeploymentApplication(val *DeploymentApplication) *NullableDeploymentApplication {
	return &NullableDeploymentApplication{value: val, isSet: true}
}

func (v NullableDeploymentApplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeploymentApplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


