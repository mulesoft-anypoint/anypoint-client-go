/*
Deployment v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 1.2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the TrackingSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrackingSettings{}

// TrackingSettings Settings for tracking application performance or usage.
type TrackingSettings struct {
	// The level of tracking applied (e.g., DISABLED, BASIC, FULL).
	TrackingLevel *string `json:"trackingLevel,omitempty"`
}

// NewTrackingSettings instantiates a new TrackingSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrackingSettings() *TrackingSettings {
	this := TrackingSettings{}
	return &this
}

// NewTrackingSettingsWithDefaults instantiates a new TrackingSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrackingSettingsWithDefaults() *TrackingSettings {
	this := TrackingSettings{}
	return &this
}

// GetTrackingLevel returns the TrackingLevel field value if set, zero value otherwise.
func (o *TrackingSettings) GetTrackingLevel() string {
	if o == nil || IsNil(o.TrackingLevel) {
		var ret string
		return ret
	}
	return *o.TrackingLevel
}

// GetTrackingLevelOk returns a tuple with the TrackingLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrackingSettings) GetTrackingLevelOk() (*string, bool) {
	if o == nil || IsNil(o.TrackingLevel) {
		return nil, false
	}
	return o.TrackingLevel, true
}

// HasTrackingLevel returns a boolean if a field has been set.
func (o *TrackingSettings) HasTrackingLevel() bool {
	if o != nil && !IsNil(o.TrackingLevel) {
		return true
	}

	return false
}

// SetTrackingLevel gets a reference to the given string and assigns it to the TrackingLevel field.
func (o *TrackingSettings) SetTrackingLevel(v string) {
	o.TrackingLevel = &v
}

func (o TrackingSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrackingSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TrackingLevel) {
		toSerialize["trackingLevel"] = o.TrackingLevel
	}
	return toSerialize, nil
}

type NullableTrackingSettings struct {
	value *TrackingSettings
	isSet bool
}

func (v NullableTrackingSettings) Get() *TrackingSettings {
	return v.value
}

func (v *NullableTrackingSettings) Set(val *TrackingSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTrackingSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTrackingSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrackingSettings(val *TrackingSettings) *NullableTrackingSettings {
	return &NullableTrackingSettings{value: val, isSet: true}
}

func (v NullableTrackingSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrackingSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


