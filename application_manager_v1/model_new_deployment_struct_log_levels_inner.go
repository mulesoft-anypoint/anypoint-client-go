/*
Application Manager v1

The Application Manager API exists to provide Mule Application management operations from Anypoint Control Planes to any Runtime Plane, with capabilities that include:   - Deploying a Mule Application or API to a Mule Runtime   - Scaling up or down a running application   - Managing application settings (ie: properties)   - Deleting a Mule Application Deployment   - Changing artifact version or configurations of a deployment   - Starting, Stopping or Restarting applications   - etc. This API currently supports deployments to Cloudhub 1.0 targets only. 

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package application_manager_v1

import (
	"encoding/json"
)

// checks if the NewDeploymentStructLogLevelsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NewDeploymentStructLogLevelsInner{}

// NewDeploymentStructLogLevelsInner struct for NewDeploymentStructLogLevelsInner
type NewDeploymentStructLogLevelsInner struct {
	Level *string `json:"level,omitempty"`
	PackageName *string `json:"packageName,omitempty"`
}

// NewNewDeploymentStructLogLevelsInner instantiates a new NewDeploymentStructLogLevelsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNewDeploymentStructLogLevelsInner() *NewDeploymentStructLogLevelsInner {
	this := NewDeploymentStructLogLevelsInner{}
	return &this
}

// NewNewDeploymentStructLogLevelsInnerWithDefaults instantiates a new NewDeploymentStructLogLevelsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNewDeploymentStructLogLevelsInnerWithDefaults() *NewDeploymentStructLogLevelsInner {
	this := NewDeploymentStructLogLevelsInner{}
	return &this
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *NewDeploymentStructLogLevelsInner) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewDeploymentStructLogLevelsInner) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *NewDeploymentStructLogLevelsInner) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *NewDeploymentStructLogLevelsInner) SetLevel(v string) {
	o.Level = &v
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *NewDeploymentStructLogLevelsInner) GetPackageName() string {
	if o == nil || IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NewDeploymentStructLogLevelsInner) GetPackageNameOk() (*string, bool) {
	if o == nil || IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *NewDeploymentStructLogLevelsInner) HasPackageName() bool {
	if o != nil && !IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *NewDeploymentStructLogLevelsInner) SetPackageName(v string) {
	o.PackageName = &v
}

func (o NewDeploymentStructLogLevelsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NewDeploymentStructLogLevelsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.PackageName) {
		toSerialize["packageName"] = o.PackageName
	}
	return toSerialize, nil
}

type NullableNewDeploymentStructLogLevelsInner struct {
	value *NewDeploymentStructLogLevelsInner
	isSet bool
}

func (v NullableNewDeploymentStructLogLevelsInner) Get() *NewDeploymentStructLogLevelsInner {
	return v.value
}

func (v *NullableNewDeploymentStructLogLevelsInner) Set(val *NewDeploymentStructLogLevelsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableNewDeploymentStructLogLevelsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableNewDeploymentStructLogLevelsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNewDeploymentStructLogLevelsInner(val *NewDeploymentStructLogLevelsInner) *NullableNewDeploymentStructLogLevelsInner {
	return &NullableNewDeploymentStructLogLevelsInner{value: val, isSet: true}
}

func (v NullableNewDeploymentStructLogLevelsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNewDeploymentStructLogLevelsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


