/*
Private Space API

Description of the Private Space API

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package private_space

import (
	"encoding/json"
)

// checks if the FirewallRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallRule{}

// FirewallRule struct for FirewallRule
type FirewallRule struct {
	// The CIDR block of the firewall rule.
	CidrBlock *string `json:"cidrBlock,omitempty"`
	// The protocol of the firewall rule.
	Protocol *string `json:"protocol,omitempty"`
	// The from port of the firewall rule.
	FromPort *int32 `json:"fromPort,omitempty"`
	// The to port of the firewall rule.
	ToPort *int32 `json:"toPort,omitempty"`
	// Type of the firewall rule. Allowed values are [inbound, outbound].
	Type *string `json:"type,omitempty"`
}

// NewFirewallRule instantiates a new FirewallRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallRule() *FirewallRule {
	this := FirewallRule{}
	return &this
}

// NewFirewallRuleWithDefaults instantiates a new FirewallRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallRuleWithDefaults() *FirewallRule {
	this := FirewallRule{}
	return &this
}

// GetCidrBlock returns the CidrBlock field value if set, zero value otherwise.
func (o *FirewallRule) GetCidrBlock() string {
	if o == nil || IsNil(o.CidrBlock) {
		var ret string
		return ret
	}
	return *o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRule) GetCidrBlockOk() (*string, bool) {
	if o == nil || IsNil(o.CidrBlock) {
		return nil, false
	}
	return o.CidrBlock, true
}

// HasCidrBlock returns a boolean if a field has been set.
func (o *FirewallRule) HasCidrBlock() bool {
	if o != nil && !IsNil(o.CidrBlock) {
		return true
	}

	return false
}

// SetCidrBlock gets a reference to the given string and assigns it to the CidrBlock field.
func (o *FirewallRule) SetCidrBlock(v string) {
	o.CidrBlock = &v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *FirewallRule) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRule) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *FirewallRule) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *FirewallRule) SetProtocol(v string) {
	o.Protocol = &v
}

// GetFromPort returns the FromPort field value if set, zero value otherwise.
func (o *FirewallRule) GetFromPort() int32 {
	if o == nil || IsNil(o.FromPort) {
		var ret int32
		return ret
	}
	return *o.FromPort
}

// GetFromPortOk returns a tuple with the FromPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRule) GetFromPortOk() (*int32, bool) {
	if o == nil || IsNil(o.FromPort) {
		return nil, false
	}
	return o.FromPort, true
}

// HasFromPort returns a boolean if a field has been set.
func (o *FirewallRule) HasFromPort() bool {
	if o != nil && !IsNil(o.FromPort) {
		return true
	}

	return false
}

// SetFromPort gets a reference to the given int32 and assigns it to the FromPort field.
func (o *FirewallRule) SetFromPort(v int32) {
	o.FromPort = &v
}

// GetToPort returns the ToPort field value if set, zero value otherwise.
func (o *FirewallRule) GetToPort() int32 {
	if o == nil || IsNil(o.ToPort) {
		var ret int32
		return ret
	}
	return *o.ToPort
}

// GetToPortOk returns a tuple with the ToPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRule) GetToPortOk() (*int32, bool) {
	if o == nil || IsNil(o.ToPort) {
		return nil, false
	}
	return o.ToPort, true
}

// HasToPort returns a boolean if a field has been set.
func (o *FirewallRule) HasToPort() bool {
	if o != nil && !IsNil(o.ToPort) {
		return true
	}

	return false
}

// SetToPort gets a reference to the given int32 and assigns it to the ToPort field.
func (o *FirewallRule) SetToPort(v int32) {
	o.ToPort = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FirewallRule) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallRule) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FirewallRule) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FirewallRule) SetType(v string) {
	o.Type = &v
}

func (o FirewallRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CidrBlock) {
		toSerialize["cidrBlock"] = o.CidrBlock
	}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.FromPort) {
		toSerialize["fromPort"] = o.FromPort
	}
	if !IsNil(o.ToPort) {
		toSerialize["toPort"] = o.ToPort
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableFirewallRule struct {
	value *FirewallRule
	isSet bool
}

func (v NullableFirewallRule) Get() *FirewallRule {
	return v.value
}

func (v *NullableFirewallRule) Set(val *FirewallRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallRule(val *FirewallRule) *NullableFirewallRule {
	return &NullableFirewallRule{value: val, isSet: true}
}

func (v NullableFirewallRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


