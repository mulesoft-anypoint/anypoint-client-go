/*
Private Space API

Description of the Private Space API

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package private_space

import (
	"encoding/json"
)

// checks if the PrivateSpaceNetworkEditable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateSpaceNetworkEditable{}

// PrivateSpaceNetworkEditable struct for PrivateSpaceNetworkEditable
type PrivateSpaceNetworkEditable struct {
	// The region of the Private Space. Required when create a Private Space network.
	Region *string `json:"region,omitempty"`
	// The CIDR block of the VPC where the Private Space will be created. Required when create a Private Space in a new VPC. Default is 10.0.0.0/16.
	CidrBlock *string `json:"cidrBlock,omitempty"`
	InternalDns *PrivateSpaceNetworkEditableInternalDns `json:"internalDns,omitempty"`
	// The list of reserved CIDR blocks for your private space to prevent IP address overlap. Required when you want to connect your private space to your corporate network (either on-premises or in the cloud). Use CIDR notation and commas. 
	ReservedCidrs []string `json:"reservedCidrs,omitempty"`
}

// NewPrivateSpaceNetworkEditable instantiates a new PrivateSpaceNetworkEditable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateSpaceNetworkEditable() *PrivateSpaceNetworkEditable {
	this := PrivateSpaceNetworkEditable{}
	return &this
}

// NewPrivateSpaceNetworkEditableWithDefaults instantiates a new PrivateSpaceNetworkEditable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateSpaceNetworkEditableWithDefaults() *PrivateSpaceNetworkEditable {
	this := PrivateSpaceNetworkEditable{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *PrivateSpaceNetworkEditable) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetworkEditable) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *PrivateSpaceNetworkEditable) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *PrivateSpaceNetworkEditable) SetRegion(v string) {
	o.Region = &v
}

// GetCidrBlock returns the CidrBlock field value if set, zero value otherwise.
func (o *PrivateSpaceNetworkEditable) GetCidrBlock() string {
	if o == nil || IsNil(o.CidrBlock) {
		var ret string
		return ret
	}
	return *o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetworkEditable) GetCidrBlockOk() (*string, bool) {
	if o == nil || IsNil(o.CidrBlock) {
		return nil, false
	}
	return o.CidrBlock, true
}

// HasCidrBlock returns a boolean if a field has been set.
func (o *PrivateSpaceNetworkEditable) HasCidrBlock() bool {
	if o != nil && !IsNil(o.CidrBlock) {
		return true
	}

	return false
}

// SetCidrBlock gets a reference to the given string and assigns it to the CidrBlock field.
func (o *PrivateSpaceNetworkEditable) SetCidrBlock(v string) {
	o.CidrBlock = &v
}

// GetInternalDns returns the InternalDns field value if set, zero value otherwise.
func (o *PrivateSpaceNetworkEditable) GetInternalDns() PrivateSpaceNetworkEditableInternalDns {
	if o == nil || IsNil(o.InternalDns) {
		var ret PrivateSpaceNetworkEditableInternalDns
		return ret
	}
	return *o.InternalDns
}

// GetInternalDnsOk returns a tuple with the InternalDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetworkEditable) GetInternalDnsOk() (*PrivateSpaceNetworkEditableInternalDns, bool) {
	if o == nil || IsNil(o.InternalDns) {
		return nil, false
	}
	return o.InternalDns, true
}

// HasInternalDns returns a boolean if a field has been set.
func (o *PrivateSpaceNetworkEditable) HasInternalDns() bool {
	if o != nil && !IsNil(o.InternalDns) {
		return true
	}

	return false
}

// SetInternalDns gets a reference to the given PrivateSpaceNetworkEditableInternalDns and assigns it to the InternalDns field.
func (o *PrivateSpaceNetworkEditable) SetInternalDns(v PrivateSpaceNetworkEditableInternalDns) {
	o.InternalDns = &v
}

// GetReservedCidrs returns the ReservedCidrs field value if set, zero value otherwise.
func (o *PrivateSpaceNetworkEditable) GetReservedCidrs() []string {
	if o == nil || IsNil(o.ReservedCidrs) {
		var ret []string
		return ret
	}
	return o.ReservedCidrs
}

// GetReservedCidrsOk returns a tuple with the ReservedCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetworkEditable) GetReservedCidrsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReservedCidrs) {
		return nil, false
	}
	return o.ReservedCidrs, true
}

// HasReservedCidrs returns a boolean if a field has been set.
func (o *PrivateSpaceNetworkEditable) HasReservedCidrs() bool {
	if o != nil && !IsNil(o.ReservedCidrs) {
		return true
	}

	return false
}

// SetReservedCidrs gets a reference to the given []string and assigns it to the ReservedCidrs field.
func (o *PrivateSpaceNetworkEditable) SetReservedCidrs(v []string) {
	o.ReservedCidrs = v
}

func (o PrivateSpaceNetworkEditable) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateSpaceNetworkEditable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.CidrBlock) {
		toSerialize["cidrBlock"] = o.CidrBlock
	}
	if !IsNil(o.InternalDns) {
		toSerialize["internalDns"] = o.InternalDns
	}
	if !IsNil(o.ReservedCidrs) {
		toSerialize["reservedCidrs"] = o.ReservedCidrs
	}
	return toSerialize, nil
}

type NullablePrivateSpaceNetworkEditable struct {
	value *PrivateSpaceNetworkEditable
	isSet bool
}

func (v NullablePrivateSpaceNetworkEditable) Get() *PrivateSpaceNetworkEditable {
	return v.value
}

func (v *NullablePrivateSpaceNetworkEditable) Set(val *PrivateSpaceNetworkEditable) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateSpaceNetworkEditable) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateSpaceNetworkEditable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateSpaceNetworkEditable(val *PrivateSpaceNetworkEditable) *NullablePrivateSpaceNetworkEditable {
	return &NullablePrivateSpaceNetworkEditable{value: val, isSet: true}
}

func (v NullablePrivateSpaceNetworkEditable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateSpaceNetworkEditable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


