/*
Private Space API

Description of the Private Space API

API version: 1.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package private_space

import (
	"encoding/json"
)

// checks if the PrivateSpaceNetwork type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateSpaceNetwork{}

// PrivateSpaceNetwork Private space network configuration
type PrivateSpaceNetwork struct {
	// The region of the Private Space. Required when create a Private Space network.
	Region *string `json:"region,omitempty"`
	// The CIDR block of the VPC where the Private Space will be created. Required when create a Private Space in a new VPC. Default is 10.0.0.0/16.
	CidrBlock *string `json:"cidrBlock,omitempty"`
	InternalDns *PrivateSpaceNetworkCreateInternalDns `json:"internalDns,omitempty"`
	// The inbound static IPs of the Private Space network.
	InboundStaticIps []string `json:"inboundStaticIps,omitempty"`
	// The outbound static IPs of the Private Space network.
	OutboundStaticIps []string `json:"outboundStaticIps,omitempty"`
	// The DNS target of the Private Space network.
	DnsTarget *string `json:"dnsTarget,omitempty"`
	// The internal DNS target of the Private Space network.
	InternalDnsTarget *string `json:"internalDnsTarget,omitempty"`
	// The list of reserved CIDR blocks for your private space to prevent IP address overlap when you connect your private space to your corporate network.
	ReservedCidrs []string `json:"reservedCidrs,omitempty"`
}

// NewPrivateSpaceNetwork instantiates a new PrivateSpaceNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateSpaceNetwork() *PrivateSpaceNetwork {
	this := PrivateSpaceNetwork{}
	return &this
}

// NewPrivateSpaceNetworkWithDefaults instantiates a new PrivateSpaceNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateSpaceNetworkWithDefaults() *PrivateSpaceNetwork {
	this := PrivateSpaceNetwork{}
	return &this
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *PrivateSpaceNetwork) SetRegion(v string) {
	o.Region = &v
}

// GetCidrBlock returns the CidrBlock field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetCidrBlock() string {
	if o == nil || IsNil(o.CidrBlock) {
		var ret string
		return ret
	}
	return *o.CidrBlock
}

// GetCidrBlockOk returns a tuple with the CidrBlock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetCidrBlockOk() (*string, bool) {
	if o == nil || IsNil(o.CidrBlock) {
		return nil, false
	}
	return o.CidrBlock, true
}

// HasCidrBlock returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasCidrBlock() bool {
	if o != nil && !IsNil(o.CidrBlock) {
		return true
	}

	return false
}

// SetCidrBlock gets a reference to the given string and assigns it to the CidrBlock field.
func (o *PrivateSpaceNetwork) SetCidrBlock(v string) {
	o.CidrBlock = &v
}

// GetInternalDns returns the InternalDns field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetInternalDns() PrivateSpaceNetworkCreateInternalDns {
	if o == nil || IsNil(o.InternalDns) {
		var ret PrivateSpaceNetworkCreateInternalDns
		return ret
	}
	return *o.InternalDns
}

// GetInternalDnsOk returns a tuple with the InternalDns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetInternalDnsOk() (*PrivateSpaceNetworkCreateInternalDns, bool) {
	if o == nil || IsNil(o.InternalDns) {
		return nil, false
	}
	return o.InternalDns, true
}

// HasInternalDns returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasInternalDns() bool {
	if o != nil && !IsNil(o.InternalDns) {
		return true
	}

	return false
}

// SetInternalDns gets a reference to the given PrivateSpaceNetworkCreateInternalDns and assigns it to the InternalDns field.
func (o *PrivateSpaceNetwork) SetInternalDns(v PrivateSpaceNetworkCreateInternalDns) {
	o.InternalDns = &v
}

// GetInboundStaticIps returns the InboundStaticIps field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetInboundStaticIps() []string {
	if o == nil || IsNil(o.InboundStaticIps) {
		var ret []string
		return ret
	}
	return o.InboundStaticIps
}

// GetInboundStaticIpsOk returns a tuple with the InboundStaticIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetInboundStaticIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.InboundStaticIps) {
		return nil, false
	}
	return o.InboundStaticIps, true
}

// HasInboundStaticIps returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasInboundStaticIps() bool {
	if o != nil && !IsNil(o.InboundStaticIps) {
		return true
	}

	return false
}

// SetInboundStaticIps gets a reference to the given []string and assigns it to the InboundStaticIps field.
func (o *PrivateSpaceNetwork) SetInboundStaticIps(v []string) {
	o.InboundStaticIps = v
}

// GetOutboundStaticIps returns the OutboundStaticIps field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetOutboundStaticIps() []string {
	if o == nil || IsNil(o.OutboundStaticIps) {
		var ret []string
		return ret
	}
	return o.OutboundStaticIps
}

// GetOutboundStaticIpsOk returns a tuple with the OutboundStaticIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetOutboundStaticIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.OutboundStaticIps) {
		return nil, false
	}
	return o.OutboundStaticIps, true
}

// HasOutboundStaticIps returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasOutboundStaticIps() bool {
	if o != nil && !IsNil(o.OutboundStaticIps) {
		return true
	}

	return false
}

// SetOutboundStaticIps gets a reference to the given []string and assigns it to the OutboundStaticIps field.
func (o *PrivateSpaceNetwork) SetOutboundStaticIps(v []string) {
	o.OutboundStaticIps = v
}

// GetDnsTarget returns the DnsTarget field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetDnsTarget() string {
	if o == nil || IsNil(o.DnsTarget) {
		var ret string
		return ret
	}
	return *o.DnsTarget
}

// GetDnsTargetOk returns a tuple with the DnsTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetDnsTargetOk() (*string, bool) {
	if o == nil || IsNil(o.DnsTarget) {
		return nil, false
	}
	return o.DnsTarget, true
}

// HasDnsTarget returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasDnsTarget() bool {
	if o != nil && !IsNil(o.DnsTarget) {
		return true
	}

	return false
}

// SetDnsTarget gets a reference to the given string and assigns it to the DnsTarget field.
func (o *PrivateSpaceNetwork) SetDnsTarget(v string) {
	o.DnsTarget = &v
}

// GetInternalDnsTarget returns the InternalDnsTarget field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetInternalDnsTarget() string {
	if o == nil || IsNil(o.InternalDnsTarget) {
		var ret string
		return ret
	}
	return *o.InternalDnsTarget
}

// GetInternalDnsTargetOk returns a tuple with the InternalDnsTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetInternalDnsTargetOk() (*string, bool) {
	if o == nil || IsNil(o.InternalDnsTarget) {
		return nil, false
	}
	return o.InternalDnsTarget, true
}

// HasInternalDnsTarget returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasInternalDnsTarget() bool {
	if o != nil && !IsNil(o.InternalDnsTarget) {
		return true
	}

	return false
}

// SetInternalDnsTarget gets a reference to the given string and assigns it to the InternalDnsTarget field.
func (o *PrivateSpaceNetwork) SetInternalDnsTarget(v string) {
	o.InternalDnsTarget = &v
}

// GetReservedCidrs returns the ReservedCidrs field value if set, zero value otherwise.
func (o *PrivateSpaceNetwork) GetReservedCidrs() []string {
	if o == nil || IsNil(o.ReservedCidrs) {
		var ret []string
		return ret
	}
	return o.ReservedCidrs
}

// GetReservedCidrsOk returns a tuple with the ReservedCidrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrivateSpaceNetwork) GetReservedCidrsOk() ([]string, bool) {
	if o == nil || IsNil(o.ReservedCidrs) {
		return nil, false
	}
	return o.ReservedCidrs, true
}

// HasReservedCidrs returns a boolean if a field has been set.
func (o *PrivateSpaceNetwork) HasReservedCidrs() bool {
	if o != nil && !IsNil(o.ReservedCidrs) {
		return true
	}

	return false
}

// SetReservedCidrs gets a reference to the given []string and assigns it to the ReservedCidrs field.
func (o *PrivateSpaceNetwork) SetReservedCidrs(v []string) {
	o.ReservedCidrs = v
}

func (o PrivateSpaceNetwork) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateSpaceNetwork) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.CidrBlock) {
		toSerialize["cidrBlock"] = o.CidrBlock
	}
	if !IsNil(o.InternalDns) {
		toSerialize["internalDns"] = o.InternalDns
	}
	if !IsNil(o.InboundStaticIps) {
		toSerialize["inboundStaticIps"] = o.InboundStaticIps
	}
	if !IsNil(o.OutboundStaticIps) {
		toSerialize["outboundStaticIps"] = o.OutboundStaticIps
	}
	if !IsNil(o.DnsTarget) {
		toSerialize["dnsTarget"] = o.DnsTarget
	}
	if !IsNil(o.InternalDnsTarget) {
		toSerialize["internalDnsTarget"] = o.InternalDnsTarget
	}
	if !IsNil(o.ReservedCidrs) {
		toSerialize["reservedCidrs"] = o.ReservedCidrs
	}
	return toSerialize, nil
}

type NullablePrivateSpaceNetwork struct {
	value *PrivateSpaceNetwork
	isSet bool
}

func (v NullablePrivateSpaceNetwork) Get() *PrivateSpaceNetwork {
	return v.value
}

func (v *NullablePrivateSpaceNetwork) Set(val *PrivateSpaceNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateSpaceNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateSpaceNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateSpaceNetwork(val *PrivateSpaceNetwork) *NullablePrivateSpaceNetwork {
	return &NullablePrivateSpaceNetwork{value: val, isSet: true}
}

func (v NullablePrivateSpaceNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateSpaceNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


