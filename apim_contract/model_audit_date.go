/*
API Manager Contract API

API Manager Contract API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_contract

import (
	"encoding/json"
)

// checks if the AuditDate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditDate{}

// AuditDate struct for AuditDate
type AuditDate struct {
	Date *string `json:"date,omitempty"`
}

// NewAuditDate instantiates a new AuditDate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditDate() *AuditDate {
	this := AuditDate{}
	return &this
}

// NewAuditDateWithDefaults instantiates a new AuditDate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditDateWithDefaults() *AuditDate {
	this := AuditDate{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *AuditDate) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditDate) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *AuditDate) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *AuditDate) SetDate(v string) {
	o.Date = &v
}

func (o AuditDate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditDate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	return toSerialize, nil
}

type NullableAuditDate struct {
	value *AuditDate
	isSet bool
}

func (v NullableAuditDate) Get() *AuditDate {
	return v.value
}

func (v *NullableAuditDate) Set(val *AuditDate) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditDate) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditDate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditDate(val *AuditDate) *NullableAuditDate {
	return &NullableAuditDate{value: val, isSet: true}
}

func (v NullableAuditDate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditDate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


