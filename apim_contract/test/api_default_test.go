/*
API Manager Contract API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package apim_contract

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/mulesoft-anypoint/anypoint-client-go/apim_contract"
)

func Test_apim_contract_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService CreateApiContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string

		resp, httpRes, err := apiClient.DefaultApi.CreateApiContract(context.Background(), orgId, envId, apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DeleteApiContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var contractId string

		httpRes, err := apiClient.DefaultApi.DeleteApiContract(context.Background(), orgId, envId, apiId, contractId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetApiContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var contractId string

		resp, httpRes, err := apiClient.DefaultApi.GetApiContract(context.Background(), orgId, envId, apiId, contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetApiContracts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string

		resp, httpRes, err := apiClient.DefaultApi.GetApiContracts(context.Background(), orgId, envId, apiId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateApiContract", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var contractId string

		resp, httpRes, err := apiClient.DefaultApi.UpdateApiContract(context.Background(), orgId, envId, apiId, contractId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateApiContractStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var orgId string
		var envId string
		var apiId string
		var contractId string
		var action string

		resp, httpRes, err := apiClient.DefaultApi.UpdateApiContractStatus(context.Background(), orgId, envId, apiId, contractId, action).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
