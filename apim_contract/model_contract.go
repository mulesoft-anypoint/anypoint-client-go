/*
API Manager Contract API

API Manager Contract API

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package apim_contract

import (
	"encoding/json"
)

// checks if the Contract type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Contract{}

// Contract struct for Contract
type Contract struct {
	Audit *Audit `json:"audit,omitempty"`
	MasterOrganizationId *string `json:"masterOrganizationId,omitempty"`
	OrganizationId *string `json:"organizationId,omitempty"`
	Id *int32 `json:"id,omitempty"`
	Status *string `json:"status,omitempty"`
	ApprovedDate NullableString `json:"approvedDate,omitempty"`
	RejectedDate NullableString `json:"rejectedDate,omitempty"`
	RevokedDate NullableString `json:"revokedDate,omitempty"`
	ApplicationId *int32 `json:"applicationId,omitempty"`
	Application *Application `json:"application,omitempty"`
	TierId NullableInt32 `json:"tierId,omitempty"`
	Tier *Tier `json:"tier,omitempty"`
	RequestedTierId NullableInt32 `json:"requestedTierId,omitempty"`
	RequestedTier map[string]interface{} `json:"requestedTier,omitempty"`
	Terms NullableString `json:"terms,omitempty"`
	GroupInstanceId NullableString `json:"groupInstanceId,omitempty"`
	GroupInstance map[string]interface{} `json:"groupInstance,omitempty"`
	PartyId NullableString `json:"partyId,omitempty"`
	PartyName NullableString `json:"partyName,omitempty"`
	ApiId *int32 `json:"apiId,omitempty"`
	Api *ApiReference `json:"api,omitempty"`
}

// NewContract instantiates a new Contract object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContract() *Contract {
	this := Contract{}
	return &this
}

// NewContractWithDefaults instantiates a new Contract object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContractWithDefaults() *Contract {
	this := Contract{}
	return &this
}

// GetAudit returns the Audit field value if set, zero value otherwise.
func (o *Contract) GetAudit() Audit {
	if o == nil || IsNil(o.Audit) {
		var ret Audit
		return ret
	}
	return *o.Audit
}

// GetAuditOk returns a tuple with the Audit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetAuditOk() (*Audit, bool) {
	if o == nil || IsNil(o.Audit) {
		return nil, false
	}
	return o.Audit, true
}

// HasAudit returns a boolean if a field has been set.
func (o *Contract) HasAudit() bool {
	if o != nil && !IsNil(o.Audit) {
		return true
	}

	return false
}

// SetAudit gets a reference to the given Audit and assigns it to the Audit field.
func (o *Contract) SetAudit(v Audit) {
	o.Audit = &v
}

// GetMasterOrganizationId returns the MasterOrganizationId field value if set, zero value otherwise.
func (o *Contract) GetMasterOrganizationId() string {
	if o == nil || IsNil(o.MasterOrganizationId) {
		var ret string
		return ret
	}
	return *o.MasterOrganizationId
}

// GetMasterOrganizationIdOk returns a tuple with the MasterOrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetMasterOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.MasterOrganizationId) {
		return nil, false
	}
	return o.MasterOrganizationId, true
}

// HasMasterOrganizationId returns a boolean if a field has been set.
func (o *Contract) HasMasterOrganizationId() bool {
	if o != nil && !IsNil(o.MasterOrganizationId) {
		return true
	}

	return false
}

// SetMasterOrganizationId gets a reference to the given string and assigns it to the MasterOrganizationId field.
func (o *Contract) SetMasterOrganizationId(v string) {
	o.MasterOrganizationId = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *Contract) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *Contract) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *Contract) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Contract) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Contract) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Contract) SetId(v int32) {
	o.Id = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Contract) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Contract) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Contract) SetStatus(v string) {
	o.Status = &v
}

// GetApprovedDate returns the ApprovedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetApprovedDate() string {
	if o == nil || IsNil(o.ApprovedDate.Get()) {
		var ret string
		return ret
	}
	return *o.ApprovedDate.Get()
}

// GetApprovedDateOk returns a tuple with the ApprovedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetApprovedDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApprovedDate.Get(), o.ApprovedDate.IsSet()
}

// HasApprovedDate returns a boolean if a field has been set.
func (o *Contract) HasApprovedDate() bool {
	if o != nil && o.ApprovedDate.IsSet() {
		return true
	}

	return false
}

// SetApprovedDate gets a reference to the given NullableString and assigns it to the ApprovedDate field.
func (o *Contract) SetApprovedDate(v string) {
	o.ApprovedDate.Set(&v)
}
// SetApprovedDateNil sets the value for ApprovedDate to be an explicit nil
func (o *Contract) SetApprovedDateNil() {
	o.ApprovedDate.Set(nil)
}

// UnsetApprovedDate ensures that no value is present for ApprovedDate, not even an explicit nil
func (o *Contract) UnsetApprovedDate() {
	o.ApprovedDate.Unset()
}

// GetRejectedDate returns the RejectedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetRejectedDate() string {
	if o == nil || IsNil(o.RejectedDate.Get()) {
		var ret string
		return ret
	}
	return *o.RejectedDate.Get()
}

// GetRejectedDateOk returns a tuple with the RejectedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetRejectedDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RejectedDate.Get(), o.RejectedDate.IsSet()
}

// HasRejectedDate returns a boolean if a field has been set.
func (o *Contract) HasRejectedDate() bool {
	if o != nil && o.RejectedDate.IsSet() {
		return true
	}

	return false
}

// SetRejectedDate gets a reference to the given NullableString and assigns it to the RejectedDate field.
func (o *Contract) SetRejectedDate(v string) {
	o.RejectedDate.Set(&v)
}
// SetRejectedDateNil sets the value for RejectedDate to be an explicit nil
func (o *Contract) SetRejectedDateNil() {
	o.RejectedDate.Set(nil)
}

// UnsetRejectedDate ensures that no value is present for RejectedDate, not even an explicit nil
func (o *Contract) UnsetRejectedDate() {
	o.RejectedDate.Unset()
}

// GetRevokedDate returns the RevokedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetRevokedDate() string {
	if o == nil || IsNil(o.RevokedDate.Get()) {
		var ret string
		return ret
	}
	return *o.RevokedDate.Get()
}

// GetRevokedDateOk returns a tuple with the RevokedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetRevokedDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RevokedDate.Get(), o.RevokedDate.IsSet()
}

// HasRevokedDate returns a boolean if a field has been set.
func (o *Contract) HasRevokedDate() bool {
	if o != nil && o.RevokedDate.IsSet() {
		return true
	}

	return false
}

// SetRevokedDate gets a reference to the given NullableString and assigns it to the RevokedDate field.
func (o *Contract) SetRevokedDate(v string) {
	o.RevokedDate.Set(&v)
}
// SetRevokedDateNil sets the value for RevokedDate to be an explicit nil
func (o *Contract) SetRevokedDateNil() {
	o.RevokedDate.Set(nil)
}

// UnsetRevokedDate ensures that no value is present for RevokedDate, not even an explicit nil
func (o *Contract) UnsetRevokedDate() {
	o.RevokedDate.Unset()
}

// GetApplicationId returns the ApplicationId field value if set, zero value otherwise.
func (o *Contract) GetApplicationId() int32 {
	if o == nil || IsNil(o.ApplicationId) {
		var ret int32
		return ret
	}
	return *o.ApplicationId
}

// GetApplicationIdOk returns a tuple with the ApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetApplicationIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ApplicationId) {
		return nil, false
	}
	return o.ApplicationId, true
}

// HasApplicationId returns a boolean if a field has been set.
func (o *Contract) HasApplicationId() bool {
	if o != nil && !IsNil(o.ApplicationId) {
		return true
	}

	return false
}

// SetApplicationId gets a reference to the given int32 and assigns it to the ApplicationId field.
func (o *Contract) SetApplicationId(v int32) {
	o.ApplicationId = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *Contract) GetApplication() Application {
	if o == nil || IsNil(o.Application) {
		var ret Application
		return ret
	}
	return *o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetApplicationOk() (*Application, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *Contract) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given Application and assigns it to the Application field.
func (o *Contract) SetApplication(v Application) {
	o.Application = &v
}

// GetTierId returns the TierId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetTierId() int32 {
	if o == nil || IsNil(o.TierId.Get()) {
		var ret int32
		return ret
	}
	return *o.TierId.Get()
}

// GetTierIdOk returns a tuple with the TierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetTierIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TierId.Get(), o.TierId.IsSet()
}

// HasTierId returns a boolean if a field has been set.
func (o *Contract) HasTierId() bool {
	if o != nil && o.TierId.IsSet() {
		return true
	}

	return false
}

// SetTierId gets a reference to the given NullableInt32 and assigns it to the TierId field.
func (o *Contract) SetTierId(v int32) {
	o.TierId.Set(&v)
}
// SetTierIdNil sets the value for TierId to be an explicit nil
func (o *Contract) SetTierIdNil() {
	o.TierId.Set(nil)
}

// UnsetTierId ensures that no value is present for TierId, not even an explicit nil
func (o *Contract) UnsetTierId() {
	o.TierId.Unset()
}

// GetTier returns the Tier field value if set, zero value otherwise.
func (o *Contract) GetTier() Tier {
	if o == nil || IsNil(o.Tier) {
		var ret Tier
		return ret
	}
	return *o.Tier
}

// GetTierOk returns a tuple with the Tier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetTierOk() (*Tier, bool) {
	if o == nil || IsNil(o.Tier) {
		return nil, false
	}
	return o.Tier, true
}

// HasTier returns a boolean if a field has been set.
func (o *Contract) HasTier() bool {
	if o != nil && !IsNil(o.Tier) {
		return true
	}

	return false
}

// SetTier gets a reference to the given Tier and assigns it to the Tier field.
func (o *Contract) SetTier(v Tier) {
	o.Tier = &v
}

// GetRequestedTierId returns the RequestedTierId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetRequestedTierId() int32 {
	if o == nil || IsNil(o.RequestedTierId.Get()) {
		var ret int32
		return ret
	}
	return *o.RequestedTierId.Get()
}

// GetRequestedTierIdOk returns a tuple with the RequestedTierId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetRequestedTierIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RequestedTierId.Get(), o.RequestedTierId.IsSet()
}

// HasRequestedTierId returns a boolean if a field has been set.
func (o *Contract) HasRequestedTierId() bool {
	if o != nil && o.RequestedTierId.IsSet() {
		return true
	}

	return false
}

// SetRequestedTierId gets a reference to the given NullableInt32 and assigns it to the RequestedTierId field.
func (o *Contract) SetRequestedTierId(v int32) {
	o.RequestedTierId.Set(&v)
}
// SetRequestedTierIdNil sets the value for RequestedTierId to be an explicit nil
func (o *Contract) SetRequestedTierIdNil() {
	o.RequestedTierId.Set(nil)
}

// UnsetRequestedTierId ensures that no value is present for RequestedTierId, not even an explicit nil
func (o *Contract) UnsetRequestedTierId() {
	o.RequestedTierId.Unset()
}

// GetRequestedTier returns the RequestedTier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetRequestedTier() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.RequestedTier
}

// GetRequestedTierOk returns a tuple with the RequestedTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetRequestedTierOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.RequestedTier) {
		return map[string]interface{}{}, false
	}
	return o.RequestedTier, true
}

// HasRequestedTier returns a boolean if a field has been set.
func (o *Contract) HasRequestedTier() bool {
	if o != nil && IsNil(o.RequestedTier) {
		return true
	}

	return false
}

// SetRequestedTier gets a reference to the given map[string]interface{} and assigns it to the RequestedTier field.
func (o *Contract) SetRequestedTier(v map[string]interface{}) {
	o.RequestedTier = v
}

// GetTerms returns the Terms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetTerms() string {
	if o == nil || IsNil(o.Terms.Get()) {
		var ret string
		return ret
	}
	return *o.Terms.Get()
}

// GetTermsOk returns a tuple with the Terms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetTermsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Terms.Get(), o.Terms.IsSet()
}

// HasTerms returns a boolean if a field has been set.
func (o *Contract) HasTerms() bool {
	if o != nil && o.Terms.IsSet() {
		return true
	}

	return false
}

// SetTerms gets a reference to the given NullableString and assigns it to the Terms field.
func (o *Contract) SetTerms(v string) {
	o.Terms.Set(&v)
}
// SetTermsNil sets the value for Terms to be an explicit nil
func (o *Contract) SetTermsNil() {
	o.Terms.Set(nil)
}

// UnsetTerms ensures that no value is present for Terms, not even an explicit nil
func (o *Contract) UnsetTerms() {
	o.Terms.Unset()
}

// GetGroupInstanceId returns the GroupInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetGroupInstanceId() string {
	if o == nil || IsNil(o.GroupInstanceId.Get()) {
		var ret string
		return ret
	}
	return *o.GroupInstanceId.Get()
}

// GetGroupInstanceIdOk returns a tuple with the GroupInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetGroupInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GroupInstanceId.Get(), o.GroupInstanceId.IsSet()
}

// HasGroupInstanceId returns a boolean if a field has been set.
func (o *Contract) HasGroupInstanceId() bool {
	if o != nil && o.GroupInstanceId.IsSet() {
		return true
	}

	return false
}

// SetGroupInstanceId gets a reference to the given NullableString and assigns it to the GroupInstanceId field.
func (o *Contract) SetGroupInstanceId(v string) {
	o.GroupInstanceId.Set(&v)
}
// SetGroupInstanceIdNil sets the value for GroupInstanceId to be an explicit nil
func (o *Contract) SetGroupInstanceIdNil() {
	o.GroupInstanceId.Set(nil)
}

// UnsetGroupInstanceId ensures that no value is present for GroupInstanceId, not even an explicit nil
func (o *Contract) UnsetGroupInstanceId() {
	o.GroupInstanceId.Unset()
}

// GetGroupInstance returns the GroupInstance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetGroupInstance() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.GroupInstance
}

// GetGroupInstanceOk returns a tuple with the GroupInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetGroupInstanceOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.GroupInstance) {
		return map[string]interface{}{}, false
	}
	return o.GroupInstance, true
}

// HasGroupInstance returns a boolean if a field has been set.
func (o *Contract) HasGroupInstance() bool {
	if o != nil && IsNil(o.GroupInstance) {
		return true
	}

	return false
}

// SetGroupInstance gets a reference to the given map[string]interface{} and assigns it to the GroupInstance field.
func (o *Contract) SetGroupInstance(v map[string]interface{}) {
	o.GroupInstance = v
}

// GetPartyId returns the PartyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetPartyId() string {
	if o == nil || IsNil(o.PartyId.Get()) {
		var ret string
		return ret
	}
	return *o.PartyId.Get()
}

// GetPartyIdOk returns a tuple with the PartyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetPartyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartyId.Get(), o.PartyId.IsSet()
}

// HasPartyId returns a boolean if a field has been set.
func (o *Contract) HasPartyId() bool {
	if o != nil && o.PartyId.IsSet() {
		return true
	}

	return false
}

// SetPartyId gets a reference to the given NullableString and assigns it to the PartyId field.
func (o *Contract) SetPartyId(v string) {
	o.PartyId.Set(&v)
}
// SetPartyIdNil sets the value for PartyId to be an explicit nil
func (o *Contract) SetPartyIdNil() {
	o.PartyId.Set(nil)
}

// UnsetPartyId ensures that no value is present for PartyId, not even an explicit nil
func (o *Contract) UnsetPartyId() {
	o.PartyId.Unset()
}

// GetPartyName returns the PartyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Contract) GetPartyName() string {
	if o == nil || IsNil(o.PartyName.Get()) {
		var ret string
		return ret
	}
	return *o.PartyName.Get()
}

// GetPartyNameOk returns a tuple with the PartyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Contract) GetPartyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartyName.Get(), o.PartyName.IsSet()
}

// HasPartyName returns a boolean if a field has been set.
func (o *Contract) HasPartyName() bool {
	if o != nil && o.PartyName.IsSet() {
		return true
	}

	return false
}

// SetPartyName gets a reference to the given NullableString and assigns it to the PartyName field.
func (o *Contract) SetPartyName(v string) {
	o.PartyName.Set(&v)
}
// SetPartyNameNil sets the value for PartyName to be an explicit nil
func (o *Contract) SetPartyNameNil() {
	o.PartyName.Set(nil)
}

// UnsetPartyName ensures that no value is present for PartyName, not even an explicit nil
func (o *Contract) UnsetPartyName() {
	o.PartyName.Unset()
}

// GetApiId returns the ApiId field value if set, zero value otherwise.
func (o *Contract) GetApiId() int32 {
	if o == nil || IsNil(o.ApiId) {
		var ret int32
		return ret
	}
	return *o.ApiId
}

// GetApiIdOk returns a tuple with the ApiId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetApiIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiId) {
		return nil, false
	}
	return o.ApiId, true
}

// HasApiId returns a boolean if a field has been set.
func (o *Contract) HasApiId() bool {
	if o != nil && !IsNil(o.ApiId) {
		return true
	}

	return false
}

// SetApiId gets a reference to the given int32 and assigns it to the ApiId field.
func (o *Contract) SetApiId(v int32) {
	o.ApiId = &v
}

// GetApi returns the Api field value if set, zero value otherwise.
func (o *Contract) GetApi() ApiReference {
	if o == nil || IsNil(o.Api) {
		var ret ApiReference
		return ret
	}
	return *o.Api
}

// GetApiOk returns a tuple with the Api field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Contract) GetApiOk() (*ApiReference, bool) {
	if o == nil || IsNil(o.Api) {
		return nil, false
	}
	return o.Api, true
}

// HasApi returns a boolean if a field has been set.
func (o *Contract) HasApi() bool {
	if o != nil && !IsNil(o.Api) {
		return true
	}

	return false
}

// SetApi gets a reference to the given ApiReference and assigns it to the Api field.
func (o *Contract) SetApi(v ApiReference) {
	o.Api = &v
}

func (o Contract) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Contract) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Audit) {
		toSerialize["audit"] = o.Audit
	}
	if !IsNil(o.MasterOrganizationId) {
		toSerialize["masterOrganizationId"] = o.MasterOrganizationId
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organizationId"] = o.OrganizationId
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.ApprovedDate.IsSet() {
		toSerialize["approvedDate"] = o.ApprovedDate.Get()
	}
	if o.RejectedDate.IsSet() {
		toSerialize["rejectedDate"] = o.RejectedDate.Get()
	}
	if o.RevokedDate.IsSet() {
		toSerialize["revokedDate"] = o.RevokedDate.Get()
	}
	if !IsNil(o.ApplicationId) {
		toSerialize["applicationId"] = o.ApplicationId
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if o.TierId.IsSet() {
		toSerialize["tierId"] = o.TierId.Get()
	}
	if !IsNil(o.Tier) {
		toSerialize["tier"] = o.Tier
	}
	if o.RequestedTierId.IsSet() {
		toSerialize["requestedTierId"] = o.RequestedTierId.Get()
	}
	if o.RequestedTier != nil {
		toSerialize["requestedTier"] = o.RequestedTier
	}
	if o.Terms.IsSet() {
		toSerialize["terms"] = o.Terms.Get()
	}
	if o.GroupInstanceId.IsSet() {
		toSerialize["groupInstanceId"] = o.GroupInstanceId.Get()
	}
	if o.GroupInstance != nil {
		toSerialize["groupInstance"] = o.GroupInstance
	}
	if o.PartyId.IsSet() {
		toSerialize["partyId"] = o.PartyId.Get()
	}
	if o.PartyName.IsSet() {
		toSerialize["partyName"] = o.PartyName.Get()
	}
	if !IsNil(o.ApiId) {
		toSerialize["apiId"] = o.ApiId
	}
	if !IsNil(o.Api) {
		toSerialize["api"] = o.Api
	}
	return toSerialize, nil
}

type NullableContract struct {
	value *Contract
	isSet bool
}

func (v NullableContract) Get() *Contract {
	return v.value
}

func (v *NullableContract) Set(val *Contract) {
	v.value = val
	v.isSet = true
}

func (v NullableContract) IsSet() bool {
	return v.isSet
}

func (v *NullableContract) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContract(val *Contract) *NullableContract {
	return &NullableContract{value: val, isSet: true}
}

func (v NullableContract) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContract) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


